/*
支付宝开放平台API

支付宝开放平台v3协议文档

API version: 2024-07-05
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alipay

import (
	"bytes"
	"context"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strconv"
	"time"
)

// AlipayEbppInvoiceExpenserulesSceneruleAPIService AlipayEbppInvoiceExpenserulesSceneruleAPI service
type AlipayEbppInvoiceExpenserulesSceneruleAPIService service

type ApiAlipayEbppInvoiceExpenserulesSceneruleCreateRequest struct {
	ctx                                               context.Context
	ApiService                                        *AlipayEbppInvoiceExpenserulesSceneruleAPIService
	alipayEbppInvoiceExpenserulesSceneruleCreateModel *AlipayEbppInvoiceExpenserulesSceneruleCreateModel
}

func (r ApiAlipayEbppInvoiceExpenserulesSceneruleCreateRequest) AlipayEbppInvoiceExpenserulesSceneruleCreateModel(alipayEbppInvoiceExpenserulesSceneruleCreateModel AlipayEbppInvoiceExpenserulesSceneruleCreateModel) ApiAlipayEbppInvoiceExpenserulesSceneruleCreateRequest {
	r.alipayEbppInvoiceExpenserulesSceneruleCreateModel = &alipayEbppInvoiceExpenserulesSceneruleCreateModel
	return r
}

func (r ApiAlipayEbppInvoiceExpenserulesSceneruleCreateRequest) Execute() (*AlipayEbppInvoiceExpenserulesSceneruleCreateResponseModel, *http.Response, error) {
	return r.ApiService.AlipayEbppInvoiceExpenserulesSceneruleCreateExecute(r)
}

/*
AlipayEbppInvoiceExpenserulesSceneruleCreate 创建费控规则

创建费控规则，例如：创建一条有效期为2021-08-01 00:00:00到2031-08-01 00:00:00的福利餐费控规则，限制对应员工的单日消费金额不超过100元；

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiAlipayEbppInvoiceExpenserulesSceneruleCreateRequest
*/
func (r *AlipayEbppInvoiceExpenserulesSceneruleAPIService) AlipayEbppInvoiceExpenserulesSceneruleCreate(ctx context.Context) ApiAlipayEbppInvoiceExpenserulesSceneruleCreateRequest {
	return ApiAlipayEbppInvoiceExpenserulesSceneruleCreateRequest{
		ApiService: r,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return AlipayEbppInvoiceExpenserulesSceneruleCreateResponseModel
func (a *AlipayEbppInvoiceExpenserulesSceneruleAPIService) AlipayEbppInvoiceExpenserulesSceneruleCreateExecute(r ApiAlipayEbppInvoiceExpenserulesSceneruleCreateRequest) (*AlipayEbppInvoiceExpenserulesSceneruleCreateResponseModel, *http.Response, error) {
	err := a.client.prepareConfig()
	if err != nil {
		return nil, nil, &GenericOpenAPIError{error: err.Error()}
	}
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *AlipayEbppInvoiceExpenserulesSceneruleCreateResponseModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AlipayEbppInvoiceExpenserulesSceneruleAPIService.AlipayEbppInvoiceExpenserulesSceneruleCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/alipay/ebpp/invoice/expenserules/scenerule/create"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.alipayEbppInvoiceExpenserulesSceneruleCreateModel

	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	// Add signing logic
	err = a.signRequest(req)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	// Add verification logic
	err = a.verifyResponse(localVarHTTPResponse, localVarBody)
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v AlipayEbppInvoiceExpenserulesSceneruleCreateDefaultResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAlipayEbppInvoiceExpenserulesSceneruleModifyRequest struct {
	ctx                                               context.Context
	ApiService                                        *AlipayEbppInvoiceExpenserulesSceneruleAPIService
	alipayEbppInvoiceExpenserulesSceneruleModifyModel *AlipayEbppInvoiceExpenserulesSceneruleModifyModel
}

func (r ApiAlipayEbppInvoiceExpenserulesSceneruleModifyRequest) AlipayEbppInvoiceExpenserulesSceneruleModifyModel(alipayEbppInvoiceExpenserulesSceneruleModifyModel AlipayEbppInvoiceExpenserulesSceneruleModifyModel) ApiAlipayEbppInvoiceExpenserulesSceneruleModifyRequest {
	r.alipayEbppInvoiceExpenserulesSceneruleModifyModel = &alipayEbppInvoiceExpenserulesSceneruleModifyModel
	return r
}

func (r ApiAlipayEbppInvoiceExpenserulesSceneruleModifyRequest) Execute() (*AlipayEbppInvoiceExpenserulesSceneruleModifyResponseModel, *http.Response, error) {
	return r.ApiService.AlipayEbppInvoiceExpenserulesSceneruleModifyExecute(r)
}

/*
AlipayEbppInvoiceExpenserulesSceneruleModify 修改费控规则

修改费控规则

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiAlipayEbppInvoiceExpenserulesSceneruleModifyRequest
*/
func (r *AlipayEbppInvoiceExpenserulesSceneruleAPIService) AlipayEbppInvoiceExpenserulesSceneruleModify(ctx context.Context) ApiAlipayEbppInvoiceExpenserulesSceneruleModifyRequest {
	return ApiAlipayEbppInvoiceExpenserulesSceneruleModifyRequest{
		ApiService: r,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return AlipayEbppInvoiceExpenserulesSceneruleModifyResponseModel
func (a *AlipayEbppInvoiceExpenserulesSceneruleAPIService) AlipayEbppInvoiceExpenserulesSceneruleModifyExecute(r ApiAlipayEbppInvoiceExpenserulesSceneruleModifyRequest) (*AlipayEbppInvoiceExpenserulesSceneruleModifyResponseModel, *http.Response, error) {
	err := a.client.prepareConfig()
	if err != nil {
		return nil, nil, &GenericOpenAPIError{error: err.Error()}
	}
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *AlipayEbppInvoiceExpenserulesSceneruleModifyResponseModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AlipayEbppInvoiceExpenserulesSceneruleAPIService.AlipayEbppInvoiceExpenserulesSceneruleModify")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/alipay/ebpp/invoice/expenserules/scenerule/modify"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.alipayEbppInvoiceExpenserulesSceneruleModifyModel

	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	// Add signing logic
	err = a.signRequest(req)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	// Add verification logic
	err = a.verifyResponse(localVarHTTPResponse, localVarBody)
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v AlipayEbppInvoiceExpenserulesSceneruleModifyDefaultResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAlipayEbppInvoiceExpenserulesSceneruleQueryRequest struct {
	ctx          context.Context
	ApiService   *AlipayEbppInvoiceExpenserulesSceneruleAPIService
	accountId    *string
	agreementNo  *string
	enterpriseId *string
	standardId   *string
	pageNum      *int32
	pageSize     *int32
}

// 企业ID
func (r ApiAlipayEbppInvoiceExpenserulesSceneruleQueryRequest) AccountId(accountId string) ApiAlipayEbppInvoiceExpenserulesSceneruleQueryRequest {
	r.accountId = &accountId
	return r
}

// 授权签约协议号
func (r ApiAlipayEbppInvoiceExpenserulesSceneruleQueryRequest) AgreementNo(agreementNo string) ApiAlipayEbppInvoiceExpenserulesSceneruleQueryRequest {
	r.agreementNo = &agreementNo
	return r
}

// 企业码企业id
func (r ApiAlipayEbppInvoiceExpenserulesSceneruleQueryRequest) EnterpriseId(enterpriseId string) ApiAlipayEbppInvoiceExpenserulesSceneruleQueryRequest {
	r.enterpriseId = &enterpriseId
	return r
}

// 费控规则ID
func (r ApiAlipayEbppInvoiceExpenserulesSceneruleQueryRequest) StandardId(standardId string) ApiAlipayEbppInvoiceExpenserulesSceneruleQueryRequest {
	r.standardId = &standardId
	return r
}

// 页数
func (r ApiAlipayEbppInvoiceExpenserulesSceneruleQueryRequest) PageNum(pageNum int32) ApiAlipayEbppInvoiceExpenserulesSceneruleQueryRequest {
	r.pageNum = &pageNum
	return r
}

// 页大小
func (r ApiAlipayEbppInvoiceExpenserulesSceneruleQueryRequest) PageSize(pageSize int32) ApiAlipayEbppInvoiceExpenserulesSceneruleQueryRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiAlipayEbppInvoiceExpenserulesSceneruleQueryRequest) Execute() (*AlipayEbppInvoiceExpenserulesSceneruleQueryResponseModel, *http.Response, error) {
	return r.ApiService.AlipayEbppInvoiceExpenserulesSceneruleQueryExecute(r)
}

/*
AlipayEbppInvoiceExpenserulesSceneruleQuery 查询费控规则信息

查询费控规则信息

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiAlipayEbppInvoiceExpenserulesSceneruleQueryRequest
*/
func (r *AlipayEbppInvoiceExpenserulesSceneruleAPIService) AlipayEbppInvoiceExpenserulesSceneruleQuery(ctx context.Context) ApiAlipayEbppInvoiceExpenserulesSceneruleQueryRequest {
	return ApiAlipayEbppInvoiceExpenserulesSceneruleQueryRequest{
		ApiService: r,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return AlipayEbppInvoiceExpenserulesSceneruleQueryResponseModel
func (a *AlipayEbppInvoiceExpenserulesSceneruleAPIService) AlipayEbppInvoiceExpenserulesSceneruleQueryExecute(r ApiAlipayEbppInvoiceExpenserulesSceneruleQueryRequest) (*AlipayEbppInvoiceExpenserulesSceneruleQueryResponseModel, *http.Response, error) {
	err := a.client.prepareConfig()
	if err != nil {
		return nil, nil, &GenericOpenAPIError{error: err.Error()}
	}
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *AlipayEbppInvoiceExpenserulesSceneruleQueryResponseModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AlipayEbppInvoiceExpenserulesSceneruleAPIService.AlipayEbppInvoiceExpenserulesSceneruleQuery")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/alipay/ebpp/invoice/expenserules/scenerule/query"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.accountId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "account_id", r.accountId, "form", "")
	}
	if r.agreementNo != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "agreement_no", r.agreementNo, "form", "")
	}
	if r.enterpriseId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enterprise_id", r.enterpriseId, "form", "")
	}
	if r.standardId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "standard_id", r.standardId, "form", "")
	}
	if r.pageNum != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page_num", r.pageNum, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page_size", r.pageSize, "form", "")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	// Add signing logic
	err = a.signRequest(req)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	// Add verification logic
	err = a.verifyResponse(localVarHTTPResponse, localVarBody)
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v AlipayEbppInvoiceExpenserulesSceneruleQueryDefaultResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

func (a *AlipayEbppInvoiceExpenserulesSceneruleAPIService) signRequest(req *http.Request) error {
	appID := a.client.cfg.AppID
	appCertSN := a.client.cfg.AppCertSN
	nonce := generateUUID()
	timestamp := strconv.FormatInt(time.Now().UnixNano()/1e6, 10)

	authString := fmt.Sprintf("app_id=%s", appID)
	if appCertSN != "" {
		authString += fmt.Sprintf(",app_cert_sn=%s", appCertSN)
	}
	authString += fmt.Sprintf(",nonce=%s,timestamp=%s", nonce, timestamp)

	httpMethod := req.Method
	httpRequestUri := req.URL.Path
	if req.URL.RawQuery != "" {
		httpRequestUri += "?" + req.URL.RawQuery
	}

	var httpRequestBody string
	if req.Body != nil {
		bodyBytes, err := io.ReadAll(req.Body)
		if err != nil {
			return err
		}
		httpRequestBody = string(bodyBytes)
		req.Body = io.NopCloser(bytes.NewBuffer(bodyBytes))
	}

	content := authString + "\n" +
		httpMethod + "\n" +
		httpRequestUri + "\n" +
		httpRequestBody + "\n"

	if appAuthToken := req.Header.Get("alipay-app-auth-token"); appAuthToken != "" {
		content += appAuthToken + "\n"
	}

	signature, err := signWithRSA(content, a.client.cfg.privateKey)
	if err != nil {
		return err
	}

	req.Header.Set("Authorization", fmt.Sprintf("ALIPAY-SHA256withRSA %s,sign=%s", authString, signature))
	return nil
}

func (a *AlipayEbppInvoiceExpenserulesSceneruleAPIService) verifyResponse(resp *http.Response, body []byte) error {
	timestamp := resp.Header.Get("alipay-timestamp")
	nonce := resp.Header.Get("alipay-nonce")
	sign := resp.Header.Get("alipay-signature")

	content := timestamp + "\n" +
		nonce + "\n" +
		string(body) + "\n"

	return verifyWithRSA(content, sign, a.client.cfg.publicKey)
}
