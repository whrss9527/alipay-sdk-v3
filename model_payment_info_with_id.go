/*
支付宝开放平台API

支付宝开放平台v3协议文档

API version: 2024-07-05
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alipay

import (
	"encoding/json"
)

// checks if the PaymentInfoWithId type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PaymentInfoWithId{}

// PaymentInfoWithId struct for PaymentInfoWithId
type PaymentInfoWithId struct {
	// 支付单id
	PaymentIds []string `json:"payment_ids,omitempty"`
	// 支付资金类型
	Type *string `json:"type,omitempty"`
}

// NewPaymentInfoWithId instantiates a new PaymentInfoWithId object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPaymentInfoWithId() *PaymentInfoWithId {
	this := PaymentInfoWithId{}
	return &this
}

// NewPaymentInfoWithIdWithDefaults instantiates a new PaymentInfoWithId object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPaymentInfoWithIdWithDefaults() *PaymentInfoWithId {
	this := PaymentInfoWithId{}
	return &this
}

// GetPaymentIds returns the PaymentIds field value if set, zero value otherwise.
func (o *PaymentInfoWithId) GetPaymentIds() []string {
	if o == nil || IsNil(o.PaymentIds) {
		var ret []string
		return ret
	}
	return o.PaymentIds
}

// GetPaymentIdsOk returns a tuple with the PaymentIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentInfoWithId) GetPaymentIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.PaymentIds) {
		return nil, false
	}
	return o.PaymentIds, true
}

// HasPaymentIds returns a boolean if a field has been set.
func (o *PaymentInfoWithId) HasPaymentIds() bool {
	if o != nil && !IsNil(o.PaymentIds) {
		return true
	}

	return false
}

// SetPaymentIds gets a reference to the given []string and assigns it to the PaymentIds field.
func (o *PaymentInfoWithId) SetPaymentIds(v []string) {
	o.PaymentIds = v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *PaymentInfoWithId) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentInfoWithId) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *PaymentInfoWithId) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *PaymentInfoWithId) SetType(v string) {
	o.Type = &v
}

func (o PaymentInfoWithId) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PaymentInfoWithId) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.PaymentIds) {
		toSerialize["payment_ids"] = o.PaymentIds
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullablePaymentInfoWithId struct {
	value *PaymentInfoWithId
	isSet bool
}

func (v NullablePaymentInfoWithId) Get() *PaymentInfoWithId {
	return v.value
}

func (v *NullablePaymentInfoWithId) Set(val *PaymentInfoWithId) {
	v.value = val
	v.isSet = true
}

func (v NullablePaymentInfoWithId) IsSet() bool {
	return v.isSet
}

func (v *NullablePaymentInfoWithId) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePaymentInfoWithId(val *PaymentInfoWithId) *NullablePaymentInfoWithId {
	return &NullablePaymentInfoWithId{value: val, isSet: true}
}

func (v NullablePaymentInfoWithId) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePaymentInfoWithId) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
