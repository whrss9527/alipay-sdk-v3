/*
支付宝开放平台API

支付宝开放平台v3协议文档

API version: 2024-07-05
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the MdCodeInfoDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MdCodeInfoDTO{}

// MdCodeInfoDTO struct for MdCodeInfoDTO
type MdCodeInfoDTO struct {
	// 本次回传动态码的状态：  SUCCESS: 本次发码成功  FAIL_RETRY: 本次发码失败，且需要支付宝重试（重新通知商户发码）  FAIL_NOT_RETRY: 本次发码失败，且无需支付宝重试（无需重新通知商户发码）
	CodeStatus *string `json:"code_status,omitempty"`
	// 动态码的码值：  code_status为SUCCESS时必填；  基于此码值生成条形码或二维码用于扫码核销。
	CodeValue *string `json:"code_value,omitempty"`
	// 当前动态码的过期（失效）时间：   code_status为SUCCESS时必填。
	ExpireTime *string `json:"expire_time,omitempty"`
	// 商户回传动态码的时间戳 (单位秒)。    即商户调接口回传动态码时刻对应的long类型时间戳，用于区分不同的发码请求。
	TimeStamp *int32 `json:"time_stamp,omitempty"`
}

// NewMdCodeInfoDTO instantiates a new MdCodeInfoDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMdCodeInfoDTO() *MdCodeInfoDTO {
	this := MdCodeInfoDTO{}
	return &this
}

// NewMdCodeInfoDTOWithDefaults instantiates a new MdCodeInfoDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMdCodeInfoDTOWithDefaults() *MdCodeInfoDTO {
	this := MdCodeInfoDTO{}
	return &this
}

// GetCodeStatus returns the CodeStatus field value if set, zero value otherwise.
func (o *MdCodeInfoDTO) GetCodeStatus() string {
	if o == nil || IsNil(o.CodeStatus) {
		var ret string
		return ret
	}
	return *o.CodeStatus
}

// GetCodeStatusOk returns a tuple with the CodeStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MdCodeInfoDTO) GetCodeStatusOk() (*string, bool) {
	if o == nil || IsNil(o.CodeStatus) {
		return nil, false
	}
	return o.CodeStatus, true
}

// HasCodeStatus returns a boolean if a field has been set.
func (o *MdCodeInfoDTO) HasCodeStatus() bool {
	if o != nil && !IsNil(o.CodeStatus) {
		return true
	}

	return false
}

// SetCodeStatus gets a reference to the given string and assigns it to the CodeStatus field.
func (o *MdCodeInfoDTO) SetCodeStatus(v string) {
	o.CodeStatus = &v
}

// GetCodeValue returns the CodeValue field value if set, zero value otherwise.
func (o *MdCodeInfoDTO) GetCodeValue() string {
	if o == nil || IsNil(o.CodeValue) {
		var ret string
		return ret
	}
	return *o.CodeValue
}

// GetCodeValueOk returns a tuple with the CodeValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MdCodeInfoDTO) GetCodeValueOk() (*string, bool) {
	if o == nil || IsNil(o.CodeValue) {
		return nil, false
	}
	return o.CodeValue, true
}

// HasCodeValue returns a boolean if a field has been set.
func (o *MdCodeInfoDTO) HasCodeValue() bool {
	if o != nil && !IsNil(o.CodeValue) {
		return true
	}

	return false
}

// SetCodeValue gets a reference to the given string and assigns it to the CodeValue field.
func (o *MdCodeInfoDTO) SetCodeValue(v string) {
	o.CodeValue = &v
}

// GetExpireTime returns the ExpireTime field value if set, zero value otherwise.
func (o *MdCodeInfoDTO) GetExpireTime() string {
	if o == nil || IsNil(o.ExpireTime) {
		var ret string
		return ret
	}
	return *o.ExpireTime
}

// GetExpireTimeOk returns a tuple with the ExpireTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MdCodeInfoDTO) GetExpireTimeOk() (*string, bool) {
	if o == nil || IsNil(o.ExpireTime) {
		return nil, false
	}
	return o.ExpireTime, true
}

// HasExpireTime returns a boolean if a field has been set.
func (o *MdCodeInfoDTO) HasExpireTime() bool {
	if o != nil && !IsNil(o.ExpireTime) {
		return true
	}

	return false
}

// SetExpireTime gets a reference to the given string and assigns it to the ExpireTime field.
func (o *MdCodeInfoDTO) SetExpireTime(v string) {
	o.ExpireTime = &v
}

// GetTimeStamp returns the TimeStamp field value if set, zero value otherwise.
func (o *MdCodeInfoDTO) GetTimeStamp() int32 {
	if o == nil || IsNil(o.TimeStamp) {
		var ret int32
		return ret
	}
	return *o.TimeStamp
}

// GetTimeStampOk returns a tuple with the TimeStamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MdCodeInfoDTO) GetTimeStampOk() (*int32, bool) {
	if o == nil || IsNil(o.TimeStamp) {
		return nil, false
	}
	return o.TimeStamp, true
}

// HasTimeStamp returns a boolean if a field has been set.
func (o *MdCodeInfoDTO) HasTimeStamp() bool {
	if o != nil && !IsNil(o.TimeStamp) {
		return true
	}

	return false
}

// SetTimeStamp gets a reference to the given int32 and assigns it to the TimeStamp field.
func (o *MdCodeInfoDTO) SetTimeStamp(v int32) {
	o.TimeStamp = &v
}

func (o MdCodeInfoDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MdCodeInfoDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CodeStatus) {
		toSerialize["code_status"] = o.CodeStatus
	}
	if !IsNil(o.CodeValue) {
		toSerialize["code_value"] = o.CodeValue
	}
	if !IsNil(o.ExpireTime) {
		toSerialize["expire_time"] = o.ExpireTime
	}
	if !IsNil(o.TimeStamp) {
		toSerialize["time_stamp"] = o.TimeStamp
	}
	return toSerialize, nil
}

type NullableMdCodeInfoDTO struct {
	value *MdCodeInfoDTO
	isSet bool
}

func (v NullableMdCodeInfoDTO) Get() *MdCodeInfoDTO {
	return v.value
}

func (v *NullableMdCodeInfoDTO) Set(val *MdCodeInfoDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableMdCodeInfoDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableMdCodeInfoDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMdCodeInfoDTO(val *MdCodeInfoDTO) *NullableMdCodeInfoDTO {
	return &NullableMdCodeInfoDTO{value: val, isSet: true}
}

func (v NullableMdCodeInfoDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMdCodeInfoDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


