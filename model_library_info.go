/*
支付宝开放平台API

支付宝开放平台v3协议文档

API version: 2024-07-05
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the LibraryInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LibraryInfo{}

// LibraryInfo struct for LibraryInfo
type LibraryInfo struct {
	// 知识库ID
	Id *int32 `json:"id,omitempty"`
	// 知识库名称
	Name *string `json:"name,omitempty"`
	// 类目ID
	TreeId *int32 `json:"tree_id,omitempty"`
	// 修改时间
	UpdateTime *string `json:"update_time,omitempty"`
}

// NewLibraryInfo instantiates a new LibraryInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLibraryInfo() *LibraryInfo {
	this := LibraryInfo{}
	return &this
}

// NewLibraryInfoWithDefaults instantiates a new LibraryInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLibraryInfoWithDefaults() *LibraryInfo {
	this := LibraryInfo{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *LibraryInfo) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LibraryInfo) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *LibraryInfo) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *LibraryInfo) SetId(v int32) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *LibraryInfo) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LibraryInfo) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *LibraryInfo) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *LibraryInfo) SetName(v string) {
	o.Name = &v
}

// GetTreeId returns the TreeId field value if set, zero value otherwise.
func (o *LibraryInfo) GetTreeId() int32 {
	if o == nil || IsNil(o.TreeId) {
		var ret int32
		return ret
	}
	return *o.TreeId
}

// GetTreeIdOk returns a tuple with the TreeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LibraryInfo) GetTreeIdOk() (*int32, bool) {
	if o == nil || IsNil(o.TreeId) {
		return nil, false
	}
	return o.TreeId, true
}

// HasTreeId returns a boolean if a field has been set.
func (o *LibraryInfo) HasTreeId() bool {
	if o != nil && !IsNil(o.TreeId) {
		return true
	}

	return false
}

// SetTreeId gets a reference to the given int32 and assigns it to the TreeId field.
func (o *LibraryInfo) SetTreeId(v int32) {
	o.TreeId = &v
}

// GetUpdateTime returns the UpdateTime field value if set, zero value otherwise.
func (o *LibraryInfo) GetUpdateTime() string {
	if o == nil || IsNil(o.UpdateTime) {
		var ret string
		return ret
	}
	return *o.UpdateTime
}

// GetUpdateTimeOk returns a tuple with the UpdateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LibraryInfo) GetUpdateTimeOk() (*string, bool) {
	if o == nil || IsNil(o.UpdateTime) {
		return nil, false
	}
	return o.UpdateTime, true
}

// HasUpdateTime returns a boolean if a field has been set.
func (o *LibraryInfo) HasUpdateTime() bool {
	if o != nil && !IsNil(o.UpdateTime) {
		return true
	}

	return false
}

// SetUpdateTime gets a reference to the given string and assigns it to the UpdateTime field.
func (o *LibraryInfo) SetUpdateTime(v string) {
	o.UpdateTime = &v
}

func (o LibraryInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LibraryInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.TreeId) {
		toSerialize["tree_id"] = o.TreeId
	}
	if !IsNil(o.UpdateTime) {
		toSerialize["update_time"] = o.UpdateTime
	}
	return toSerialize, nil
}

type NullableLibraryInfo struct {
	value *LibraryInfo
	isSet bool
}

func (v NullableLibraryInfo) Get() *LibraryInfo {
	return v.value
}

func (v *NullableLibraryInfo) Set(val *LibraryInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableLibraryInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableLibraryInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLibraryInfo(val *LibraryInfo) *NullableLibraryInfo {
	return &NullableLibraryInfo{value: val, isSet: true}
}

func (v NullableLibraryInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLibraryInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


