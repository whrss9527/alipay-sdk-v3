/*
支付宝开放平台API

支付宝开放平台v3协议文档

API version: 2024-07-05
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the SubButton type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SubButton{}

// SubButton struct for SubButton
type SubButton struct {
	// 当actionType为link时，该参数为url链接；   当actionType为out时，该参数为用户自定义参数；   当actionType为tel时，该参数为电话号码。   当action_type为map时，该参数为查看地图的关键字。   当action_type为consumption时，该参数可不传。   该参数最长255个字符，不允许冒号等特殊字符。
	ActionParam *string `json:"action_param,omitempty"`
	// 菜单类型：  out——事件型菜单；  link——链接型菜单；  tel——点击拨打电话；  map——点击查看地图；  consumption——点击查看用户与生活号管理员账号之间的消费记录
	ActionType *string `json:"action_type,omitempty"`
	// icon图片url，必须是http协议的url，尺寸为60X60，最大不超过5M，请先调用<a href=\"https://docs.open.alipay.com/api_3/alipay.offline.material.image.upload\"> 图片上传接口</a>获得图片url
	Icon *string `json:"icon,omitempty"`
	// 菜单名称，icon菜单名称不超过5个汉字，文本菜单名称不超过9个汉字，编码格式为GBK
	Name *string `json:"name,omitempty"`
}

// NewSubButton instantiates a new SubButton object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubButton() *SubButton {
	this := SubButton{}
	return &this
}

// NewSubButtonWithDefaults instantiates a new SubButton object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubButtonWithDefaults() *SubButton {
	this := SubButton{}
	return &this
}

// GetActionParam returns the ActionParam field value if set, zero value otherwise.
func (o *SubButton) GetActionParam() string {
	if o == nil || IsNil(o.ActionParam) {
		var ret string
		return ret
	}
	return *o.ActionParam
}

// GetActionParamOk returns a tuple with the ActionParam field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubButton) GetActionParamOk() (*string, bool) {
	if o == nil || IsNil(o.ActionParam) {
		return nil, false
	}
	return o.ActionParam, true
}

// HasActionParam returns a boolean if a field has been set.
func (o *SubButton) HasActionParam() bool {
	if o != nil && !IsNil(o.ActionParam) {
		return true
	}

	return false
}

// SetActionParam gets a reference to the given string and assigns it to the ActionParam field.
func (o *SubButton) SetActionParam(v string) {
	o.ActionParam = &v
}

// GetActionType returns the ActionType field value if set, zero value otherwise.
func (o *SubButton) GetActionType() string {
	if o == nil || IsNil(o.ActionType) {
		var ret string
		return ret
	}
	return *o.ActionType
}

// GetActionTypeOk returns a tuple with the ActionType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubButton) GetActionTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ActionType) {
		return nil, false
	}
	return o.ActionType, true
}

// HasActionType returns a boolean if a field has been set.
func (o *SubButton) HasActionType() bool {
	if o != nil && !IsNil(o.ActionType) {
		return true
	}

	return false
}

// SetActionType gets a reference to the given string and assigns it to the ActionType field.
func (o *SubButton) SetActionType(v string) {
	o.ActionType = &v
}

// GetIcon returns the Icon field value if set, zero value otherwise.
func (o *SubButton) GetIcon() string {
	if o == nil || IsNil(o.Icon) {
		var ret string
		return ret
	}
	return *o.Icon
}

// GetIconOk returns a tuple with the Icon field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubButton) GetIconOk() (*string, bool) {
	if o == nil || IsNil(o.Icon) {
		return nil, false
	}
	return o.Icon, true
}

// HasIcon returns a boolean if a field has been set.
func (o *SubButton) HasIcon() bool {
	if o != nil && !IsNil(o.Icon) {
		return true
	}

	return false
}

// SetIcon gets a reference to the given string and assigns it to the Icon field.
func (o *SubButton) SetIcon(v string) {
	o.Icon = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *SubButton) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubButton) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *SubButton) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *SubButton) SetName(v string) {
	o.Name = &v
}

func (o SubButton) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SubButton) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ActionParam) {
		toSerialize["action_param"] = o.ActionParam
	}
	if !IsNil(o.ActionType) {
		toSerialize["action_type"] = o.ActionType
	}
	if !IsNil(o.Icon) {
		toSerialize["icon"] = o.Icon
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	return toSerialize, nil
}

type NullableSubButton struct {
	value *SubButton
	isSet bool
}

func (v NullableSubButton) Get() *SubButton {
	return v.value
}

func (v *NullableSubButton) Set(val *SubButton) {
	v.value = val
	v.isSet = true
}

func (v NullableSubButton) IsSet() bool {
	return v.isSet
}

func (v *NullableSubButton) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubButton(val *SubButton) *NullableSubButton {
	return &NullableSubButton{value: val, isSet: true}
}

func (v NullableSubButton) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubButton) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


