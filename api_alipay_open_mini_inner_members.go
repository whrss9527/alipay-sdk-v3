/*
支付宝开放平台API

支付宝开放平台v3协议文档

API version: 2024-07-05
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alipay

import (
	"bytes"
	"context"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strconv"
	"time"
)

// AlipayOpenMiniInnerMembersAPIService AlipayOpenMiniInnerMembersAPI service
type AlipayOpenMiniInnerMembersAPIService service

type ApiAlipayOpenMiniInnerMembersAddRequest struct {
	ctx                                context.Context
	ApiService                         *AlipayOpenMiniInnerMembersAPIService
	alipayOpenMiniInnerMembersAddModel *AlipayOpenMiniInnerMembersAddModel
}

func (r ApiAlipayOpenMiniInnerMembersAddRequest) AlipayOpenMiniInnerMembersAddModel(alipayOpenMiniInnerMembersAddModel AlipayOpenMiniInnerMembersAddModel) ApiAlipayOpenMiniInnerMembersAddRequest {
	r.alipayOpenMiniInnerMembersAddModel = &alipayOpenMiniInnerMembersAddModel
	return r
}

func (r ApiAlipayOpenMiniInnerMembersAddRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.AlipayOpenMiniInnerMembersAddExecute(r)
}

/*
AlipayOpenMiniInnerMembersAdd 内部链路添加开发成员

添加开发成员

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiAlipayOpenMiniInnerMembersAddRequest
*/
func (r *AlipayOpenMiniInnerMembersAPIService) AlipayOpenMiniInnerMembersAdd(ctx context.Context) ApiAlipayOpenMiniInnerMembersAddRequest {
	return ApiAlipayOpenMiniInnerMembersAddRequest{
		ApiService: r,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return map[string]interface{}
func (a *AlipayOpenMiniInnerMembersAPIService) AlipayOpenMiniInnerMembersAddExecute(r ApiAlipayOpenMiniInnerMembersAddRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AlipayOpenMiniInnerMembersAPIService.AlipayOpenMiniInnerMembersAdd")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/alipay/open/mini/inner/members/add"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.alipayOpenMiniInnerMembersAddModel

	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	// Add signing logic
	err = a.signRequest(req)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	// Add verification logic
	err = a.verifyResponse(localVarHTTPResponse, localVarBody)
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v AlipayOpenMiniInnerMembersAddDefaultResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAlipayOpenMiniInnerMembersDeleteRequest struct {
	ctx           context.Context
	ApiService    *AlipayOpenMiniInnerMembersAPIService
	miniAppId     *string
	appOrigin     *string
	domainAccount *string
	loginId       *string
	type_         *string
}

// 业务小程序id
func (r ApiAlipayOpenMiniInnerMembersDeleteRequest) MiniAppId(miniAppId string) ApiAlipayOpenMiniInnerMembersDeleteRequest {
	r.miniAppId = &miniAppId
	return r
}

// 业务来源
func (r ApiAlipayOpenMiniInnerMembersDeleteRequest) AppOrigin(appOrigin string) ApiAlipayOpenMiniInnerMembersDeleteRequest {
	r.appOrigin = &appOrigin
	return r
}

// 域账号（如传入则删除联系人）
func (r ApiAlipayOpenMiniInnerMembersDeleteRequest) DomainAccount(domainAccount string) ApiAlipayOpenMiniInnerMembersDeleteRequest {
	r.domainAccount = &domainAccount
	return r
}

// 登陆支付宝账号
func (r ApiAlipayOpenMiniInnerMembersDeleteRequest) LoginId(loginId string) ApiAlipayOpenMiniInnerMembersDeleteRequest {
	r.loginId = &loginId
	return r
}

// 成员类型
func (r ApiAlipayOpenMiniInnerMembersDeleteRequest) Type_(type_ string) ApiAlipayOpenMiniInnerMembersDeleteRequest {
	r.type_ = &type_
	return r
}

func (r ApiAlipayOpenMiniInnerMembersDeleteRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.AlipayOpenMiniInnerMembersDeleteExecute(r)
}

/*
AlipayOpenMiniInnerMembersDelete 内部链路删除开发成员

删除开发成员

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiAlipayOpenMiniInnerMembersDeleteRequest
*/
func (r *AlipayOpenMiniInnerMembersAPIService) AlipayOpenMiniInnerMembersDelete(ctx context.Context) ApiAlipayOpenMiniInnerMembersDeleteRequest {
	return ApiAlipayOpenMiniInnerMembersDeleteRequest{
		ApiService: r,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return map[string]interface{}
func (a *AlipayOpenMiniInnerMembersAPIService) AlipayOpenMiniInnerMembersDeleteExecute(r ApiAlipayOpenMiniInnerMembersDeleteRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodDelete
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AlipayOpenMiniInnerMembersAPIService.AlipayOpenMiniInnerMembersDelete")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/alipay/open/mini/inner/members/delete"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.miniAppId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "mini_app_id", r.miniAppId, "form", "")
	}
	if r.appOrigin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "app_origin", r.appOrigin, "form", "")
	}
	if r.domainAccount != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "domain_account", r.domainAccount, "form", "")
	}
	if r.loginId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "login_id", r.loginId, "form", "")
	}
	if r.type_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "type", r.type_, "form", "")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	// Add signing logic
	err = a.signRequest(req)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	// Add verification logic
	err = a.verifyResponse(localVarHTTPResponse, localVarBody)
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v AlipayOpenMiniInnerMembersDeleteDefaultResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAlipayOpenMiniInnerMembersQueryRequest struct {
	ctx        context.Context
	ApiService *AlipayOpenMiniInnerMembersAPIService
	miniAppId  *string
	appOrigin  *string
}

// 业务小程序id
func (r ApiAlipayOpenMiniInnerMembersQueryRequest) MiniAppId(miniAppId string) ApiAlipayOpenMiniInnerMembersQueryRequest {
	r.miniAppId = &miniAppId
	return r
}

// 业务来源
func (r ApiAlipayOpenMiniInnerMembersQueryRequest) AppOrigin(appOrigin string) ApiAlipayOpenMiniInnerMembersQueryRequest {
	r.appOrigin = &appOrigin
	return r
}

func (r ApiAlipayOpenMiniInnerMembersQueryRequest) Execute() (*AlipayOpenMiniInnerMembersQueryResponseModel, *http.Response, error) {
	return r.ApiService.AlipayOpenMiniInnerMembersQueryExecute(r)
}

/*
AlipayOpenMiniInnerMembersQuery 内部链路查询开发成员

内部链路查询开发成员

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiAlipayOpenMiniInnerMembersQueryRequest
*/
func (r *AlipayOpenMiniInnerMembersAPIService) AlipayOpenMiniInnerMembersQuery(ctx context.Context) ApiAlipayOpenMiniInnerMembersQueryRequest {
	return ApiAlipayOpenMiniInnerMembersQueryRequest{
		ApiService: r,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return AlipayOpenMiniInnerMembersQueryResponseModel
func (a *AlipayOpenMiniInnerMembersAPIService) AlipayOpenMiniInnerMembersQueryExecute(r ApiAlipayOpenMiniInnerMembersQueryRequest) (*AlipayOpenMiniInnerMembersQueryResponseModel, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *AlipayOpenMiniInnerMembersQueryResponseModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AlipayOpenMiniInnerMembersAPIService.AlipayOpenMiniInnerMembersQuery")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/alipay/open/mini/inner/members/query"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.miniAppId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "mini_app_id", r.miniAppId, "form", "")
	}
	if r.appOrigin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "app_origin", r.appOrigin, "form", "")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	// Add signing logic
	err = a.signRequest(req)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	// Add verification logic
	err = a.verifyResponse(localVarHTTPResponse, localVarBody)
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v AlipayOpenMiniInnerMembersQueryDefaultResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

func (a *AlipayOpenMiniInnerMembersAPIService) signRequest(req *http.Request) error {
	appID := a.client.cfg.AppID
	appCertSN := a.client.cfg.AppCertSN
	privateKey := a.client.cfg.PrivateKey

	nonce := generateUUID()
	timestamp := strconv.FormatInt(time.Now().UnixNano()/1e6, 10)

	authString := fmt.Sprintf("app_id=%s", appID)
	if appCertSN != "" {
		authString += fmt.Sprintf(",app_cert_sn=%s", appCertSN)
	}
	authString += fmt.Sprintf(",nonce=%s,timestamp=%s", nonce, timestamp)

	httpMethod := req.Method
	httpRequestUri := req.URL.Path
	if req.URL.RawQuery != "" {
		httpRequestUri += "?" + req.URL.RawQuery
	}

	var httpRequestBody string
	if req.Body != nil {
		bodyBytes, err := io.ReadAll(req.Body)
		if err != nil {
			return err
		}
		httpRequestBody = string(bodyBytes)
		req.Body = io.NopCloser(bytes.NewBuffer(bodyBytes))
	}

	content := authString + "\n" +
		httpMethod + "\n" +
		httpRequestUri + "\n" +
		httpRequestBody + "\n"

	if appAuthToken := req.Header.Get("alipay-app-auth-token"); appAuthToken != "" {
		content += appAuthToken + "\n"
	}

	signature, err := signWithRSA(content, privateKey)
	if err != nil {
		return err
	}

	req.Header.Set("Authorization", fmt.Sprintf("ALIPAY-SHA256withRSA %s,sign=%s", authString, signature))
	return nil
}

func (a *AlipayOpenMiniInnerMembersAPIService) verifyResponse(resp *http.Response, body []byte) error {
	timestamp := resp.Header.Get("alipay-timestamp")
	nonce := resp.Header.Get("alipay-nonce")
	sign := resp.Header.Get("alipay-signature")

	content := timestamp + "\n" +
		nonce + "\n" +
		string(body) + "\n"

	publicKey := a.client.cfg.PublicKey

	return verifyWithRSA(content, sign, publicKey)
}
