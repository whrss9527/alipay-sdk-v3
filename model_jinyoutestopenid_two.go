/*
支付宝开放平台API

支付宝开放平台v3协议文档

API version: 2024-07-05
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the JinyoutestopenidTwo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JinyoutestopenidTwo{}

// JinyoutestopenidTwo struct for JinyoutestopenidTwo
type JinyoutestopenidTwo struct {
	// 无openid,有枚举值，有注意事项
	A *string `json:"a,omitempty"`
	// 有openid，无枚举值，无注意事项
	B *string `json:"b,omitempty"`
	// 有openid，无枚举值，无注意事项,openid有注意事项
	BOpenId *string `json:"b_open_id,omitempty"`
	F *JinyoutestopenidOne `json:"f,omitempty"`
}

// NewJinyoutestopenidTwo instantiates a new JinyoutestopenidTwo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJinyoutestopenidTwo() *JinyoutestopenidTwo {
	this := JinyoutestopenidTwo{}
	return &this
}

// NewJinyoutestopenidTwoWithDefaults instantiates a new JinyoutestopenidTwo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJinyoutestopenidTwoWithDefaults() *JinyoutestopenidTwo {
	this := JinyoutestopenidTwo{}
	return &this
}

// GetA returns the A field value if set, zero value otherwise.
func (o *JinyoutestopenidTwo) GetA() string {
	if o == nil || IsNil(o.A) {
		var ret string
		return ret
	}
	return *o.A
}

// GetAOk returns a tuple with the A field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JinyoutestopenidTwo) GetAOk() (*string, bool) {
	if o == nil || IsNil(o.A) {
		return nil, false
	}
	return o.A, true
}

// HasA returns a boolean if a field has been set.
func (o *JinyoutestopenidTwo) HasA() bool {
	if o != nil && !IsNil(o.A) {
		return true
	}

	return false
}

// SetA gets a reference to the given string and assigns it to the A field.
func (o *JinyoutestopenidTwo) SetA(v string) {
	o.A = &v
}

// GetB returns the B field value if set, zero value otherwise.
func (o *JinyoutestopenidTwo) GetB() string {
	if o == nil || IsNil(o.B) {
		var ret string
		return ret
	}
	return *o.B
}

// GetBOk returns a tuple with the B field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JinyoutestopenidTwo) GetBOk() (*string, bool) {
	if o == nil || IsNil(o.B) {
		return nil, false
	}
	return o.B, true
}

// HasB returns a boolean if a field has been set.
func (o *JinyoutestopenidTwo) HasB() bool {
	if o != nil && !IsNil(o.B) {
		return true
	}

	return false
}

// SetB gets a reference to the given string and assigns it to the B field.
func (o *JinyoutestopenidTwo) SetB(v string) {
	o.B = &v
}

// GetBOpenId returns the BOpenId field value if set, zero value otherwise.
func (o *JinyoutestopenidTwo) GetBOpenId() string {
	if o == nil || IsNil(o.BOpenId) {
		var ret string
		return ret
	}
	return *o.BOpenId
}

// GetBOpenIdOk returns a tuple with the BOpenId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JinyoutestopenidTwo) GetBOpenIdOk() (*string, bool) {
	if o == nil || IsNil(o.BOpenId) {
		return nil, false
	}
	return o.BOpenId, true
}

// HasBOpenId returns a boolean if a field has been set.
func (o *JinyoutestopenidTwo) HasBOpenId() bool {
	if o != nil && !IsNil(o.BOpenId) {
		return true
	}

	return false
}

// SetBOpenId gets a reference to the given string and assigns it to the BOpenId field.
func (o *JinyoutestopenidTwo) SetBOpenId(v string) {
	o.BOpenId = &v
}

// GetF returns the F field value if set, zero value otherwise.
func (o *JinyoutestopenidTwo) GetF() JinyoutestopenidOne {
	if o == nil || IsNil(o.F) {
		var ret JinyoutestopenidOne
		return ret
	}
	return *o.F
}

// GetFOk returns a tuple with the F field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JinyoutestopenidTwo) GetFOk() (*JinyoutestopenidOne, bool) {
	if o == nil || IsNil(o.F) {
		return nil, false
	}
	return o.F, true
}

// HasF returns a boolean if a field has been set.
func (o *JinyoutestopenidTwo) HasF() bool {
	if o != nil && !IsNil(o.F) {
		return true
	}

	return false
}

// SetF gets a reference to the given JinyoutestopenidOne and assigns it to the F field.
func (o *JinyoutestopenidTwo) SetF(v JinyoutestopenidOne) {
	o.F = &v
}

func (o JinyoutestopenidTwo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JinyoutestopenidTwo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.A) {
		toSerialize["a"] = o.A
	}
	if !IsNil(o.B) {
		toSerialize["b"] = o.B
	}
	if !IsNil(o.BOpenId) {
		toSerialize["b_open_id"] = o.BOpenId
	}
	if !IsNil(o.F) {
		toSerialize["f"] = o.F
	}
	return toSerialize, nil
}

type NullableJinyoutestopenidTwo struct {
	value *JinyoutestopenidTwo
	isSet bool
}

func (v NullableJinyoutestopenidTwo) Get() *JinyoutestopenidTwo {
	return v.value
}

func (v *NullableJinyoutestopenidTwo) Set(val *JinyoutestopenidTwo) {
	v.value = val
	v.isSet = true
}

func (v NullableJinyoutestopenidTwo) IsSet() bool {
	return v.isSet
}

func (v *NullableJinyoutestopenidTwo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJinyoutestopenidTwo(val *JinyoutestopenidTwo) *NullableJinyoutestopenidTwo {
	return &NullableJinyoutestopenidTwo{value: val, isSet: true}
}

func (v NullableJinyoutestopenidTwo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJinyoutestopenidTwo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


