/*
支付宝开放平台API

支付宝开放平台v3协议文档

API version: 2024-07-05
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alipay

import (
	"encoding/json"
)

// checks if the Topic type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Topic{}

// Topic struct for Topic
type Topic struct {
	// 营销位图片url
	ImgUrl *string `json:"img_url,omitempty"`
	// 跳转类型，网页:HTTP、小程序:APP
	LinkType *string `json:"link_type,omitempty"`
	// 营销位跳转地址，点击营销位头图跳到的链接url。
	LinkUrl *string `json:"link_url,omitempty"`
	// 营销位描述
	SubTitle *string `json:"sub_title,omitempty"`
	// 营销位名称
	Title *string `json:"title,omitempty"`
	// 营销位id
	TopicId *string `json:"topic_id,omitempty"`
	// 营销位内容列表
	TopicItems []TopicItem `json:"topic_items,omitempty"`
}

// NewTopic instantiates a new Topic object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTopic() *Topic {
	this := Topic{}
	return &this
}

// NewTopicWithDefaults instantiates a new Topic object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTopicWithDefaults() *Topic {
	this := Topic{}
	return &this
}

// GetImgUrl returns the ImgUrl field value if set, zero value otherwise.
func (o *Topic) GetImgUrl() string {
	if o == nil || IsNil(o.ImgUrl) {
		var ret string
		return ret
	}
	return *o.ImgUrl
}

// GetImgUrlOk returns a tuple with the ImgUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Topic) GetImgUrlOk() (*string, bool) {
	if o == nil || IsNil(o.ImgUrl) {
		return nil, false
	}
	return o.ImgUrl, true
}

// HasImgUrl returns a boolean if a field has been set.
func (o *Topic) HasImgUrl() bool {
	if o != nil && !IsNil(o.ImgUrl) {
		return true
	}

	return false
}

// SetImgUrl gets a reference to the given string and assigns it to the ImgUrl field.
func (o *Topic) SetImgUrl(v string) {
	o.ImgUrl = &v
}

// GetLinkType returns the LinkType field value if set, zero value otherwise.
func (o *Topic) GetLinkType() string {
	if o == nil || IsNil(o.LinkType) {
		var ret string
		return ret
	}
	return *o.LinkType
}

// GetLinkTypeOk returns a tuple with the LinkType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Topic) GetLinkTypeOk() (*string, bool) {
	if o == nil || IsNil(o.LinkType) {
		return nil, false
	}
	return o.LinkType, true
}

// HasLinkType returns a boolean if a field has been set.
func (o *Topic) HasLinkType() bool {
	if o != nil && !IsNil(o.LinkType) {
		return true
	}

	return false
}

// SetLinkType gets a reference to the given string and assigns it to the LinkType field.
func (o *Topic) SetLinkType(v string) {
	o.LinkType = &v
}

// GetLinkUrl returns the LinkUrl field value if set, zero value otherwise.
func (o *Topic) GetLinkUrl() string {
	if o == nil || IsNil(o.LinkUrl) {
		var ret string
		return ret
	}
	return *o.LinkUrl
}

// GetLinkUrlOk returns a tuple with the LinkUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Topic) GetLinkUrlOk() (*string, bool) {
	if o == nil || IsNil(o.LinkUrl) {
		return nil, false
	}
	return o.LinkUrl, true
}

// HasLinkUrl returns a boolean if a field has been set.
func (o *Topic) HasLinkUrl() bool {
	if o != nil && !IsNil(o.LinkUrl) {
		return true
	}

	return false
}

// SetLinkUrl gets a reference to the given string and assigns it to the LinkUrl field.
func (o *Topic) SetLinkUrl(v string) {
	o.LinkUrl = &v
}

// GetSubTitle returns the SubTitle field value if set, zero value otherwise.
func (o *Topic) GetSubTitle() string {
	if o == nil || IsNil(o.SubTitle) {
		var ret string
		return ret
	}
	return *o.SubTitle
}

// GetSubTitleOk returns a tuple with the SubTitle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Topic) GetSubTitleOk() (*string, bool) {
	if o == nil || IsNil(o.SubTitle) {
		return nil, false
	}
	return o.SubTitle, true
}

// HasSubTitle returns a boolean if a field has been set.
func (o *Topic) HasSubTitle() bool {
	if o != nil && !IsNil(o.SubTitle) {
		return true
	}

	return false
}

// SetSubTitle gets a reference to the given string and assigns it to the SubTitle field.
func (o *Topic) SetSubTitle(v string) {
	o.SubTitle = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *Topic) GetTitle() string {
	if o == nil || IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Topic) GetTitleOk() (*string, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *Topic) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *Topic) SetTitle(v string) {
	o.Title = &v
}

// GetTopicId returns the TopicId field value if set, zero value otherwise.
func (o *Topic) GetTopicId() string {
	if o == nil || IsNil(o.TopicId) {
		var ret string
		return ret
	}
	return *o.TopicId
}

// GetTopicIdOk returns a tuple with the TopicId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Topic) GetTopicIdOk() (*string, bool) {
	if o == nil || IsNil(o.TopicId) {
		return nil, false
	}
	return o.TopicId, true
}

// HasTopicId returns a boolean if a field has been set.
func (o *Topic) HasTopicId() bool {
	if o != nil && !IsNil(o.TopicId) {
		return true
	}

	return false
}

// SetTopicId gets a reference to the given string and assigns it to the TopicId field.
func (o *Topic) SetTopicId(v string) {
	o.TopicId = &v
}

// GetTopicItems returns the TopicItems field value if set, zero value otherwise.
func (o *Topic) GetTopicItems() []TopicItem {
	if o == nil || IsNil(o.TopicItems) {
		var ret []TopicItem
		return ret
	}
	return o.TopicItems
}

// GetTopicItemsOk returns a tuple with the TopicItems field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Topic) GetTopicItemsOk() ([]TopicItem, bool) {
	if o == nil || IsNil(o.TopicItems) {
		return nil, false
	}
	return o.TopicItems, true
}

// HasTopicItems returns a boolean if a field has been set.
func (o *Topic) HasTopicItems() bool {
	if o != nil && !IsNil(o.TopicItems) {
		return true
	}

	return false
}

// SetTopicItems gets a reference to the given []TopicItem and assigns it to the TopicItems field.
func (o *Topic) SetTopicItems(v []TopicItem) {
	o.TopicItems = v
}

func (o Topic) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Topic) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ImgUrl) {
		toSerialize["img_url"] = o.ImgUrl
	}
	if !IsNil(o.LinkType) {
		toSerialize["link_type"] = o.LinkType
	}
	if !IsNil(o.LinkUrl) {
		toSerialize["link_url"] = o.LinkUrl
	}
	if !IsNil(o.SubTitle) {
		toSerialize["sub_title"] = o.SubTitle
	}
	if !IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	if !IsNil(o.TopicId) {
		toSerialize["topic_id"] = o.TopicId
	}
	if !IsNil(o.TopicItems) {
		toSerialize["topic_items"] = o.TopicItems
	}
	return toSerialize, nil
}

type NullableTopic struct {
	value *Topic
	isSet bool
}

func (v NullableTopic) Get() *Topic {
	return v.value
}

func (v *NullableTopic) Set(val *Topic) {
	v.value = val
	v.isSet = true
}

func (v NullableTopic) IsSet() bool {
	return v.isSet
}

func (v *NullableTopic) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTopic(val *Topic) *NullableTopic {
	return &NullableTopic{value: val, isSet: true}
}

func (v NullableTopic) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTopic) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
