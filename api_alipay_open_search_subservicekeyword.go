/*
支付宝开放平台API

支付宝开放平台v3协议文档

API version: 2024-07-05
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alipay

import (
	"bytes"
	"context"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strconv"
	"time"
)

// AlipayOpenSearchSubservicekeywordAPIService AlipayOpenSearchSubservicekeywordAPI service
type AlipayOpenSearchSubservicekeywordAPIService service

type ApiAlipayOpenSearchSubservicekeywordApplyRequest struct {
	ctx                                         context.Context
	ApiService                                  *AlipayOpenSearchSubservicekeywordAPIService
	alipayOpenSearchSubservicekeywordApplyModel *AlipayOpenSearchSubservicekeywordApplyModel
}

func (r ApiAlipayOpenSearchSubservicekeywordApplyRequest) AlipayOpenSearchSubservicekeywordApplyModel(alipayOpenSearchSubservicekeywordApplyModel AlipayOpenSearchSubservicekeywordApplyModel) ApiAlipayOpenSearchSubservicekeywordApplyRequest {
	r.alipayOpenSearchSubservicekeywordApplyModel = &alipayOpenSearchSubservicekeywordApplyModel
	return r
}

func (r ApiAlipayOpenSearchSubservicekeywordApplyRequest) Execute() (*AlipayOpenSearchSubservicekeywordApplyResponseModel, *http.Response, error) {
	return r.ApiService.AlipayOpenSearchSubservicekeywordApplyExecute(r)
}

/*
AlipayOpenSearchSubservicekeywordApply 提报服务关键词

小程序-服务推广-提报服务关键词

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiAlipayOpenSearchSubservicekeywordApplyRequest
*/
func (r *AlipayOpenSearchSubservicekeywordAPIService) AlipayOpenSearchSubservicekeywordApply(ctx context.Context) ApiAlipayOpenSearchSubservicekeywordApplyRequest {
	return ApiAlipayOpenSearchSubservicekeywordApplyRequest{
		ApiService: r,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return AlipayOpenSearchSubservicekeywordApplyResponseModel
func (a *AlipayOpenSearchSubservicekeywordAPIService) AlipayOpenSearchSubservicekeywordApplyExecute(r ApiAlipayOpenSearchSubservicekeywordApplyRequest) (*AlipayOpenSearchSubservicekeywordApplyResponseModel, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *AlipayOpenSearchSubservicekeywordApplyResponseModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AlipayOpenSearchSubservicekeywordAPIService.AlipayOpenSearchSubservicekeywordApply")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/alipay/open/search/subservicekeyword/apply"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.alipayOpenSearchSubservicekeywordApplyModel

	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	// Add signing logic
	err = a.signRequest(req)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	// Add verification logic
	err = a.verifyResponse(localVarHTTPResponse, localVarBody)
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v AlipayOpenSearchSubservicekeywordApplyDefaultResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAlipayOpenSearchSubservicekeywordBatchqueryRequest struct {
	ctx         context.Context
	ApiService  *AlipayOpenSearchSubservicekeywordAPIService
	targetAppid *string
	status      *string
	pageNumber  *int32
	pageSize    *int32
}

// 小程序id
func (r ApiAlipayOpenSearchSubservicekeywordBatchqueryRequest) TargetAppid(targetAppid string) ApiAlipayOpenSearchSubservicekeywordBatchqueryRequest {
	r.targetAppid = &targetAppid
	return r
}

// 审核状态，服务关键词的审核状态，枚举值，不传该字段表示查询所有状态
func (r ApiAlipayOpenSearchSubservicekeywordBatchqueryRequest) Status(status string) ApiAlipayOpenSearchSubservicekeywordBatchqueryRequest {
	r.status = &status
	return r
}

// 分页参数，分页查询时使用
func (r ApiAlipayOpenSearchSubservicekeywordBatchqueryRequest) PageNumber(pageNumber int32) ApiAlipayOpenSearchSubservicekeywordBatchqueryRequest {
	r.pageNumber = &pageNumber
	return r
}

// 分页参数，分页查询时使用
func (r ApiAlipayOpenSearchSubservicekeywordBatchqueryRequest) PageSize(pageSize int32) ApiAlipayOpenSearchSubservicekeywordBatchqueryRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiAlipayOpenSearchSubservicekeywordBatchqueryRequest) Execute() (*AlipayOpenSearchSubservicekeywordBatchqueryResponseModel, *http.Response, error) {
	return r.ApiService.AlipayOpenSearchSubservicekeywordBatchqueryExecute(r)
}

/*
AlipayOpenSearchSubservicekeywordBatchquery 服务关键词批量查询接口

批量查询小程序的服务关键词

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiAlipayOpenSearchSubservicekeywordBatchqueryRequest
*/
func (r *AlipayOpenSearchSubservicekeywordAPIService) AlipayOpenSearchSubservicekeywordBatchquery(ctx context.Context) ApiAlipayOpenSearchSubservicekeywordBatchqueryRequest {
	return ApiAlipayOpenSearchSubservicekeywordBatchqueryRequest{
		ApiService: r,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return AlipayOpenSearchSubservicekeywordBatchqueryResponseModel
func (a *AlipayOpenSearchSubservicekeywordAPIService) AlipayOpenSearchSubservicekeywordBatchqueryExecute(r ApiAlipayOpenSearchSubservicekeywordBatchqueryRequest) (*AlipayOpenSearchSubservicekeywordBatchqueryResponseModel, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *AlipayOpenSearchSubservicekeywordBatchqueryResponseModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AlipayOpenSearchSubservicekeywordAPIService.AlipayOpenSearchSubservicekeywordBatchquery")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/alipay/open/search/subservicekeyword/batchquery"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.targetAppid != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "target_appid", r.targetAppid, "form", "")
	}
	if r.status != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "status", r.status, "form", "")
	}
	if r.pageNumber != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page_number", r.pageNumber, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page_size", r.pageSize, "form", "")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	// Add signing logic
	err = a.signRequest(req)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	// Add verification logic
	err = a.verifyResponse(localVarHTTPResponse, localVarBody)
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v AlipayOpenSearchSubservicekeywordBatchqueryDefaultResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAlipayOpenSearchSubservicekeywordDeleteRequest struct {
	ctx                                          context.Context
	ApiService                                   *AlipayOpenSearchSubservicekeywordAPIService
	alipayOpenSearchSubservicekeywordDeleteModel *AlipayOpenSearchSubservicekeywordDeleteModel
}

func (r ApiAlipayOpenSearchSubservicekeywordDeleteRequest) AlipayOpenSearchSubservicekeywordDeleteModel(alipayOpenSearchSubservicekeywordDeleteModel AlipayOpenSearchSubservicekeywordDeleteModel) ApiAlipayOpenSearchSubservicekeywordDeleteRequest {
	r.alipayOpenSearchSubservicekeywordDeleteModel = &alipayOpenSearchSubservicekeywordDeleteModel
	return r
}

func (r ApiAlipayOpenSearchSubservicekeywordDeleteRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.AlipayOpenSearchSubservicekeywordDeleteExecute(r)
}

/*
AlipayOpenSearchSubservicekeywordDelete 删除服务关键词

删除服务关键词

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiAlipayOpenSearchSubservicekeywordDeleteRequest
*/
func (r *AlipayOpenSearchSubservicekeywordAPIService) AlipayOpenSearchSubservicekeywordDelete(ctx context.Context) ApiAlipayOpenSearchSubservicekeywordDeleteRequest {
	return ApiAlipayOpenSearchSubservicekeywordDeleteRequest{
		ApiService: r,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return map[string]interface{}
func (a *AlipayOpenSearchSubservicekeywordAPIService) AlipayOpenSearchSubservicekeywordDeleteExecute(r ApiAlipayOpenSearchSubservicekeywordDeleteRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AlipayOpenSearchSubservicekeywordAPIService.AlipayOpenSearchSubservicekeywordDelete")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/alipay/open/search/subservicekeyword/delete"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.alipayOpenSearchSubservicekeywordDeleteModel

	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	// Add signing logic
	err = a.signRequest(req)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	// Add verification logic
	err = a.verifyResponse(localVarHTTPResponse, localVarBody)
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v AlipayOpenSearchSubservicekeywordDeleteDefaultResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAlipayOpenSearchSubservicekeywordQuerystatusRequest struct {
	ctx         context.Context
	ApiService  *AlipayOpenSearchSubservicekeywordAPIService
	targetAppid *string
	applyNo     *string
}

// 小程序id
func (r ApiAlipayOpenSearchSubservicekeywordQuerystatusRequest) TargetAppid(targetAppid string) ApiAlipayOpenSearchSubservicekeywordQuerystatusRequest {
	r.targetAppid = &targetAppid
	return r
}

// 审核工单id，提报接口的返回值
func (r ApiAlipayOpenSearchSubservicekeywordQuerystatusRequest) ApplyNo(applyNo string) ApiAlipayOpenSearchSubservicekeywordQuerystatusRequest {
	r.applyNo = &applyNo
	return r
}

func (r ApiAlipayOpenSearchSubservicekeywordQuerystatusRequest) Execute() (*AlipayOpenSearchSubservicekeywordQuerystatusResponseModel, *http.Response, error) {
	return r.ApiService.AlipayOpenSearchSubservicekeywordQuerystatusExecute(r)
}

/*
AlipayOpenSearchSubservicekeywordQuerystatus 查询小程序服务关键词的审核工单的状态

查询小程序服务关键词的审核工单的状态

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiAlipayOpenSearchSubservicekeywordQuerystatusRequest
*/
func (r *AlipayOpenSearchSubservicekeywordAPIService) AlipayOpenSearchSubservicekeywordQuerystatus(ctx context.Context) ApiAlipayOpenSearchSubservicekeywordQuerystatusRequest {
	return ApiAlipayOpenSearchSubservicekeywordQuerystatusRequest{
		ApiService: r,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return AlipayOpenSearchSubservicekeywordQuerystatusResponseModel
func (a *AlipayOpenSearchSubservicekeywordAPIService) AlipayOpenSearchSubservicekeywordQuerystatusExecute(r ApiAlipayOpenSearchSubservicekeywordQuerystatusRequest) (*AlipayOpenSearchSubservicekeywordQuerystatusResponseModel, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *AlipayOpenSearchSubservicekeywordQuerystatusResponseModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AlipayOpenSearchSubservicekeywordAPIService.AlipayOpenSearchSubservicekeywordQuerystatus")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/alipay/open/search/subservicekeyword/querystatus"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.targetAppid != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "target_appid", r.targetAppid, "form", "")
	}
	if r.applyNo != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "apply_no", r.applyNo, "form", "")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	// Add signing logic
	err = a.signRequest(req)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	// Add verification logic
	err = a.verifyResponse(localVarHTTPResponse, localVarBody)
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v AlipayOpenSearchSubservicekeywordQuerystatusDefaultResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

func (a *AlipayOpenSearchSubservicekeywordAPIService) signRequest(req *http.Request) error {
	appID := a.client.cfg.AppID
	appCertSN := a.client.cfg.AppCertSN
	privateKey := a.client.cfg.PrivateKey

	nonce := generateUUID()
	timestamp := strconv.FormatInt(time.Now().UnixNano()/1e6, 10)

	authString := fmt.Sprintf("app_id=%s", appID)
	if appCertSN != "" {
		authString += fmt.Sprintf(",app_cert_sn=%s", appCertSN)
	}
	authString += fmt.Sprintf(",nonce=%s,timestamp=%s", nonce, timestamp)

	httpMethod := req.Method
	httpRequestUri := req.URL.Path
	if req.URL.RawQuery != "" {
		httpRequestUri += "?" + req.URL.RawQuery
	}

	var httpRequestBody string
	if req.Body != nil {
		bodyBytes, err := io.ReadAll(req.Body)
		if err != nil {
			return err
		}
		httpRequestBody = string(bodyBytes)
		req.Body = io.NopCloser(bytes.NewBuffer(bodyBytes))
	}

	content := authString + "\n" +
		httpMethod + "\n" +
		httpRequestUri + "\n" +
		httpRequestBody + "\n"

	if appAuthToken := req.Header.Get("alipay-app-auth-token"); appAuthToken != "" {
		content += appAuthToken + "\n"
	}

	signature, err := signWithRSA(content, privateKey)
	if err != nil {
		return err
	}

	req.Header.Set("Authorization", fmt.Sprintf("ALIPAY-SHA256withRSA %s,sign=%s", authString, signature))
	return nil
}

func (a *AlipayOpenSearchSubservicekeywordAPIService) verifyResponse(resp *http.Response, body []byte) error {
	timestamp := resp.Header.Get("alipay-timestamp")
	nonce := resp.Header.Get("alipay-nonce")
	sign := resp.Header.Get("alipay-signature")

	content := timestamp + "\n" +
		nonce + "\n" +
		string(body) + "\n"

	publicKey := a.client.cfg.PublicKey

	return verifyWithRSA(content, sign, publicKey)
}
