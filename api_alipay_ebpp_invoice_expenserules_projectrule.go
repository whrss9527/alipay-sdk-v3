/*
支付宝开放平台API

支付宝开放平台v3协议文档

API version: 2024-07-05
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alipay

import (
	"bytes"
	"context"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strconv"
	"time"
)

// AlipayEbppInvoiceExpenserulesProjectruleAPIService AlipayEbppInvoiceExpenserulesProjectruleAPI service
type AlipayEbppInvoiceExpenserulesProjectruleAPIService service

type ApiAlipayEbppInvoiceExpenserulesProjectruleCreateRequest struct {
	ctx                                                 context.Context
	ApiService                                          *AlipayEbppInvoiceExpenserulesProjectruleAPIService
	alipayEbppInvoiceExpenserulesProjectruleCreateModel *AlipayEbppInvoiceExpenserulesProjectruleCreateModel
}

func (r ApiAlipayEbppInvoiceExpenserulesProjectruleCreateRequest) AlipayEbppInvoiceExpenserulesProjectruleCreateModel(alipayEbppInvoiceExpenserulesProjectruleCreateModel AlipayEbppInvoiceExpenserulesProjectruleCreateModel) ApiAlipayEbppInvoiceExpenserulesProjectruleCreateRequest {
	r.alipayEbppInvoiceExpenserulesProjectruleCreateModel = &alipayEbppInvoiceExpenserulesProjectruleCreateModel
	return r
}

func (r ApiAlipayEbppInvoiceExpenserulesProjectruleCreateRequest) Execute() (*AlipayEbppInvoiceExpenserulesProjectruleCreateResponseModel, *http.Response, error) {
	return r.ApiService.AlipayEbppInvoiceExpenserulesProjectruleCreateExecute(r)
}

/*
AlipayEbppInvoiceExpenserulesProjectruleCreate 创建项目费控规则

创建项目费控规则

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiAlipayEbppInvoiceExpenserulesProjectruleCreateRequest
*/
func (r *AlipayEbppInvoiceExpenserulesProjectruleAPIService) AlipayEbppInvoiceExpenserulesProjectruleCreate(ctx context.Context) ApiAlipayEbppInvoiceExpenserulesProjectruleCreateRequest {
	return ApiAlipayEbppInvoiceExpenserulesProjectruleCreateRequest{
		ApiService: r,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return AlipayEbppInvoiceExpenserulesProjectruleCreateResponseModel
func (a *AlipayEbppInvoiceExpenserulesProjectruleAPIService) AlipayEbppInvoiceExpenserulesProjectruleCreateExecute(r ApiAlipayEbppInvoiceExpenserulesProjectruleCreateRequest) (*AlipayEbppInvoiceExpenserulesProjectruleCreateResponseModel, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *AlipayEbppInvoiceExpenserulesProjectruleCreateResponseModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AlipayEbppInvoiceExpenserulesProjectruleAPIService.AlipayEbppInvoiceExpenserulesProjectruleCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/alipay/ebpp/invoice/expenserules/projectrule/create"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.alipayEbppInvoiceExpenserulesProjectruleCreateModel

	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	// Add signing logic
	err = a.signRequest(req)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	// Add verification logic
	err = a.verifyResponse(localVarHTTPResponse, localVarBody)
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v AlipayEbppInvoiceExpenserulesProjectruleCreateDefaultResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAlipayEbppInvoiceExpenserulesProjectruleQueryRequest struct {
	ctx            context.Context
	ApiService     *AlipayEbppInvoiceExpenserulesProjectruleAPIService
	accountId      *string
	agreementNo    *string
	projectId      *string
	employeeId     *string
	employeeOpenId *string
	pageNum        *int32
	pageSize       *int32
}

// 共同账号ID
func (r ApiAlipayEbppInvoiceExpenserulesProjectruleQueryRequest) AccountId(accountId string) ApiAlipayEbppInvoiceExpenserulesProjectruleQueryRequest {
	r.accountId = &accountId
	return r
}

// 授权签约协议号
func (r ApiAlipayEbppInvoiceExpenserulesProjectruleQueryRequest) AgreementNo(agreementNo string) ApiAlipayEbppInvoiceExpenserulesProjectruleQueryRequest {
	r.agreementNo = &agreementNo
	return r
}

// 项目id（可空）
func (r ApiAlipayEbppInvoiceExpenserulesProjectruleQueryRequest) ProjectId(projectId string) ApiAlipayEbppInvoiceExpenserulesProjectruleQueryRequest {
	r.projectId = &projectId
	return r
}

// 员工UID（可空）
func (r ApiAlipayEbppInvoiceExpenserulesProjectruleQueryRequest) EmployeeId(employeeId string) ApiAlipayEbppInvoiceExpenserulesProjectruleQueryRequest {
	r.employeeId = &employeeId
	return r
}

// 切换open_id后请使用：员工open_id（可空）
func (r ApiAlipayEbppInvoiceExpenserulesProjectruleQueryRequest) EmployeeOpenId(employeeOpenId string) ApiAlipayEbppInvoiceExpenserulesProjectruleQueryRequest {
	r.employeeOpenId = &employeeOpenId
	return r
}

// 页数
func (r ApiAlipayEbppInvoiceExpenserulesProjectruleQueryRequest) PageNum(pageNum int32) ApiAlipayEbppInvoiceExpenserulesProjectruleQueryRequest {
	r.pageNum = &pageNum
	return r
}

// 页大小
func (r ApiAlipayEbppInvoiceExpenserulesProjectruleQueryRequest) PageSize(pageSize int32) ApiAlipayEbppInvoiceExpenserulesProjectruleQueryRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiAlipayEbppInvoiceExpenserulesProjectruleQueryRequest) Execute() (*AlipayEbppInvoiceExpenserulesProjectruleQueryResponseModel, *http.Response, error) {
	return r.ApiService.AlipayEbppInvoiceExpenserulesProjectruleQueryExecute(r)
}

/*
AlipayEbppInvoiceExpenserulesProjectruleQuery 查询项目费控规则

查询项目费控规则

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiAlipayEbppInvoiceExpenserulesProjectruleQueryRequest
*/
func (r *AlipayEbppInvoiceExpenserulesProjectruleAPIService) AlipayEbppInvoiceExpenserulesProjectruleQuery(ctx context.Context) ApiAlipayEbppInvoiceExpenserulesProjectruleQueryRequest {
	return ApiAlipayEbppInvoiceExpenserulesProjectruleQueryRequest{
		ApiService: r,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return AlipayEbppInvoiceExpenserulesProjectruleQueryResponseModel
func (a *AlipayEbppInvoiceExpenserulesProjectruleAPIService) AlipayEbppInvoiceExpenserulesProjectruleQueryExecute(r ApiAlipayEbppInvoiceExpenserulesProjectruleQueryRequest) (*AlipayEbppInvoiceExpenserulesProjectruleQueryResponseModel, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *AlipayEbppInvoiceExpenserulesProjectruleQueryResponseModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AlipayEbppInvoiceExpenserulesProjectruleAPIService.AlipayEbppInvoiceExpenserulesProjectruleQuery")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/alipay/ebpp/invoice/expenserules/projectrule/query"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.accountId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "account_id", r.accountId, "form", "")
	}
	if r.agreementNo != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "agreement_no", r.agreementNo, "form", "")
	}
	if r.projectId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "project_id", r.projectId, "form", "")
	}
	if r.employeeId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "employee_id", r.employeeId, "form", "")
	}
	if r.employeeOpenId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "employee_open_id", r.employeeOpenId, "form", "")
	}
	if r.pageNum != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page_num", r.pageNum, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page_size", r.pageSize, "form", "")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	// Add signing logic
	err = a.signRequest(req)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	// Add verification logic
	err = a.verifyResponse(localVarHTTPResponse, localVarBody)
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v AlipayEbppInvoiceExpenserulesProjectruleQueryDefaultResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

func (a *AlipayEbppInvoiceExpenserulesProjectruleAPIService) signRequest(req *http.Request) error {
	appID := a.client.cfg.AppID
	appCertSN := a.client.cfg.AppCertSN
	privateKey := a.client.cfg.PrivateKey

	nonce := generateUUID()
	timestamp := strconv.FormatInt(time.Now().UnixNano()/1e6, 10)

	authString := fmt.Sprintf("app_id=%s", appID)
	if appCertSN != "" {
		authString += fmt.Sprintf(",app_cert_sn=%s", appCertSN)
	}
	authString += fmt.Sprintf(",nonce=%s,timestamp=%s", nonce, timestamp)

	httpMethod := req.Method
	httpRequestUri := req.URL.Path
	if req.URL.RawQuery != "" {
		httpRequestUri += "?" + req.URL.RawQuery
	}

	var httpRequestBody string
	if req.Body != nil {
		bodyBytes, err := io.ReadAll(req.Body)
		if err != nil {
			return err
		}
		httpRequestBody = string(bodyBytes)
		req.Body = io.NopCloser(bytes.NewBuffer(bodyBytes))
	}

	content := authString + "\n" +
		httpMethod + "\n" +
		httpRequestUri + "\n" +
		httpRequestBody + "\n"

	if appAuthToken := req.Header.Get("alipay-app-auth-token"); appAuthToken != "" {
		content += appAuthToken + "\n"
	}

	signature, err := signWithRSA(content, privateKey)
	if err != nil {
		return err
	}

	req.Header.Set("Authorization", fmt.Sprintf("ALIPAY-SHA256withRSA %s,sign=%s", authString, signature))
	return nil
}

func (a *AlipayEbppInvoiceExpenserulesProjectruleAPIService) verifyResponse(resp *http.Response, body []byte) error {
	timestamp := resp.Header.Get("alipay-timestamp")
	nonce := resp.Header.Get("alipay-nonce")
	sign := resp.Header.Get("alipay-signature")

	content := timestamp + "\n" +
		nonce + "\n" +
		string(body) + "\n"

	publicKey := a.client.cfg.PublicKey

	return verifyWithRSA(content, sign, publicKey)
}
