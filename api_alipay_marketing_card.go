/*
支付宝开放平台API

支付宝开放平台v3协议文档

API version: 2024-07-05
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alipay

import (
	"bytes"
	"context"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strconv"
	"time"
)

// AlipayMarketingCardAPIService AlipayMarketingCardAPI service
type AlipayMarketingCardAPIService service

type ApiAlipayMarketingCardDeleteRequest struct {
	ctx              context.Context
	ApiService       *AlipayMarketingCardAPIService
	outSerialNo      *string
	targetCardNo     *string
	targetCardNoType *string
	reasonCode       *string
	extInfo          *string
}

// 商户端删卡业务流水号，商户自定义且需确保流水号唯一性。
func (r ApiAlipayMarketingCardDeleteRequest) OutSerialNo(outSerialNo string) ApiAlipayMarketingCardDeleteRequest {
	r.outSerialNo = &outSerialNo
	return r
}

// 支付宝业务卡号。即开卡接口返回结果中的card_info.biz_card_no。
func (r ApiAlipayMarketingCardDeleteRequest) TargetCardNo(targetCardNo string) ApiAlipayMarketingCardDeleteRequest {
	r.targetCardNo = &targetCardNo
	return r
}

// 卡号ID类型
func (r ApiAlipayMarketingCardDeleteRequest) TargetCardNoType(targetCardNoType string) ApiAlipayMarketingCardDeleteRequest {
	r.targetCardNoType = &targetCardNoType
	return r
}

// 删卡原因  USER_UNBUND：用户解绑（可以重新绑定）  CANCEL：销户（完成销户后，就不能再重新绑定）  PRESENT：转赠（可以重新绑定）
func (r ApiAlipayMarketingCardDeleteRequest) ReasonCode(reasonCode string) ApiAlipayMarketingCardDeleteRequest {
	r.reasonCode = &reasonCode
	return r
}

// 删卡扩展参数，json格式。  用于商户的特定业务信息的传递，只有商户与支付宝约定了传递此参数且约定了参数含义，此参数才有效。  目前支持如下key：  new_card_no：新卡号  donee_user_id：受赠人userId
func (r ApiAlipayMarketingCardDeleteRequest) ExtInfo(extInfo string) ApiAlipayMarketingCardDeleteRequest {
	r.extInfo = &extInfo
	return r
}

func (r ApiAlipayMarketingCardDeleteRequest) Execute() (*AlipayMarketingCardDeleteResponseModel, *http.Response, error) {
	return r.ApiService.AlipayMarketingCardDeleteExecute(r)
}

/*
AlipayMarketingCardDelete 会员卡删卡

通过 API 接口删除商家会员卡。

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiAlipayMarketingCardDeleteRequest
*/
func (r *AlipayMarketingCardAPIService) AlipayMarketingCardDelete(ctx context.Context) ApiAlipayMarketingCardDeleteRequest {
	return ApiAlipayMarketingCardDeleteRequest{
		ApiService: r,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return AlipayMarketingCardDeleteResponseModel
func (a *AlipayMarketingCardAPIService) AlipayMarketingCardDeleteExecute(r ApiAlipayMarketingCardDeleteRequest) (*AlipayMarketingCardDeleteResponseModel, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodDelete
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *AlipayMarketingCardDeleteResponseModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AlipayMarketingCardAPIService.AlipayMarketingCardDelete")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/alipay/marketing/card/delete"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.outSerialNo != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "out_serial_no", r.outSerialNo, "form", "")
	}
	if r.targetCardNo != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "target_card_no", r.targetCardNo, "form", "")
	}
	if r.targetCardNoType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "target_card_no_type", r.targetCardNoType, "form", "")
	}
	if r.reasonCode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "reason_code", r.reasonCode, "form", "")
	}
	if r.extInfo != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ext_info", r.extInfo, "form", "")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	// Add signing logic
	err = a.signRequest(req)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	// Add verification logic
	err = a.verifyResponse(localVarHTTPResponse, localVarBody)
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v AlipayMarketingCardDeleteDefaultResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAlipayMarketingCardOpenRequest struct {
	ctx                          context.Context
	ApiService                   *AlipayMarketingCardAPIService
	authToken                    *string
	alipayMarketingCardOpenModel *AlipayMarketingCardOpenModel
}

// 用户授权令牌
func (r ApiAlipayMarketingCardOpenRequest) AuthToken(authToken string) ApiAlipayMarketingCardOpenRequest {
	r.authToken = &authToken
	return r
}

func (r ApiAlipayMarketingCardOpenRequest) AlipayMarketingCardOpenModel(alipayMarketingCardOpenModel AlipayMarketingCardOpenModel) ApiAlipayMarketingCardOpenRequest {
	r.alipayMarketingCardOpenModel = &alipayMarketingCardOpenModel
	return r
}

func (r ApiAlipayMarketingCardOpenRequest) Execute() (*AlipayMarketingCardOpenResponseModel, *http.Response, error) {
	return r.ApiService.AlipayMarketingCardOpenExecute(r)
}

/*
AlipayMarketingCardOpen 会员卡开卡

商户通过API接口，进行会员卡开卡。

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiAlipayMarketingCardOpenRequest
*/
func (r *AlipayMarketingCardAPIService) AlipayMarketingCardOpen(ctx context.Context) ApiAlipayMarketingCardOpenRequest {
	return ApiAlipayMarketingCardOpenRequest{
		ApiService: r,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return AlipayMarketingCardOpenResponseModel
func (a *AlipayMarketingCardAPIService) AlipayMarketingCardOpenExecute(r ApiAlipayMarketingCardOpenRequest) (*AlipayMarketingCardOpenResponseModel, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *AlipayMarketingCardOpenResponseModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AlipayMarketingCardAPIService.AlipayMarketingCardOpen")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/alipay/marketing/card/open"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.authToken != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "auth_token", r.authToken, "form", "")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.alipayMarketingCardOpenModel

	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	// Add signing logic
	err = a.signRequest(req)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	// Add verification logic
	err = a.verifyResponse(localVarHTTPResponse, localVarBody)
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v AlipayMarketingCardOpenDefaultResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAlipayMarketingCardQueryRequest struct {
	ctx                           context.Context
	ApiService                    *AlipayMarketingCardAPIService
	alipayMarketingCardQueryModel *AlipayMarketingCardQueryModel
}

func (r ApiAlipayMarketingCardQueryRequest) AlipayMarketingCardQueryModel(alipayMarketingCardQueryModel AlipayMarketingCardQueryModel) ApiAlipayMarketingCardQueryRequest {
	r.alipayMarketingCardQueryModel = &alipayMarketingCardQueryModel
	return r
}

func (r ApiAlipayMarketingCardQueryRequest) Execute() (*AlipayMarketingCardQueryResponseModel, *http.Response, error) {
	return r.ApiService.AlipayMarketingCardQueryExecute(r)
}

/*
AlipayMarketingCardQuery 会员卡查询

根据卡号或者持卡人信息查询会员卡信息

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiAlipayMarketingCardQueryRequest
*/
func (r *AlipayMarketingCardAPIService) AlipayMarketingCardQuery(ctx context.Context) ApiAlipayMarketingCardQueryRequest {
	return ApiAlipayMarketingCardQueryRequest{
		ApiService: r,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return AlipayMarketingCardQueryResponseModel
func (a *AlipayMarketingCardAPIService) AlipayMarketingCardQueryExecute(r ApiAlipayMarketingCardQueryRequest) (*AlipayMarketingCardQueryResponseModel, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *AlipayMarketingCardQueryResponseModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AlipayMarketingCardAPIService.AlipayMarketingCardQuery")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/alipay/marketing/card/query"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.alipayMarketingCardQueryModel

	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	// Add signing logic
	err = a.signRequest(req)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	// Add verification logic
	err = a.verifyResponse(localVarHTTPResponse, localVarBody)
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v AlipayMarketingCardQueryDefaultResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAlipayMarketingCardUpdateRequest struct {
	ctx                            context.Context
	ApiService                     *AlipayMarketingCardAPIService
	alipayMarketingCardUpdateModel *AlipayMarketingCardUpdateModel
}

func (r ApiAlipayMarketingCardUpdateRequest) AlipayMarketingCardUpdateModel(alipayMarketingCardUpdateModel AlipayMarketingCardUpdateModel) ApiAlipayMarketingCardUpdateRequest {
	r.alipayMarketingCardUpdateModel = &alipayMarketingCardUpdateModel
	return r
}

func (r ApiAlipayMarketingCardUpdateRequest) Execute() (*AlipayMarketingCardUpdateResponseModel, *http.Response, error) {
	return r.ApiService.AlipayMarketingCardUpdateExecute(r)
}

/*
AlipayMarketingCardUpdate 会员卡更新

会员卡更新

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiAlipayMarketingCardUpdateRequest
*/
func (r *AlipayMarketingCardAPIService) AlipayMarketingCardUpdate(ctx context.Context) ApiAlipayMarketingCardUpdateRequest {
	return ApiAlipayMarketingCardUpdateRequest{
		ApiService: r,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return AlipayMarketingCardUpdateResponseModel
func (a *AlipayMarketingCardAPIService) AlipayMarketingCardUpdateExecute(r ApiAlipayMarketingCardUpdateRequest) (*AlipayMarketingCardUpdateResponseModel, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *AlipayMarketingCardUpdateResponseModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AlipayMarketingCardAPIService.AlipayMarketingCardUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/alipay/marketing/card/update"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.alipayMarketingCardUpdateModel

	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	// Add signing logic
	err = a.signRequest(req)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	// Add verification logic
	err = a.verifyResponse(localVarHTTPResponse, localVarBody)
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v AlipayMarketingCardUpdateDefaultResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

func (a *AlipayMarketingCardAPIService) signRequest(req *http.Request) error {
	appID := a.client.cfg.AppID
	appCertSN := a.client.cfg.AppCertSN
	privateKey := a.client.cfg.PrivateKey

	nonce := generateUUID()
	timestamp := strconv.FormatInt(time.Now().UnixNano()/1e6, 10)

	authString := fmt.Sprintf("app_id=%s", appID)
	if appCertSN != "" {
		authString += fmt.Sprintf(",app_cert_sn=%s", appCertSN)
	}
	authString += fmt.Sprintf(",nonce=%s,timestamp=%s", nonce, timestamp)

	httpMethod := req.Method
	httpRequestUri := req.URL.Path
	if req.URL.RawQuery != "" {
		httpRequestUri += "?" + req.URL.RawQuery
	}

	var httpRequestBody string
	if req.Body != nil {
		bodyBytes, err := io.ReadAll(req.Body)
		if err != nil {
			return err
		}
		httpRequestBody = string(bodyBytes)
		req.Body = io.NopCloser(bytes.NewBuffer(bodyBytes))
	}

	content := authString + "\n" +
		httpMethod + "\n" +
		httpRequestUri + "\n" +
		httpRequestBody + "\n"

	if appAuthToken := req.Header.Get("alipay-app-auth-token"); appAuthToken != "" {
		content += appAuthToken + "\n"
	}

	signature, err := signWithRSA(content, privateKey)
	if err != nil {
		return err
	}

	req.Header.Set("Authorization", fmt.Sprintf("ALIPAY-SHA256withRSA %s,sign=%s", authString, signature))
	return nil
}

func (a *AlipayMarketingCardAPIService) verifyResponse(resp *http.Response, body []byte) error {
	timestamp := resp.Header.Get("alipay-timestamp")
	nonce := resp.Header.Get("alipay-nonce")
	sign := resp.Header.Get("alipay-signature")

	content := timestamp + "\n" +
		nonce + "\n" +
		string(body) + "\n"

	publicKey := a.client.cfg.PublicKey

	return verifyWithRSA(content, sign, publicKey)
}
