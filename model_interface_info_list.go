/*
支付宝开放平台API

支付宝开放平台v3协议文档

API version: 2024-07-05
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alipay

import (
	"encoding/json"
)

// checks if the InterfaceInfoList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InterfaceInfoList{}

// InterfaceInfoList struct for InterfaceInfoList
type InterfaceInfoList struct {
	// H5传入参数固定值：alipay.eco.mycar.parking.userpage.query;  小程序传入参数固定值：alipay.eco.mycar.parking.isv.homepage;  协议状态变更通知传入参数固定值： alipay.eco.mycar.parking.agreement.notify;
	InterfaceName *string `json:"interface_name,omitempty"`
	// H5、小程序传入参数固定值:interface_page； 通知接口传入参数固定值:interface_service;
	InterfaceType *string `json:"interface_type,omitempty"`
	// H5 SPI接口的调用地址url，协议必须为https，对整个url字符串必须进行UrlEncode编码。编码为UTF-8;  小程序SPI接口的调用地址ur格式：小程序|小程序缴费页面地址;  协议状态变更通知SPI接口的调用地址url，同H5格式;
	InterfaceUrl *string `json:"interface_url,omitempty"`
}

// NewInterfaceInfoList instantiates a new InterfaceInfoList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInterfaceInfoList() *InterfaceInfoList {
	this := InterfaceInfoList{}
	return &this
}

// NewInterfaceInfoListWithDefaults instantiates a new InterfaceInfoList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInterfaceInfoListWithDefaults() *InterfaceInfoList {
	this := InterfaceInfoList{}
	return &this
}

// GetInterfaceName returns the InterfaceName field value if set, zero value otherwise.
func (o *InterfaceInfoList) GetInterfaceName() string {
	if o == nil || IsNil(o.InterfaceName) {
		var ret string
		return ret
	}
	return *o.InterfaceName
}

// GetInterfaceNameOk returns a tuple with the InterfaceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterfaceInfoList) GetInterfaceNameOk() (*string, bool) {
	if o == nil || IsNil(o.InterfaceName) {
		return nil, false
	}
	return o.InterfaceName, true
}

// HasInterfaceName returns a boolean if a field has been set.
func (o *InterfaceInfoList) HasInterfaceName() bool {
	if o != nil && !IsNil(o.InterfaceName) {
		return true
	}

	return false
}

// SetInterfaceName gets a reference to the given string and assigns it to the InterfaceName field.
func (o *InterfaceInfoList) SetInterfaceName(v string) {
	o.InterfaceName = &v
}

// GetInterfaceType returns the InterfaceType field value if set, zero value otherwise.
func (o *InterfaceInfoList) GetInterfaceType() string {
	if o == nil || IsNil(o.InterfaceType) {
		var ret string
		return ret
	}
	return *o.InterfaceType
}

// GetInterfaceTypeOk returns a tuple with the InterfaceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterfaceInfoList) GetInterfaceTypeOk() (*string, bool) {
	if o == nil || IsNil(o.InterfaceType) {
		return nil, false
	}
	return o.InterfaceType, true
}

// HasInterfaceType returns a boolean if a field has been set.
func (o *InterfaceInfoList) HasInterfaceType() bool {
	if o != nil && !IsNil(o.InterfaceType) {
		return true
	}

	return false
}

// SetInterfaceType gets a reference to the given string and assigns it to the InterfaceType field.
func (o *InterfaceInfoList) SetInterfaceType(v string) {
	o.InterfaceType = &v
}

// GetInterfaceUrl returns the InterfaceUrl field value if set, zero value otherwise.
func (o *InterfaceInfoList) GetInterfaceUrl() string {
	if o == nil || IsNil(o.InterfaceUrl) {
		var ret string
		return ret
	}
	return *o.InterfaceUrl
}

// GetInterfaceUrlOk returns a tuple with the InterfaceUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterfaceInfoList) GetInterfaceUrlOk() (*string, bool) {
	if o == nil || IsNil(o.InterfaceUrl) {
		return nil, false
	}
	return o.InterfaceUrl, true
}

// HasInterfaceUrl returns a boolean if a field has been set.
func (o *InterfaceInfoList) HasInterfaceUrl() bool {
	if o != nil && !IsNil(o.InterfaceUrl) {
		return true
	}

	return false
}

// SetInterfaceUrl gets a reference to the given string and assigns it to the InterfaceUrl field.
func (o *InterfaceInfoList) SetInterfaceUrl(v string) {
	o.InterfaceUrl = &v
}

func (o InterfaceInfoList) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InterfaceInfoList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.InterfaceName) {
		toSerialize["interface_name"] = o.InterfaceName
	}
	if !IsNil(o.InterfaceType) {
		toSerialize["interface_type"] = o.InterfaceType
	}
	if !IsNil(o.InterfaceUrl) {
		toSerialize["interface_url"] = o.InterfaceUrl
	}
	return toSerialize, nil
}

type NullableInterfaceInfoList struct {
	value *InterfaceInfoList
	isSet bool
}

func (v NullableInterfaceInfoList) Get() *InterfaceInfoList {
	return v.value
}

func (v *NullableInterfaceInfoList) Set(val *InterfaceInfoList) {
	v.value = val
	v.isSet = true
}

func (v NullableInterfaceInfoList) IsSet() bool {
	return v.isSet
}

func (v *NullableInterfaceInfoList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInterfaceInfoList(val *InterfaceInfoList) *NullableInterfaceInfoList {
	return &NullableInterfaceInfoList{value: val, isSet: true}
}

func (v NullableInterfaceInfoList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInterfaceInfoList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
