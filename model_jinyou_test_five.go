/*
支付宝开放平台API

支付宝开放平台v3协议文档

API version: 2024-07-05
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alipay

import (
	"encoding/json"
)

// checks if the JinyouTestFive type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JinyouTestFive{}

// JinyouTestFive struct for JinyouTestFive
type JinyouTestFive struct {
	F1F *JinyouTestFour  `json:"f_1_f,omitempty"`
	F2F *JinyouTestThree `json:"f_2_f,omitempty"`
	// 1
	F3Openid *string `json:"f_3_openid,omitempty"`
	// 1
	F3Y *string `json:"f_3_y,omitempty"`
	// 3
	F4N *string `json:"f_4_n,omitempty"`
}

// NewJinyouTestFive instantiates a new JinyouTestFive object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJinyouTestFive() *JinyouTestFive {
	this := JinyouTestFive{}
	return &this
}

// NewJinyouTestFiveWithDefaults instantiates a new JinyouTestFive object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJinyouTestFiveWithDefaults() *JinyouTestFive {
	this := JinyouTestFive{}
	return &this
}

// GetF1F returns the F1F field value if set, zero value otherwise.
func (o *JinyouTestFive) GetF1F() JinyouTestFour {
	if o == nil || IsNil(o.F1F) {
		var ret JinyouTestFour
		return ret
	}
	return *o.F1F
}

// GetF1FOk returns a tuple with the F1F field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JinyouTestFive) GetF1FOk() (*JinyouTestFour, bool) {
	if o == nil || IsNil(o.F1F) {
		return nil, false
	}
	return o.F1F, true
}

// HasF1F returns a boolean if a field has been set.
func (o *JinyouTestFive) HasF1F() bool {
	if o != nil && !IsNil(o.F1F) {
		return true
	}

	return false
}

// SetF1F gets a reference to the given JinyouTestFour and assigns it to the F1F field.
func (o *JinyouTestFive) SetF1F(v JinyouTestFour) {
	o.F1F = &v
}

// GetF2F returns the F2F field value if set, zero value otherwise.
func (o *JinyouTestFive) GetF2F() JinyouTestThree {
	if o == nil || IsNil(o.F2F) {
		var ret JinyouTestThree
		return ret
	}
	return *o.F2F
}

// GetF2FOk returns a tuple with the F2F field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JinyouTestFive) GetF2FOk() (*JinyouTestThree, bool) {
	if o == nil || IsNil(o.F2F) {
		return nil, false
	}
	return o.F2F, true
}

// HasF2F returns a boolean if a field has been set.
func (o *JinyouTestFive) HasF2F() bool {
	if o != nil && !IsNil(o.F2F) {
		return true
	}

	return false
}

// SetF2F gets a reference to the given JinyouTestThree and assigns it to the F2F field.
func (o *JinyouTestFive) SetF2F(v JinyouTestThree) {
	o.F2F = &v
}

// GetF3Openid returns the F3Openid field value if set, zero value otherwise.
func (o *JinyouTestFive) GetF3Openid() string {
	if o == nil || IsNil(o.F3Openid) {
		var ret string
		return ret
	}
	return *o.F3Openid
}

// GetF3OpenidOk returns a tuple with the F3Openid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JinyouTestFive) GetF3OpenidOk() (*string, bool) {
	if o == nil || IsNil(o.F3Openid) {
		return nil, false
	}
	return o.F3Openid, true
}

// HasF3Openid returns a boolean if a field has been set.
func (o *JinyouTestFive) HasF3Openid() bool {
	if o != nil && !IsNil(o.F3Openid) {
		return true
	}

	return false
}

// SetF3Openid gets a reference to the given string and assigns it to the F3Openid field.
func (o *JinyouTestFive) SetF3Openid(v string) {
	o.F3Openid = &v
}

// GetF3Y returns the F3Y field value if set, zero value otherwise.
func (o *JinyouTestFive) GetF3Y() string {
	if o == nil || IsNil(o.F3Y) {
		var ret string
		return ret
	}
	return *o.F3Y
}

// GetF3YOk returns a tuple with the F3Y field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JinyouTestFive) GetF3YOk() (*string, bool) {
	if o == nil || IsNil(o.F3Y) {
		return nil, false
	}
	return o.F3Y, true
}

// HasF3Y returns a boolean if a field has been set.
func (o *JinyouTestFive) HasF3Y() bool {
	if o != nil && !IsNil(o.F3Y) {
		return true
	}

	return false
}

// SetF3Y gets a reference to the given string and assigns it to the F3Y field.
func (o *JinyouTestFive) SetF3Y(v string) {
	o.F3Y = &v
}

// GetF4N returns the F4N field value if set, zero value otherwise.
func (o *JinyouTestFive) GetF4N() string {
	if o == nil || IsNil(o.F4N) {
		var ret string
		return ret
	}
	return *o.F4N
}

// GetF4NOk returns a tuple with the F4N field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JinyouTestFive) GetF4NOk() (*string, bool) {
	if o == nil || IsNil(o.F4N) {
		return nil, false
	}
	return o.F4N, true
}

// HasF4N returns a boolean if a field has been set.
func (o *JinyouTestFive) HasF4N() bool {
	if o != nil && !IsNil(o.F4N) {
		return true
	}

	return false
}

// SetF4N gets a reference to the given string and assigns it to the F4N field.
func (o *JinyouTestFive) SetF4N(v string) {
	o.F4N = &v
}

func (o JinyouTestFive) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JinyouTestFive) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.F1F) {
		toSerialize["f_1_f"] = o.F1F
	}
	if !IsNil(o.F2F) {
		toSerialize["f_2_f"] = o.F2F
	}
	if !IsNil(o.F3Openid) {
		toSerialize["f_3_openid"] = o.F3Openid
	}
	if !IsNil(o.F3Y) {
		toSerialize["f_3_y"] = o.F3Y
	}
	if !IsNil(o.F4N) {
		toSerialize["f_4_n"] = o.F4N
	}
	return toSerialize, nil
}

type NullableJinyouTestFive struct {
	value *JinyouTestFive
	isSet bool
}

func (v NullableJinyouTestFive) Get() *JinyouTestFive {
	return v.value
}

func (v *NullableJinyouTestFive) Set(val *JinyouTestFive) {
	v.value = val
	v.isSet = true
}

func (v NullableJinyouTestFive) IsSet() bool {
	return v.isSet
}

func (v *NullableJinyouTestFive) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJinyouTestFive(val *JinyouTestFive) *NullableJinyouTestFive {
	return &NullableJinyouTestFive{value: val, isSet: true}
}

func (v NullableJinyouTestFive) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJinyouTestFive) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
