/*
支付宝开放平台API

支付宝开放平台v3协议文档

API version: 2024-07-05
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the SubFee type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SubFee{}

// SubFee struct for SubFee
type SubFee struct {
	// 实收费用
	ChargeFee *string `json:"charge_fee,omitempty"`
	// 原始费用
	OriginalChargeFee *string `json:"original_charge_fee,omitempty"`
	// 签约费率
	SwitchFeeRate *string `json:"switch_fee_rate,omitempty"`
}

// NewSubFee instantiates a new SubFee object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubFee() *SubFee {
	this := SubFee{}
	return &this
}

// NewSubFeeWithDefaults instantiates a new SubFee object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubFeeWithDefaults() *SubFee {
	this := SubFee{}
	return &this
}

// GetChargeFee returns the ChargeFee field value if set, zero value otherwise.
func (o *SubFee) GetChargeFee() string {
	if o == nil || IsNil(o.ChargeFee) {
		var ret string
		return ret
	}
	return *o.ChargeFee
}

// GetChargeFeeOk returns a tuple with the ChargeFee field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubFee) GetChargeFeeOk() (*string, bool) {
	if o == nil || IsNil(o.ChargeFee) {
		return nil, false
	}
	return o.ChargeFee, true
}

// HasChargeFee returns a boolean if a field has been set.
func (o *SubFee) HasChargeFee() bool {
	if o != nil && !IsNil(o.ChargeFee) {
		return true
	}

	return false
}

// SetChargeFee gets a reference to the given string and assigns it to the ChargeFee field.
func (o *SubFee) SetChargeFee(v string) {
	o.ChargeFee = &v
}

// GetOriginalChargeFee returns the OriginalChargeFee field value if set, zero value otherwise.
func (o *SubFee) GetOriginalChargeFee() string {
	if o == nil || IsNil(o.OriginalChargeFee) {
		var ret string
		return ret
	}
	return *o.OriginalChargeFee
}

// GetOriginalChargeFeeOk returns a tuple with the OriginalChargeFee field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubFee) GetOriginalChargeFeeOk() (*string, bool) {
	if o == nil || IsNil(o.OriginalChargeFee) {
		return nil, false
	}
	return o.OriginalChargeFee, true
}

// HasOriginalChargeFee returns a boolean if a field has been set.
func (o *SubFee) HasOriginalChargeFee() bool {
	if o != nil && !IsNil(o.OriginalChargeFee) {
		return true
	}

	return false
}

// SetOriginalChargeFee gets a reference to the given string and assigns it to the OriginalChargeFee field.
func (o *SubFee) SetOriginalChargeFee(v string) {
	o.OriginalChargeFee = &v
}

// GetSwitchFeeRate returns the SwitchFeeRate field value if set, zero value otherwise.
func (o *SubFee) GetSwitchFeeRate() string {
	if o == nil || IsNil(o.SwitchFeeRate) {
		var ret string
		return ret
	}
	return *o.SwitchFeeRate
}

// GetSwitchFeeRateOk returns a tuple with the SwitchFeeRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubFee) GetSwitchFeeRateOk() (*string, bool) {
	if o == nil || IsNil(o.SwitchFeeRate) {
		return nil, false
	}
	return o.SwitchFeeRate, true
}

// HasSwitchFeeRate returns a boolean if a field has been set.
func (o *SubFee) HasSwitchFeeRate() bool {
	if o != nil && !IsNil(o.SwitchFeeRate) {
		return true
	}

	return false
}

// SetSwitchFeeRate gets a reference to the given string and assigns it to the SwitchFeeRate field.
func (o *SubFee) SetSwitchFeeRate(v string) {
	o.SwitchFeeRate = &v
}

func (o SubFee) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SubFee) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ChargeFee) {
		toSerialize["charge_fee"] = o.ChargeFee
	}
	if !IsNil(o.OriginalChargeFee) {
		toSerialize["original_charge_fee"] = o.OriginalChargeFee
	}
	if !IsNil(o.SwitchFeeRate) {
		toSerialize["switch_fee_rate"] = o.SwitchFeeRate
	}
	return toSerialize, nil
}

type NullableSubFee struct {
	value *SubFee
	isSet bool
}

func (v NullableSubFee) Get() *SubFee {
	return v.value
}

func (v *NullableSubFee) Set(val *SubFee) {
	v.value = val
	v.isSet = true
}

func (v NullableSubFee) IsSet() bool {
	return v.isSet
}

func (v *NullableSubFee) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubFee(val *SubFee) *NullableSubFee {
	return &NullableSubFee{value: val, isSet: true}
}

func (v NullableSubFee) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubFee) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


