/*
支付宝开放平台API

支付宝开放平台v3协议文档

API version: 2024-07-05
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alipay

import (
	"encoding/json"
)

// checks if the ChatMessage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ChatMessage{}

// ChatMessage struct for ChatMessage
type ChatMessage struct {
	// 消息内容
	MessageContent *string `json:"message_content,omitempty"`
	// 消息内容类型,默认TEXT,包括: TEXT(文本消息),IMAGE(图片消息),FILE(文件消息)
	MessageType *string `json:"message_type,omitempty"`
	// 消息发送时间，按照ISO8601标准表示，比如：2018-12-24T15:38:17.824+08:00
	SendTime *string `json:"send_time,omitempty"`
	// 发送者名称
	UserName *string `json:"user_name,omitempty"`
	// 发送者类型: VISITOR(访客) ,AGENT(在线客服) ,SYSTEM(系统)
	UserType *string `json:"user_type,omitempty"`
}

// NewChatMessage instantiates a new ChatMessage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChatMessage() *ChatMessage {
	this := ChatMessage{}
	return &this
}

// NewChatMessageWithDefaults instantiates a new ChatMessage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChatMessageWithDefaults() *ChatMessage {
	this := ChatMessage{}
	return &this
}

// GetMessageContent returns the MessageContent field value if set, zero value otherwise.
func (o *ChatMessage) GetMessageContent() string {
	if o == nil || IsNil(o.MessageContent) {
		var ret string
		return ret
	}
	return *o.MessageContent
}

// GetMessageContentOk returns a tuple with the MessageContent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChatMessage) GetMessageContentOk() (*string, bool) {
	if o == nil || IsNil(o.MessageContent) {
		return nil, false
	}
	return o.MessageContent, true
}

// HasMessageContent returns a boolean if a field has been set.
func (o *ChatMessage) HasMessageContent() bool {
	if o != nil && !IsNil(o.MessageContent) {
		return true
	}

	return false
}

// SetMessageContent gets a reference to the given string and assigns it to the MessageContent field.
func (o *ChatMessage) SetMessageContent(v string) {
	o.MessageContent = &v
}

// GetMessageType returns the MessageType field value if set, zero value otherwise.
func (o *ChatMessage) GetMessageType() string {
	if o == nil || IsNil(o.MessageType) {
		var ret string
		return ret
	}
	return *o.MessageType
}

// GetMessageTypeOk returns a tuple with the MessageType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChatMessage) GetMessageTypeOk() (*string, bool) {
	if o == nil || IsNil(o.MessageType) {
		return nil, false
	}
	return o.MessageType, true
}

// HasMessageType returns a boolean if a field has been set.
func (o *ChatMessage) HasMessageType() bool {
	if o != nil && !IsNil(o.MessageType) {
		return true
	}

	return false
}

// SetMessageType gets a reference to the given string and assigns it to the MessageType field.
func (o *ChatMessage) SetMessageType(v string) {
	o.MessageType = &v
}

// GetSendTime returns the SendTime field value if set, zero value otherwise.
func (o *ChatMessage) GetSendTime() string {
	if o == nil || IsNil(o.SendTime) {
		var ret string
		return ret
	}
	return *o.SendTime
}

// GetSendTimeOk returns a tuple with the SendTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChatMessage) GetSendTimeOk() (*string, bool) {
	if o == nil || IsNil(o.SendTime) {
		return nil, false
	}
	return o.SendTime, true
}

// HasSendTime returns a boolean if a field has been set.
func (o *ChatMessage) HasSendTime() bool {
	if o != nil && !IsNil(o.SendTime) {
		return true
	}

	return false
}

// SetSendTime gets a reference to the given string and assigns it to the SendTime field.
func (o *ChatMessage) SetSendTime(v string) {
	o.SendTime = &v
}

// GetUserName returns the UserName field value if set, zero value otherwise.
func (o *ChatMessage) GetUserName() string {
	if o == nil || IsNil(o.UserName) {
		var ret string
		return ret
	}
	return *o.UserName
}

// GetUserNameOk returns a tuple with the UserName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChatMessage) GetUserNameOk() (*string, bool) {
	if o == nil || IsNil(o.UserName) {
		return nil, false
	}
	return o.UserName, true
}

// HasUserName returns a boolean if a field has been set.
func (o *ChatMessage) HasUserName() bool {
	if o != nil && !IsNil(o.UserName) {
		return true
	}

	return false
}

// SetUserName gets a reference to the given string and assigns it to the UserName field.
func (o *ChatMessage) SetUserName(v string) {
	o.UserName = &v
}

// GetUserType returns the UserType field value if set, zero value otherwise.
func (o *ChatMessage) GetUserType() string {
	if o == nil || IsNil(o.UserType) {
		var ret string
		return ret
	}
	return *o.UserType
}

// GetUserTypeOk returns a tuple with the UserType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChatMessage) GetUserTypeOk() (*string, bool) {
	if o == nil || IsNil(o.UserType) {
		return nil, false
	}
	return o.UserType, true
}

// HasUserType returns a boolean if a field has been set.
func (o *ChatMessage) HasUserType() bool {
	if o != nil && !IsNil(o.UserType) {
		return true
	}

	return false
}

// SetUserType gets a reference to the given string and assigns it to the UserType field.
func (o *ChatMessage) SetUserType(v string) {
	o.UserType = &v
}

func (o ChatMessage) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ChatMessage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MessageContent) {
		toSerialize["message_content"] = o.MessageContent
	}
	if !IsNil(o.MessageType) {
		toSerialize["message_type"] = o.MessageType
	}
	if !IsNil(o.SendTime) {
		toSerialize["send_time"] = o.SendTime
	}
	if !IsNil(o.UserName) {
		toSerialize["user_name"] = o.UserName
	}
	if !IsNil(o.UserType) {
		toSerialize["user_type"] = o.UserType
	}
	return toSerialize, nil
}

type NullableChatMessage struct {
	value *ChatMessage
	isSet bool
}

func (v NullableChatMessage) Get() *ChatMessage {
	return v.value
}

func (v *NullableChatMessage) Set(val *ChatMessage) {
	v.value = val
	v.isSet = true
}

func (v NullableChatMessage) IsSet() bool {
	return v.isSet
}

func (v *NullableChatMessage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChatMessage(val *ChatMessage) *NullableChatMessage {
	return &NullableChatMessage{value: val, isSet: true}
}

func (v NullableChatMessage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChatMessage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
