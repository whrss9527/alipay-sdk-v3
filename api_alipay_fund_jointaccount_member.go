/*
支付宝开放平台API

支付宝开放平台v3协议文档

API version: 2024-07-05
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alipay

import (
	"bytes"
	"context"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strconv"
	"time"
)

// AlipayFundJointaccountMemberAPIService AlipayFundJointaccountMemberAPI service
type AlipayFundJointaccountMemberAPIService service

type ApiAlipayFundJointaccountMemberBatchqueryRequest struct {
	ctx                                         context.Context
	ApiService                                  *AlipayFundJointaccountMemberAPIService
	alipayFundJointaccountMemberBatchqueryModel *AlipayFundJointaccountMemberBatchqueryModel
}

func (r ApiAlipayFundJointaccountMemberBatchqueryRequest) AlipayFundJointaccountMemberBatchqueryModel(alipayFundJointaccountMemberBatchqueryModel AlipayFundJointaccountMemberBatchqueryModel) ApiAlipayFundJointaccountMemberBatchqueryRequest {
	r.alipayFundJointaccountMemberBatchqueryModel = &alipayFundJointaccountMemberBatchqueryModel
	return r
}

func (r ApiAlipayFundJointaccountMemberBatchqueryRequest) Execute() (*AlipayFundJointaccountMemberBatchqueryResponseModel, *http.Response, error) {
	return r.ApiService.AlipayFundJointaccountMemberBatchqueryExecute(r)
}

/*
AlipayFundJointaccountMemberBatchquery 企业批量查询员工信息（分页）

企业查询员工列表，支持分页，支持按登录号精确查询，支持按会员号精确查询

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiAlipayFundJointaccountMemberBatchqueryRequest
*/
func (r *AlipayFundJointaccountMemberAPIService) AlipayFundJointaccountMemberBatchquery(ctx context.Context) ApiAlipayFundJointaccountMemberBatchqueryRequest {
	return ApiAlipayFundJointaccountMemberBatchqueryRequest{
		ApiService: r,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return AlipayFundJointaccountMemberBatchqueryResponseModel
func (a *AlipayFundJointaccountMemberAPIService) AlipayFundJointaccountMemberBatchqueryExecute(r ApiAlipayFundJointaccountMemberBatchqueryRequest) (*AlipayFundJointaccountMemberBatchqueryResponseModel, *http.Response, error) {
	err := a.client.prepareConfig()
	if err != nil {
		return nil, nil, &GenericOpenAPIError{error: err.Error()}
	}
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *AlipayFundJointaccountMemberBatchqueryResponseModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AlipayFundJointaccountMemberAPIService.AlipayFundJointaccountMemberBatchquery")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/alipay/fund/jointaccount/member/batchquery"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.alipayFundJointaccountMemberBatchqueryModel

	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	// Add signing logic
	err = a.signRequest(req)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	// Add verification logic
	err = a.verifyResponse(localVarHTTPResponse, localVarBody)
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v AlipayFundJointaccountMemberBatchqueryDefaultResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAlipayFundJointaccountMemberBindRequest struct {
	ctx                                   context.Context
	ApiService                            *AlipayFundJointaccountMemberAPIService
	alipayFundJointaccountMemberBindModel *AlipayFundJointaccountMemberBindModel
}

func (r ApiAlipayFundJointaccountMemberBindRequest) AlipayFundJointaccountMemberBindModel(alipayFundJointaccountMemberBindModel AlipayFundJointaccountMemberBindModel) ApiAlipayFundJointaccountMemberBindRequest {
	r.alipayFundJointaccountMemberBindModel = &alipayFundJointaccountMemberBindModel
	return r
}

func (r ApiAlipayFundJointaccountMemberBindRequest) Execute() (*AlipayFundJointaccountMemberBindResponseModel, *http.Response, error) {
	return r.ApiService.AlipayFundJointaccountMemberBindExecute(r)
}

/*
AlipayFundJointaccountMemberBind 因公付邀请员工

因公付邀请员工

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiAlipayFundJointaccountMemberBindRequest
*/
func (r *AlipayFundJointaccountMemberAPIService) AlipayFundJointaccountMemberBind(ctx context.Context) ApiAlipayFundJointaccountMemberBindRequest {
	return ApiAlipayFundJointaccountMemberBindRequest{
		ApiService: r,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return AlipayFundJointaccountMemberBindResponseModel
func (a *AlipayFundJointaccountMemberAPIService) AlipayFundJointaccountMemberBindExecute(r ApiAlipayFundJointaccountMemberBindRequest) (*AlipayFundJointaccountMemberBindResponseModel, *http.Response, error) {
	err := a.client.prepareConfig()
	if err != nil {
		return nil, nil, &GenericOpenAPIError{error: err.Error()}
	}
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *AlipayFundJointaccountMemberBindResponseModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AlipayFundJointaccountMemberAPIService.AlipayFundJointaccountMemberBind")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/alipay/fund/jointaccount/member/bind"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.alipayFundJointaccountMemberBindModel

	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	// Add signing logic
	err = a.signRequest(req)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	// Add verification logic
	err = a.verifyResponse(localVarHTTPResponse, localVarBody)
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v AlipayFundJointaccountMemberBindDefaultResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAlipayFundJointaccountMemberConsultRequest struct {
	ctx                                      context.Context
	ApiService                               *AlipayFundJointaccountMemberAPIService
	alipayFundJointaccountMemberConsultModel *AlipayFundJointaccountMemberConsultModel
}

func (r ApiAlipayFundJointaccountMemberConsultRequest) AlipayFundJointaccountMemberConsultModel(alipayFundJointaccountMemberConsultModel AlipayFundJointaccountMemberConsultModel) ApiAlipayFundJointaccountMemberConsultRequest {
	r.alipayFundJointaccountMemberConsultModel = &alipayFundJointaccountMemberConsultModel
	return r
}

func (r ApiAlipayFundJointaccountMemberConsultRequest) Execute() (*AlipayFundJointaccountMemberConsultResponseModel, *http.Response, error) {
	return r.ApiService.AlipayFundJointaccountMemberConsultExecute(r)
}

/*
AlipayFundJointaccountMemberConsult 员企关系咨询

返回输入的员工列表是否在指定企业组织中

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiAlipayFundJointaccountMemberConsultRequest
*/
func (r *AlipayFundJointaccountMemberAPIService) AlipayFundJointaccountMemberConsult(ctx context.Context) ApiAlipayFundJointaccountMemberConsultRequest {
	return ApiAlipayFundJointaccountMemberConsultRequest{
		ApiService: r,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return AlipayFundJointaccountMemberConsultResponseModel
func (a *AlipayFundJointaccountMemberAPIService) AlipayFundJointaccountMemberConsultExecute(r ApiAlipayFundJointaccountMemberConsultRequest) (*AlipayFundJointaccountMemberConsultResponseModel, *http.Response, error) {
	err := a.client.prepareConfig()
	if err != nil {
		return nil, nil, &GenericOpenAPIError{error: err.Error()}
	}
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *AlipayFundJointaccountMemberConsultResponseModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AlipayFundJointaccountMemberAPIService.AlipayFundJointaccountMemberConsult")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/alipay/fund/jointaccount/member/consult"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.alipayFundJointaccountMemberConsultModel

	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	// Add signing logic
	err = a.signRequest(req)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	// Add verification logic
	err = a.verifyResponse(localVarHTTPResponse, localVarBody)
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v AlipayFundJointaccountMemberConsultDefaultResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAlipayFundJointaccountMemberQueryRequest struct {
	ctx         context.Context
	ApiService  *AlipayFundJointaccountMemberAPIService
	productCode *string
	bizScene    *string
	accountId   *string
	pageNum     *string
	pageSize    *string
	userId      *string
	openId      *string
	agreementNo *string
}

// 产品码
func (r ApiAlipayFundJointaccountMemberQueryRequest) ProductCode(productCode string) ApiAlipayFundJointaccountMemberQueryRequest {
	r.productCode = &productCode
	return r
}

// 业务场景
func (r ApiAlipayFundJointaccountMemberQueryRequest) BizScene(bizScene string) ApiAlipayFundJointaccountMemberQueryRequest {
	r.bizScene = &bizScene
	return r
}

// 账户ID
func (r ApiAlipayFundJointaccountMemberQueryRequest) AccountId(accountId string) ApiAlipayFundJointaccountMemberQueryRequest {
	r.accountId = &accountId
	return r
}

// 采用分页查询，本参数为空或0默认显示第一页。如果输入的值大于总页数，则支付宝返回最后一页数据。
func (r ApiAlipayFundJointaccountMemberQueryRequest) PageNum(pageNum string) ApiAlipayFundJointaccountMemberQueryRequest {
	r.pageNum = &pageNum
	return r
}

// 每页大小，不传的情况下默认20条，超过20条默认按20条查询；不足20条则按实际记录数返回
func (r ApiAlipayFundJointaccountMemberQueryRequest) PageSize(pageSize string) ApiAlipayFundJointaccountMemberQueryRequest {
	r.pageSize = &pageSize
	return r
}

// 员工id
func (r ApiAlipayFundJointaccountMemberQueryRequest) UserId(userId string) ApiAlipayFundJointaccountMemberQueryRequest {
	r.userId = &userId
	return r
}

// 员工的openId
func (r ApiAlipayFundJointaccountMemberQueryRequest) OpenId(openId string) ApiAlipayFundJointaccountMemberQueryRequest {
	r.openId = &openId
	return r
}

// 授权协议号
func (r ApiAlipayFundJointaccountMemberQueryRequest) AgreementNo(agreementNo string) ApiAlipayFundJointaccountMemberQueryRequest {
	r.agreementNo = &agreementNo
	return r
}

func (r ApiAlipayFundJointaccountMemberQueryRequest) Execute() (*AlipayFundJointaccountMemberQueryResponseModel, *http.Response, error) {
	return r.ApiService.AlipayFundJointaccountMemberQueryExecute(r)
}

/*
AlipayFundJointaccountMemberQuery 企业查询员工列表

企业查询员工列表

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiAlipayFundJointaccountMemberQueryRequest
*/
func (r *AlipayFundJointaccountMemberAPIService) AlipayFundJointaccountMemberQuery(ctx context.Context) ApiAlipayFundJointaccountMemberQueryRequest {
	return ApiAlipayFundJointaccountMemberQueryRequest{
		ApiService: r,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return AlipayFundJointaccountMemberQueryResponseModel
func (a *AlipayFundJointaccountMemberAPIService) AlipayFundJointaccountMemberQueryExecute(r ApiAlipayFundJointaccountMemberQueryRequest) (*AlipayFundJointaccountMemberQueryResponseModel, *http.Response, error) {
	err := a.client.prepareConfig()
	if err != nil {
		return nil, nil, &GenericOpenAPIError{error: err.Error()}
	}
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *AlipayFundJointaccountMemberQueryResponseModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AlipayFundJointaccountMemberAPIService.AlipayFundJointaccountMemberQuery")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/alipay/fund/jointaccount/member/query"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.productCode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "product_code", r.productCode, "form", "")
	}
	if r.bizScene != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "biz_scene", r.bizScene, "form", "")
	}
	if r.accountId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "account_id", r.accountId, "form", "")
	}
	if r.pageNum != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page_num", r.pageNum, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page_size", r.pageSize, "form", "")
	}
	if r.userId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "user_id", r.userId, "form", "")
	}
	if r.openId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "open_id", r.openId, "form", "")
	}
	if r.agreementNo != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "agreement_no", r.agreementNo, "form", "")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	// Add signing logic
	err = a.signRequest(req)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	// Add verification logic
	err = a.verifyResponse(localVarHTTPResponse, localVarBody)
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v AlipayFundJointaccountMemberQueryDefaultResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAlipayFundJointaccountMemberUnbindRequest struct {
	ctx                                     context.Context
	ApiService                              *AlipayFundJointaccountMemberAPIService
	alipayFundJointaccountMemberUnbindModel *AlipayFundJointaccountMemberUnbindModel
}

func (r ApiAlipayFundJointaccountMemberUnbindRequest) AlipayFundJointaccountMemberUnbindModel(alipayFundJointaccountMemberUnbindModel AlipayFundJointaccountMemberUnbindModel) ApiAlipayFundJointaccountMemberUnbindRequest {
	r.alipayFundJointaccountMemberUnbindModel = &alipayFundJointaccountMemberUnbindModel
	return r
}

func (r ApiAlipayFundJointaccountMemberUnbindRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.AlipayFundJointaccountMemberUnbindExecute(r)
}

/*
AlipayFundJointaccountMemberUnbind 企业删除员工

企业删除员工

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiAlipayFundJointaccountMemberUnbindRequest
*/
func (r *AlipayFundJointaccountMemberAPIService) AlipayFundJointaccountMemberUnbind(ctx context.Context) ApiAlipayFundJointaccountMemberUnbindRequest {
	return ApiAlipayFundJointaccountMemberUnbindRequest{
		ApiService: r,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return map[string]interface{}
func (a *AlipayFundJointaccountMemberAPIService) AlipayFundJointaccountMemberUnbindExecute(r ApiAlipayFundJointaccountMemberUnbindRequest) (map[string]interface{}, *http.Response, error) {
	err := a.client.prepareConfig()
	if err != nil {
		return nil, nil, &GenericOpenAPIError{error: err.Error()}
	}
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AlipayFundJointaccountMemberAPIService.AlipayFundJointaccountMemberUnbind")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/alipay/fund/jointaccount/member/unbind"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.alipayFundJointaccountMemberUnbindModel

	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	// Add signing logic
	err = a.signRequest(req)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	// Add verification logic
	err = a.verifyResponse(localVarHTTPResponse, localVarBody)
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v AlipayFundJointaccountMemberUnbindDefaultResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

func (a *AlipayFundJointaccountMemberAPIService) signRequest(req *http.Request) error {
	appID := a.client.cfg.AppID
	appCertSN := a.client.cfg.AppCertSN
	nonce := generateUUID()
	timestamp := strconv.FormatInt(time.Now().UnixNano()/1e6, 10)

	authString := fmt.Sprintf("app_id=%s", appID)
	if appCertSN != "" {
		authString += fmt.Sprintf(",app_cert_sn=%s", appCertSN)
	}
	authString += fmt.Sprintf(",nonce=%s,timestamp=%s", nonce, timestamp)

	httpMethod := req.Method
	httpRequestUri := req.URL.Path
	if req.URL.RawQuery != "" {
		httpRequestUri += "?" + req.URL.RawQuery
	}

	var httpRequestBody string
	if req.Body != nil {
		bodyBytes, err := io.ReadAll(req.Body)
		if err != nil {
			return err
		}
		httpRequestBody = string(bodyBytes)
		req.Body = io.NopCloser(bytes.NewBuffer(bodyBytes))
	}

	content := authString + "\n" +
		httpMethod + "\n" +
		httpRequestUri + "\n" +
		httpRequestBody + "\n"

	if appAuthToken := req.Header.Get("alipay-app-auth-token"); appAuthToken != "" {
		content += appAuthToken + "\n"
	}

	signature, err := signWithRSA(content, a.client.cfg.privateKey)
	if err != nil {
		return err
	}

	req.Header.Set("Authorization", fmt.Sprintf("ALIPAY-SHA256withRSA %s,sign=%s", authString, signature))
	return nil
}

func (a *AlipayFundJointaccountMemberAPIService) verifyResponse(resp *http.Response, body []byte) error {
	timestamp := resp.Header.Get("alipay-timestamp")
	nonce := resp.Header.Get("alipay-nonce")
	sign := resp.Header.Get("alipay-signature")

	content := timestamp + "\n" +
		nonce + "\n" +
		string(body) + "\n"

	return verifyWithRSA(content, sign, a.client.cfg.publicKey)
}
