/*
支付宝开放平台API

支付宝开放平台v3协议文档

API version: 2024-07-05
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strconv"
	"time"
	"strings"
)


// AlipayMarketingActivityOrdervoucherAPIService AlipayMarketingActivityOrdervoucherAPI service
type AlipayMarketingActivityOrdervoucherAPIService service

type ApiAlipayMarketingActivityOrdervoucherAppendRequest struct {
	ctx context.Context
	ApiService *AlipayMarketingActivityOrdervoucherAPIService
	activityId string
	alipayMarketingActivityOrdervoucherAppendModel *AlipayMarketingActivityOrdervoucherAppendModel
}

func (r ApiAlipayMarketingActivityOrdervoucherAppendRequest) AlipayMarketingActivityOrdervoucherAppendModel(alipayMarketingActivityOrdervoucherAppendModel AlipayMarketingActivityOrdervoucherAppendModel) ApiAlipayMarketingActivityOrdervoucherAppendRequest {
	r.alipayMarketingActivityOrdervoucherAppendModel = &alipayMarketingActivityOrdervoucherAppendModel
	return r
}

func (r ApiAlipayMarketingActivityOrdervoucherAppendRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.AlipayMarketingActivityOrdervoucherAppendExecute(r)
}

/*
AlipayMarketingActivityOrdervoucherAppend 修改商家券活动发券数量上限

商家调用该接口修改商家券活动预算上限，以此来追加商家券活动预算。
修改商家券活动预算上限同步返回追加请求受理结果，后续通过alipay.marketing.activity.message.appended消息接口异步发送发券数量上限修改成功事件消息。
code_mode=MERCHANT_UPLOAD场景下，必须先导入券码后，方可追加商家券预算。

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param activityId 活动id
 @return ApiAlipayMarketingActivityOrdervoucherAppendRequest
*/
func (r *AlipayMarketingActivityOrdervoucherAPIService) AlipayMarketingActivityOrdervoucherAppend(ctx context.Context, activityId string) ApiAlipayMarketingActivityOrdervoucherAppendRequest {
	return ApiAlipayMarketingActivityOrdervoucherAppendRequest{
		ApiService: r,
		ctx: ctx,
		activityId: activityId,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *AlipayMarketingActivityOrdervoucherAPIService) AlipayMarketingActivityOrdervoucherAppendExecute(r ApiAlipayMarketingActivityOrdervoucherAppendRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AlipayMarketingActivityOrdervoucherAPIService.AlipayMarketingActivityOrdervoucherAppend")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/alipay/marketing/ordervoucher/activity/{activity_id}/append"
	localVarPath = strings.Replace(localVarPath, "{"+"activity_id"+"}", url.PathEscape(parameterValueToString(r.activityId, "activityId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}



	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.alipayMarketingActivityOrdervoucherAppendModel

	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	// Add signing logic
	err = a.signRequest(req)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	// Add verification logic
	err = a.verifyResponse(localVarHTTPResponse, localVarBody)
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v AlipayMarketingActivityOrdervoucherAppendDefaultResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}


type ApiAlipayMarketingActivityOrdervoucherAssociateRequest struct {
	ctx context.Context
	ApiService *AlipayMarketingActivityOrdervoucherAPIService
	alipayMarketingActivityOrdervoucherAssociateModel *AlipayMarketingActivityOrdervoucherAssociateModel
}

func (r ApiAlipayMarketingActivityOrdervoucherAssociateRequest) AlipayMarketingActivityOrdervoucherAssociateModel(alipayMarketingActivityOrdervoucherAssociateModel AlipayMarketingActivityOrdervoucherAssociateModel) ApiAlipayMarketingActivityOrdervoucherAssociateRequest {
	r.alipayMarketingActivityOrdervoucherAssociateModel = &alipayMarketingActivityOrdervoucherAssociateModel
	return r
}

func (r ApiAlipayMarketingActivityOrdervoucherAssociateRequest) Execute() (*AlipayMarketingActivityOrdervoucherAssociateResponseModel, *http.Response, error) {
	return r.ApiService.AlipayMarketingActivityOrdervoucherAssociateExecute(r)
}

/*
AlipayMarketingActivityOrdervoucherAssociate 关联订单信息

将已发放的商家券券码与订单信息关联，用于后续参与返佣激励等操作的统计。


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAlipayMarketingActivityOrdervoucherAssociateRequest
*/
func (r *AlipayMarketingActivityOrdervoucherAPIService) AlipayMarketingActivityOrdervoucherAssociate(ctx context.Context) ApiAlipayMarketingActivityOrdervoucherAssociateRequest {
	return ApiAlipayMarketingActivityOrdervoucherAssociateRequest{
		ApiService: r,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AlipayMarketingActivityOrdervoucherAssociateResponseModel
func (a *AlipayMarketingActivityOrdervoucherAPIService) AlipayMarketingActivityOrdervoucherAssociateExecute(r ApiAlipayMarketingActivityOrdervoucherAssociateRequest) (*AlipayMarketingActivityOrdervoucherAssociateResponseModel, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AlipayMarketingActivityOrdervoucherAssociateResponseModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AlipayMarketingActivityOrdervoucherAPIService.AlipayMarketingActivityOrdervoucherAssociate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/alipay/marketing/activity/ordervoucher/associate"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}



	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.alipayMarketingActivityOrdervoucherAssociateModel

	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	// Add signing logic
	err = a.signRequest(req)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	// Add verification logic
	err = a.verifyResponse(localVarHTTPResponse, localVarBody)
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v AlipayMarketingActivityOrdervoucherAssociateDefaultResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}


type ApiAlipayMarketingActivityOrdervoucherCodecountRequest struct {
	ctx context.Context
	ApiService *AlipayMarketingActivityOrdervoucherAPIService
	activityId string
	merchantAccessMode *string
}

// 商户接入模式
func (r ApiAlipayMarketingActivityOrdervoucherCodecountRequest) MerchantAccessMode(merchantAccessMode string) ApiAlipayMarketingActivityOrdervoucherCodecountRequest {
	r.merchantAccessMode = &merchantAccessMode
	return r
}

func (r ApiAlipayMarketingActivityOrdervoucherCodecountRequest) Execute() (*AlipayMarketingActivityOrdervoucherCodecountResponseModel, *http.Response, error) {
	return r.ApiService.AlipayMarketingActivityOrdervoucherCodecountExecute(r)
}

/*
AlipayMarketingActivityOrdervoucherCodecount 统计商家券券码数量

商家调用该接口查询活动中的有效券码个数。接口同步返回查询结果。

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param activityId 活动id
 @return ApiAlipayMarketingActivityOrdervoucherCodecountRequest
*/
func (r *AlipayMarketingActivityOrdervoucherAPIService) AlipayMarketingActivityOrdervoucherCodecount(ctx context.Context, activityId string) ApiAlipayMarketingActivityOrdervoucherCodecountRequest {
	return ApiAlipayMarketingActivityOrdervoucherCodecountRequest{
		ApiService: r,
		ctx: ctx,
		activityId: activityId,
	}
}

// Execute executes the request
//  @return AlipayMarketingActivityOrdervoucherCodecountResponseModel
func (a *AlipayMarketingActivityOrdervoucherAPIService) AlipayMarketingActivityOrdervoucherCodecountExecute(r ApiAlipayMarketingActivityOrdervoucherCodecountRequest) (*AlipayMarketingActivityOrdervoucherCodecountResponseModel, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AlipayMarketingActivityOrdervoucherCodecountResponseModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AlipayMarketingActivityOrdervoucherAPIService.AlipayMarketingActivityOrdervoucherCodecount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/alipay/marketing/ordervoucher/activity/{activity_id}/voucher/codecount"
	localVarPath = strings.Replace(localVarPath, "{"+"activity_id"+"}", url.PathEscape(parameterValueToString(r.activityId, "activityId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}


	if r.merchantAccessMode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "merchant_access_mode", r.merchantAccessMode, "form", "")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	// Add signing logic
	err = a.signRequest(req)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	// Add verification logic
	err = a.verifyResponse(localVarHTTPResponse, localVarBody)
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v AlipayMarketingActivityOrdervoucherCodecountDefaultResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}


type ApiAlipayMarketingActivityOrdervoucherCodedepositRequest struct {
	ctx context.Context
	ApiService *AlipayMarketingActivityOrdervoucherAPIService
	activityId string
	alipayMarketingActivityOrdervoucherCodedepositModel *AlipayMarketingActivityOrdervoucherCodedepositModel
}

func (r ApiAlipayMarketingActivityOrdervoucherCodedepositRequest) AlipayMarketingActivityOrdervoucherCodedepositModel(alipayMarketingActivityOrdervoucherCodedepositModel AlipayMarketingActivityOrdervoucherCodedepositModel) ApiAlipayMarketingActivityOrdervoucherCodedepositRequest {
	r.alipayMarketingActivityOrdervoucherCodedepositModel = &alipayMarketingActivityOrdervoucherCodedepositModel
	return r
}

func (r ApiAlipayMarketingActivityOrdervoucherCodedepositRequest) Execute() (*AlipayMarketingActivityOrdervoucherCodedepositResponseModel, *http.Response, error) {
	return r.ApiService.AlipayMarketingActivityOrdervoucherCodedepositExecute(r)
}

/*
AlipayMarketingActivityOrdervoucherCodedeposit 同步商家券券码

商家调用该接口同步导入商家券券码，接口同步返回导入结果。请在接收alipay.marketing.activity.message.created消息后，再进行调用。

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param activityId 活动id
 @return ApiAlipayMarketingActivityOrdervoucherCodedepositRequest
*/
func (r *AlipayMarketingActivityOrdervoucherAPIService) AlipayMarketingActivityOrdervoucherCodedeposit(ctx context.Context, activityId string) ApiAlipayMarketingActivityOrdervoucherCodedepositRequest {
	return ApiAlipayMarketingActivityOrdervoucherCodedepositRequest{
		ApiService: r,
		ctx: ctx,
		activityId: activityId,
	}
}

// Execute executes the request
//  @return AlipayMarketingActivityOrdervoucherCodedepositResponseModel
func (a *AlipayMarketingActivityOrdervoucherAPIService) AlipayMarketingActivityOrdervoucherCodedepositExecute(r ApiAlipayMarketingActivityOrdervoucherCodedepositRequest) (*AlipayMarketingActivityOrdervoucherCodedepositResponseModel, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AlipayMarketingActivityOrdervoucherCodedepositResponseModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AlipayMarketingActivityOrdervoucherAPIService.AlipayMarketingActivityOrdervoucherCodedeposit")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/alipay/marketing/ordervoucher/activity/{activity_id}/voucher/codedeposit"
	localVarPath = strings.Replace(localVarPath, "{"+"activity_id"+"}", url.PathEscape(parameterValueToString(r.activityId, "activityId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}



	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.alipayMarketingActivityOrdervoucherCodedepositModel

	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	// Add signing logic
	err = a.signRequest(req)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	// Add verification logic
	err = a.verifyResponse(localVarHTTPResponse, localVarBody)
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v AlipayMarketingActivityOrdervoucherCodedepositDefaultResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}


type ApiAlipayMarketingActivityOrdervoucherCreateRequest struct {
	ctx context.Context
	ApiService *AlipayMarketingActivityOrdervoucherAPIService
	alipayMarketingActivityOrdervoucherCreateModel *AlipayMarketingActivityOrdervoucherCreateModel
}

func (r ApiAlipayMarketingActivityOrdervoucherCreateRequest) AlipayMarketingActivityOrdervoucherCreateModel(alipayMarketingActivityOrdervoucherCreateModel AlipayMarketingActivityOrdervoucherCreateModel) ApiAlipayMarketingActivityOrdervoucherCreateRequest {
	r.alipayMarketingActivityOrdervoucherCreateModel = &alipayMarketingActivityOrdervoucherCreateModel
	return r
}

func (r ApiAlipayMarketingActivityOrdervoucherCreateRequest) Execute() (*AlipayMarketingActivityOrdervoucherCreateResponseModel, *http.Response, error) {
	return r.ApiService.AlipayMarketingActivityOrdervoucherCreateExecute(r)
}

/*
AlipayMarketingActivityOrdervoucherCreate 创建商家券活动

商家调用该接口创建商家券活动。
创建商家券活动接口同步返回创建请求受理结果，后续通过alipay.marketing.activity.message.created消息接口异步发送活动创建成功事件消息。

如果在code_mode=MERCHANT_UPLOAD的模式下，创建商家券活动后，还需要进行券码导入操作，以及预算追加操作，然后商家券才能进行发放。

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAlipayMarketingActivityOrdervoucherCreateRequest
*/
func (r *AlipayMarketingActivityOrdervoucherAPIService) AlipayMarketingActivityOrdervoucherCreate(ctx context.Context) ApiAlipayMarketingActivityOrdervoucherCreateRequest {
	return ApiAlipayMarketingActivityOrdervoucherCreateRequest{
		ApiService: r,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AlipayMarketingActivityOrdervoucherCreateResponseModel
func (a *AlipayMarketingActivityOrdervoucherAPIService) AlipayMarketingActivityOrdervoucherCreateExecute(r ApiAlipayMarketingActivityOrdervoucherCreateRequest) (*AlipayMarketingActivityOrdervoucherCreateResponseModel, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AlipayMarketingActivityOrdervoucherCreateResponseModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AlipayMarketingActivityOrdervoucherAPIService.AlipayMarketingActivityOrdervoucherCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/alipay/marketing/ordervoucher/activity"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}



	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.alipayMarketingActivityOrdervoucherCreateModel

	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	// Add signing logic
	err = a.signRequest(req)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	// Add verification logic
	err = a.verifyResponse(localVarHTTPResponse, localVarBody)
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v AlipayMarketingActivityOrdervoucherCreateDefaultResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}


type ApiAlipayMarketingActivityOrdervoucherDisassociateRequest struct {
	ctx context.Context
	ApiService *AlipayMarketingActivityOrdervoucherAPIService
	alipayMarketingActivityOrdervoucherDisassociateModel *AlipayMarketingActivityOrdervoucherDisassociateModel
}

func (r ApiAlipayMarketingActivityOrdervoucherDisassociateRequest) AlipayMarketingActivityOrdervoucherDisassociateModel(alipayMarketingActivityOrdervoucherDisassociateModel AlipayMarketingActivityOrdervoucherDisassociateModel) ApiAlipayMarketingActivityOrdervoucherDisassociateRequest {
	r.alipayMarketingActivityOrdervoucherDisassociateModel = &alipayMarketingActivityOrdervoucherDisassociateModel
	return r
}

func (r ApiAlipayMarketingActivityOrdervoucherDisassociateRequest) Execute() (*AlipayMarketingActivityOrdervoucherDisassociateResponseModel, *http.Response, error) {
	return r.ApiService.AlipayMarketingActivityOrdervoucherDisassociateExecute(r)
}

/*
AlipayMarketingActivityOrdervoucherDisassociate 取消关联订单信息

取消商家券与订单信息的关联关系.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAlipayMarketingActivityOrdervoucherDisassociateRequest
*/
func (r *AlipayMarketingActivityOrdervoucherAPIService) AlipayMarketingActivityOrdervoucherDisassociate(ctx context.Context) ApiAlipayMarketingActivityOrdervoucherDisassociateRequest {
	return ApiAlipayMarketingActivityOrdervoucherDisassociateRequest{
		ApiService: r,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AlipayMarketingActivityOrdervoucherDisassociateResponseModel
func (a *AlipayMarketingActivityOrdervoucherAPIService) AlipayMarketingActivityOrdervoucherDisassociateExecute(r ApiAlipayMarketingActivityOrdervoucherDisassociateRequest) (*AlipayMarketingActivityOrdervoucherDisassociateResponseModel, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AlipayMarketingActivityOrdervoucherDisassociateResponseModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AlipayMarketingActivityOrdervoucherAPIService.AlipayMarketingActivityOrdervoucherDisassociate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/alipay/marketing/activity/ordervoucher/disassociate"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}



	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.alipayMarketingActivityOrdervoucherDisassociateModel

	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	// Add signing logic
	err = a.signRequest(req)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	// Add verification logic
	err = a.verifyResponse(localVarHTTPResponse, localVarBody)
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v AlipayMarketingActivityOrdervoucherDisassociateDefaultResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}


type ApiAlipayMarketingActivityOrdervoucherModifyRequest struct {
	ctx context.Context
	ApiService *AlipayMarketingActivityOrdervoucherAPIService
	activityId string
	alipayMarketingActivityOrdervoucherModifyModel *AlipayMarketingActivityOrdervoucherModifyModel
}

func (r ApiAlipayMarketingActivityOrdervoucherModifyRequest) AlipayMarketingActivityOrdervoucherModifyModel(alipayMarketingActivityOrdervoucherModifyModel AlipayMarketingActivityOrdervoucherModifyModel) ApiAlipayMarketingActivityOrdervoucherModifyRequest {
	r.alipayMarketingActivityOrdervoucherModifyModel = &alipayMarketingActivityOrdervoucherModifyModel
	return r
}

func (r ApiAlipayMarketingActivityOrdervoucherModifyRequest) Execute() (*AlipayMarketingActivityOrdervoucherModifyResponseModel, *http.Response, error) {
	return r.ApiService.AlipayMarketingActivityOrdervoucherModifyExecute(r)
}

/*
AlipayMarketingActivityOrdervoucherModify 修改商家券活动基本信息

商家调用该接口修改商家券活动基本信息。
修改商家券活动基本信息接口同步返回修改请求受理结果，后续通过alipay.marketing.activity.message.modified消息接口异步发送修改活动成功事件消息。

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param activityId 活动id1
 @return ApiAlipayMarketingActivityOrdervoucherModifyRequest
*/
func (r *AlipayMarketingActivityOrdervoucherAPIService) AlipayMarketingActivityOrdervoucherModify(ctx context.Context, activityId string) ApiAlipayMarketingActivityOrdervoucherModifyRequest {
	return ApiAlipayMarketingActivityOrdervoucherModifyRequest{
		ApiService: r,
		ctx: ctx,
		activityId: activityId,
	}
}

// Execute executes the request
//  @return AlipayMarketingActivityOrdervoucherModifyResponseModel
func (a *AlipayMarketingActivityOrdervoucherAPIService) AlipayMarketingActivityOrdervoucherModifyExecute(r ApiAlipayMarketingActivityOrdervoucherModifyRequest) (*AlipayMarketingActivityOrdervoucherModifyResponseModel, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AlipayMarketingActivityOrdervoucherModifyResponseModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AlipayMarketingActivityOrdervoucherAPIService.AlipayMarketingActivityOrdervoucherModify")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/alipay/marketing/ordervoucher/activity/{activity_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"activity_id"+"}", url.PathEscape(parameterValueToString(r.activityId, "activityId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}



	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.alipayMarketingActivityOrdervoucherModifyModel

	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	// Add signing logic
	err = a.signRequest(req)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	// Add verification logic
	err = a.verifyResponse(localVarHTTPResponse, localVarBody)
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v AlipayMarketingActivityOrdervoucherModifyDefaultResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}


type ApiAlipayMarketingActivityOrdervoucherQueryRequest struct {
	ctx context.Context
	ApiService *AlipayMarketingActivityOrdervoucherAPIService
	activityId *string
	merchantAccessMode *string
}

// 活动id
func (r ApiAlipayMarketingActivityOrdervoucherQueryRequest) ActivityId(activityId string) ApiAlipayMarketingActivityOrdervoucherQueryRequest {
	r.activityId = &activityId
	return r
}

// 商户接入模式
func (r ApiAlipayMarketingActivityOrdervoucherQueryRequest) MerchantAccessMode(merchantAccessMode string) ApiAlipayMarketingActivityOrdervoucherQueryRequest {
	r.merchantAccessMode = &merchantAccessMode
	return r
}

func (r ApiAlipayMarketingActivityOrdervoucherQueryRequest) Execute() (*AlipayMarketingActivityOrdervoucherQueryResponseModel, *http.Response, error) {
	return r.ApiService.AlipayMarketingActivityOrdervoucherQueryExecute(r)
}

/*
AlipayMarketingActivityOrdervoucherQuery 查询商家券活动

商户通过该接口查询商家券活动详情。

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAlipayMarketingActivityOrdervoucherQueryRequest
*/
func (r *AlipayMarketingActivityOrdervoucherAPIService) AlipayMarketingActivityOrdervoucherQuery(ctx context.Context) ApiAlipayMarketingActivityOrdervoucherQueryRequest {
	return ApiAlipayMarketingActivityOrdervoucherQueryRequest{
		ApiService: r,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AlipayMarketingActivityOrdervoucherQueryResponseModel
func (a *AlipayMarketingActivityOrdervoucherAPIService) AlipayMarketingActivityOrdervoucherQueryExecute(r ApiAlipayMarketingActivityOrdervoucherQueryRequest) (*AlipayMarketingActivityOrdervoucherQueryResponseModel, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AlipayMarketingActivityOrdervoucherQueryResponseModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AlipayMarketingActivityOrdervoucherAPIService.AlipayMarketingActivityOrdervoucherQuery")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/alipay/marketing/activity/ordervoucher/query"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}


	if r.activityId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "activity_id", r.activityId, "form", "")
	}
	if r.merchantAccessMode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "merchant_access_mode", r.merchantAccessMode, "form", "")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	// Add signing logic
	err = a.signRequest(req)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	// Add verification logic
	err = a.verifyResponse(localVarHTTPResponse, localVarBody)
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v AlipayMarketingActivityOrdervoucherQueryDefaultResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}


type ApiAlipayMarketingActivityOrdervoucherRefundRequest struct {
	ctx context.Context
	ApiService *AlipayMarketingActivityOrdervoucherAPIService
	activityId string
	voucherCode string
	alipayMarketingActivityOrdervoucherRefundModel *AlipayMarketingActivityOrdervoucherRefundModel
}

func (r ApiAlipayMarketingActivityOrdervoucherRefundRequest) AlipayMarketingActivityOrdervoucherRefundModel(alipayMarketingActivityOrdervoucherRefundModel AlipayMarketingActivityOrdervoucherRefundModel) ApiAlipayMarketingActivityOrdervoucherRefundRequest {
	r.alipayMarketingActivityOrdervoucherRefundModel = &alipayMarketingActivityOrdervoucherRefundModel
	return r
}

func (r ApiAlipayMarketingActivityOrdervoucherRefundRequest) Execute() (*AlipayMarketingActivityOrdervoucherRefundResponseModel, *http.Response, error) {
	return r.ApiService.AlipayMarketingActivityOrdervoucherRefundExecute(r)
}

/*
AlipayMarketingActivityOrdervoucherRefund 取消券核销状态

商户调用该接口进行优惠券退券处理。接口同步返回结果。
如果优惠券过期后，发起退券操作，该接口返回成功，优惠券退回后仍不可用。
如果优惠券在支付宝卡包已删除，发起退券操作，该接口返回成功，优惠券在支付宝卡包仍然是删除状态。

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param activityId 活动id
 @param voucherCode 已核销待退券的券码
 @return ApiAlipayMarketingActivityOrdervoucherRefundRequest
*/
func (r *AlipayMarketingActivityOrdervoucherAPIService) AlipayMarketingActivityOrdervoucherRefund(ctx context.Context, activityId string, voucherCode string) ApiAlipayMarketingActivityOrdervoucherRefundRequest {
	return ApiAlipayMarketingActivityOrdervoucherRefundRequest{
		ApiService: r,
		ctx: ctx,
		activityId: activityId,
		voucherCode: voucherCode,
	}
}

// Execute executes the request
//  @return AlipayMarketingActivityOrdervoucherRefundResponseModel
func (a *AlipayMarketingActivityOrdervoucherAPIService) AlipayMarketingActivityOrdervoucherRefundExecute(r ApiAlipayMarketingActivityOrdervoucherRefundRequest) (*AlipayMarketingActivityOrdervoucherRefundResponseModel, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AlipayMarketingActivityOrdervoucherRefundResponseModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AlipayMarketingActivityOrdervoucherAPIService.AlipayMarketingActivityOrdervoucherRefund")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/alipay/marketing/ordervoucher/activity/{activity_id}/voucher/{voucher_code}/refund"
	localVarPath = strings.Replace(localVarPath, "{"+"activity_id"+"}", url.PathEscape(parameterValueToString(r.activityId, "activityId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"voucher_code"+"}", url.PathEscape(parameterValueToString(r.voucherCode, "voucherCode")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}



	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.alipayMarketingActivityOrdervoucherRefundModel

	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	// Add signing logic
	err = a.signRequest(req)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	// Add verification logic
	err = a.verifyResponse(localVarHTTPResponse, localVarBody)
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v AlipayMarketingActivityOrdervoucherRefundDefaultResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}


type ApiAlipayMarketingActivityOrdervoucherStopRequest struct {
	ctx context.Context
	ApiService *AlipayMarketingActivityOrdervoucherAPIService
	activityId string
	alipayMarketingActivityOrdervoucherStopModel *AlipayMarketingActivityOrdervoucherStopModel
}

func (r ApiAlipayMarketingActivityOrdervoucherStopRequest) AlipayMarketingActivityOrdervoucherStopModel(alipayMarketingActivityOrdervoucherStopModel AlipayMarketingActivityOrdervoucherStopModel) ApiAlipayMarketingActivityOrdervoucherStopRequest {
	r.alipayMarketingActivityOrdervoucherStopModel = &alipayMarketingActivityOrdervoucherStopModel
	return r
}

func (r ApiAlipayMarketingActivityOrdervoucherStopRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.AlipayMarketingActivityOrdervoucherStopExecute(r)
}

/*
AlipayMarketingActivityOrdervoucherStop 停止商家券活动

商家调用该接口停止优惠券。
停止优惠券接口同步返回停止请求受理结果，后续通过alipay.marketing.activity.message.stopped消息接口异步发送停止活动成功事件。
如果成功消息长时间未送达，请联系相关技术人员。

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param activityId 活动id
 @return ApiAlipayMarketingActivityOrdervoucherStopRequest
*/
func (r *AlipayMarketingActivityOrdervoucherAPIService) AlipayMarketingActivityOrdervoucherStop(ctx context.Context, activityId string) ApiAlipayMarketingActivityOrdervoucherStopRequest {
	return ApiAlipayMarketingActivityOrdervoucherStopRequest{
		ApiService: r,
		ctx: ctx,
		activityId: activityId,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *AlipayMarketingActivityOrdervoucherAPIService) AlipayMarketingActivityOrdervoucherStopExecute(r ApiAlipayMarketingActivityOrdervoucherStopRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AlipayMarketingActivityOrdervoucherAPIService.AlipayMarketingActivityOrdervoucherStop")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/alipay/marketing/ordervoucher/activity/{activity_id}/stop"
	localVarPath = strings.Replace(localVarPath, "{"+"activity_id"+"}", url.PathEscape(parameterValueToString(r.activityId, "activityId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}



	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.alipayMarketingActivityOrdervoucherStopModel

	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	// Add signing logic
	err = a.signRequest(req)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	// Add verification logic
	err = a.verifyResponse(localVarHTTPResponse, localVarBody)
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v AlipayMarketingActivityOrdervoucherStopDefaultResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}


type ApiAlipayMarketingActivityOrdervoucherUseRequest struct {
	ctx context.Context
	ApiService *AlipayMarketingActivityOrdervoucherAPIService
	activityId string
	voucherCode string
	alipayMarketingActivityOrdervoucherUseModel *AlipayMarketingActivityOrdervoucherUseModel
}

func (r ApiAlipayMarketingActivityOrdervoucherUseRequest) AlipayMarketingActivityOrdervoucherUseModel(alipayMarketingActivityOrdervoucherUseModel AlipayMarketingActivityOrdervoucherUseModel) ApiAlipayMarketingActivityOrdervoucherUseRequest {
	r.alipayMarketingActivityOrdervoucherUseModel = &alipayMarketingActivityOrdervoucherUseModel
	return r
}

func (r ApiAlipayMarketingActivityOrdervoucherUseRequest) Execute() (*AlipayMarketingActivityOrdervoucherUseResponseModel, *http.Response, error) {
	return r.ApiService.AlipayMarketingActivityOrdervoucherUseExecute(r)
}

/*
AlipayMarketingActivityOrdervoucherUse 同步券核销状态

商户调用该接口，通过券码进行优惠券核销，接口同步返回核销结果。

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param activityId 活动id
 @param voucherCode 待核销的券码。
 @return ApiAlipayMarketingActivityOrdervoucherUseRequest
*/
func (r *AlipayMarketingActivityOrdervoucherAPIService) AlipayMarketingActivityOrdervoucherUse(ctx context.Context, activityId string, voucherCode string) ApiAlipayMarketingActivityOrdervoucherUseRequest {
	return ApiAlipayMarketingActivityOrdervoucherUseRequest{
		ApiService: r,
		ctx: ctx,
		activityId: activityId,
		voucherCode: voucherCode,
	}
}

// Execute executes the request
//  @return AlipayMarketingActivityOrdervoucherUseResponseModel
func (a *AlipayMarketingActivityOrdervoucherAPIService) AlipayMarketingActivityOrdervoucherUseExecute(r ApiAlipayMarketingActivityOrdervoucherUseRequest) (*AlipayMarketingActivityOrdervoucherUseResponseModel, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AlipayMarketingActivityOrdervoucherUseResponseModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AlipayMarketingActivityOrdervoucherAPIService.AlipayMarketingActivityOrdervoucherUse")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/alipay/marketing/ordervoucher/activity/{activity_id}/voucher/{voucher_code}/use"
	localVarPath = strings.Replace(localVarPath, "{"+"activity_id"+"}", url.PathEscape(parameterValueToString(r.activityId, "activityId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"voucher_code"+"}", url.PathEscape(parameterValueToString(r.voucherCode, "voucherCode")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}



	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.alipayMarketingActivityOrdervoucherUseModel

	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	// Add signing logic
	err = a.signRequest(req)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	// Add verification logic
	err = a.verifyResponse(localVarHTTPResponse, localVarBody)
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v AlipayMarketingActivityOrdervoucherUseDefaultResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}


func (a *AlipayMarketingActivityOrdervoucherAPIService) signRequest(req *http.Request) error {
	appID := a.client.cfg.AppID
	appCertSN := a.client.cfg.AppCertSN
	privateKey := a.client.cfg.PrivateKey

	nonce := generateUUID()
	timestamp := strconv.FormatInt(time.Now().UnixNano()/1e6, 10)

	authString := fmt.Sprintf("app_id=%s", appID)
	if appCertSN != "" {
		authString += fmt.Sprintf(",app_cert_sn=%s", appCertSN)
	}
	authString += fmt.Sprintf(",nonce=%s,timestamp=%s", nonce, timestamp)

	httpMethod := req.Method
	httpRequestUri := req.URL.Path
	if req.URL.RawQuery != "" {
		httpRequestUri += "?" + req.URL.RawQuery
	}

	var httpRequestBody string
	if req.Body != nil {
		bodyBytes, err := io.ReadAll(req.Body)
		if err != nil {
			return err
		}
		httpRequestBody = string(bodyBytes)
		req.Body = io.NopCloser(bytes.NewBuffer(bodyBytes))
	}

	content := authString + "\n" +
		httpMethod + "\n" +
		httpRequestUri + "\n" +
		httpRequestBody + "\n"

	if appAuthToken := req.Header.Get("alipay-app-auth-token"); appAuthToken != "" {
		content += appAuthToken + "\n"
	}

	signature, err := signWithRSA(content, privateKey)
	if err != nil {
		return err
	}

	req.Header.Set("Authorization", fmt.Sprintf("ALIPAY-SHA256withRSA %s,sign=%s", authString, signature))
	return nil
}

func (a *AlipayMarketingActivityOrdervoucherAPIService) verifyResponse(resp *http.Response, body []byte) error {
	timestamp := resp.Header.Get("alipay-timestamp")
	nonce := resp.Header.Get("alipay-nonce")
	sign := resp.Header.Get("alipay-signature")

	content := timestamp + "\n" +
		nonce + "\n" +
		string(body) + "\n"

	publicKey := a.client.cfg.PublicKey

	return verifyWithRSA(content, sign, publicKey)
}


