/*
支付宝开放平台API

支付宝开放平台v3协议文档

API version: 2024-07-05
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alipay

import (
	"encoding/json"
)

// checks if the Context type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Context{}

// Context struct for Context
type Context struct {
	// 底部链接描述文字，如“查看详情”，最多能传8个汉字或16个英文字符，长度超出会报错
	ActionName *string  `json:"action_name,omitempty"`
	First      *Keyword `json:"first,omitempty"`
	// 顶部色条的色值
	HeadColor *string  `json:"head_color,omitempty"`
	Keyword1  *Keyword `json:"keyword1,omitempty"`
	Keyword2  *Keyword `json:"keyword2,omitempty"`
	Remark    *Keyword `json:"remark,omitempty"`
	// 点击消息后承接页的地址
	Url *string `json:"url,omitempty"`
}

// NewContext instantiates a new Context object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContext() *Context {
	this := Context{}
	return &this
}

// NewContextWithDefaults instantiates a new Context object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContextWithDefaults() *Context {
	this := Context{}
	return &this
}

// GetActionName returns the ActionName field value if set, zero value otherwise.
func (o *Context) GetActionName() string {
	if o == nil || IsNil(o.ActionName) {
		var ret string
		return ret
	}
	return *o.ActionName
}

// GetActionNameOk returns a tuple with the ActionName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Context) GetActionNameOk() (*string, bool) {
	if o == nil || IsNil(o.ActionName) {
		return nil, false
	}
	return o.ActionName, true
}

// HasActionName returns a boolean if a field has been set.
func (o *Context) HasActionName() bool {
	if o != nil && !IsNil(o.ActionName) {
		return true
	}

	return false
}

// SetActionName gets a reference to the given string and assigns it to the ActionName field.
func (o *Context) SetActionName(v string) {
	o.ActionName = &v
}

// GetFirst returns the First field value if set, zero value otherwise.
func (o *Context) GetFirst() Keyword {
	if o == nil || IsNil(o.First) {
		var ret Keyword
		return ret
	}
	return *o.First
}

// GetFirstOk returns a tuple with the First field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Context) GetFirstOk() (*Keyword, bool) {
	if o == nil || IsNil(o.First) {
		return nil, false
	}
	return o.First, true
}

// HasFirst returns a boolean if a field has been set.
func (o *Context) HasFirst() bool {
	if o != nil && !IsNil(o.First) {
		return true
	}

	return false
}

// SetFirst gets a reference to the given Keyword and assigns it to the First field.
func (o *Context) SetFirst(v Keyword) {
	o.First = &v
}

// GetHeadColor returns the HeadColor field value if set, zero value otherwise.
func (o *Context) GetHeadColor() string {
	if o == nil || IsNil(o.HeadColor) {
		var ret string
		return ret
	}
	return *o.HeadColor
}

// GetHeadColorOk returns a tuple with the HeadColor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Context) GetHeadColorOk() (*string, bool) {
	if o == nil || IsNil(o.HeadColor) {
		return nil, false
	}
	return o.HeadColor, true
}

// HasHeadColor returns a boolean if a field has been set.
func (o *Context) HasHeadColor() bool {
	if o != nil && !IsNil(o.HeadColor) {
		return true
	}

	return false
}

// SetHeadColor gets a reference to the given string and assigns it to the HeadColor field.
func (o *Context) SetHeadColor(v string) {
	o.HeadColor = &v
}

// GetKeyword1 returns the Keyword1 field value if set, zero value otherwise.
func (o *Context) GetKeyword1() Keyword {
	if o == nil || IsNil(o.Keyword1) {
		var ret Keyword
		return ret
	}
	return *o.Keyword1
}

// GetKeyword1Ok returns a tuple with the Keyword1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Context) GetKeyword1Ok() (*Keyword, bool) {
	if o == nil || IsNil(o.Keyword1) {
		return nil, false
	}
	return o.Keyword1, true
}

// HasKeyword1 returns a boolean if a field has been set.
func (o *Context) HasKeyword1() bool {
	if o != nil && !IsNil(o.Keyword1) {
		return true
	}

	return false
}

// SetKeyword1 gets a reference to the given Keyword and assigns it to the Keyword1 field.
func (o *Context) SetKeyword1(v Keyword) {
	o.Keyword1 = &v
}

// GetKeyword2 returns the Keyword2 field value if set, zero value otherwise.
func (o *Context) GetKeyword2() Keyword {
	if o == nil || IsNil(o.Keyword2) {
		var ret Keyword
		return ret
	}
	return *o.Keyword2
}

// GetKeyword2Ok returns a tuple with the Keyword2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Context) GetKeyword2Ok() (*Keyword, bool) {
	if o == nil || IsNil(o.Keyword2) {
		return nil, false
	}
	return o.Keyword2, true
}

// HasKeyword2 returns a boolean if a field has been set.
func (o *Context) HasKeyword2() bool {
	if o != nil && !IsNil(o.Keyword2) {
		return true
	}

	return false
}

// SetKeyword2 gets a reference to the given Keyword and assigns it to the Keyword2 field.
func (o *Context) SetKeyword2(v Keyword) {
	o.Keyword2 = &v
}

// GetRemark returns the Remark field value if set, zero value otherwise.
func (o *Context) GetRemark() Keyword {
	if o == nil || IsNil(o.Remark) {
		var ret Keyword
		return ret
	}
	return *o.Remark
}

// GetRemarkOk returns a tuple with the Remark field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Context) GetRemarkOk() (*Keyword, bool) {
	if o == nil || IsNil(o.Remark) {
		return nil, false
	}
	return o.Remark, true
}

// HasRemark returns a boolean if a field has been set.
func (o *Context) HasRemark() bool {
	if o != nil && !IsNil(o.Remark) {
		return true
	}

	return false
}

// SetRemark gets a reference to the given Keyword and assigns it to the Remark field.
func (o *Context) SetRemark(v Keyword) {
	o.Remark = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *Context) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Context) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *Context) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *Context) SetUrl(v string) {
	o.Url = &v
}

func (o Context) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Context) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ActionName) {
		toSerialize["action_name"] = o.ActionName
	}
	if !IsNil(o.First) {
		toSerialize["first"] = o.First
	}
	if !IsNil(o.HeadColor) {
		toSerialize["head_color"] = o.HeadColor
	}
	if !IsNil(o.Keyword1) {
		toSerialize["keyword1"] = o.Keyword1
	}
	if !IsNil(o.Keyword2) {
		toSerialize["keyword2"] = o.Keyword2
	}
	if !IsNil(o.Remark) {
		toSerialize["remark"] = o.Remark
	}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	return toSerialize, nil
}

type NullableContext struct {
	value *Context
	isSet bool
}

func (v NullableContext) Get() *Context {
	return v.value
}

func (v *NullableContext) Set(val *Context) {
	v.value = val
	v.isSet = true
}

func (v NullableContext) IsSet() bool {
	return v.isSet
}

func (v *NullableContext) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContext(val *Context) *NullableContext {
	return &NullableContext{value: val, isSet: true}
}

func (v NullableContext) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContext) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
