/*
支付宝开放平台API

支付宝开放平台v3协议文档

API version: 2024-07-05
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ActivityExchangeVoucher type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ActivityExchangeVoucher{}

// ActivityExchangeVoucher struct for ActivityExchangeVoucher
type ActivityExchangeVoucher struct {
	// 券的价值。
	Amount *string `json:"amount,omitempty"`
	// 门槛金额。说明：该字段可不填，认为无门槛;
	FloorAmount *string `json:"floor_amount,omitempty"`
	// 是否支持优惠券过期后，自动退款给用户。 不填默认否，枚举值： true：是 false：否  自动退款功能需要服务商在优惠券过期时，主动调用alipay.marketing.activity.order.refund接口进行退款。  如果配置优惠券时选择了过期自动退款，但是实际券过期后，服务商没有进行退款，那么用户投诉后，需要服务商进行解决。
	OverdueRefundable *bool `json:"overdue_refundable,omitempty"`
	// 购买的优惠券是否允许退款。 不填默认否，枚举值： true：是 false：否
	Refundable *bool `json:"refundable,omitempty"`
	// 用户购买优惠券需要支付的金额。
	SaleAmount *string `json:"sale_amount,omitempty"`
}

// NewActivityExchangeVoucher instantiates a new ActivityExchangeVoucher object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewActivityExchangeVoucher() *ActivityExchangeVoucher {
	this := ActivityExchangeVoucher{}
	return &this
}

// NewActivityExchangeVoucherWithDefaults instantiates a new ActivityExchangeVoucher object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewActivityExchangeVoucherWithDefaults() *ActivityExchangeVoucher {
	this := ActivityExchangeVoucher{}
	return &this
}

// GetAmount returns the Amount field value if set, zero value otherwise.
func (o *ActivityExchangeVoucher) GetAmount() string {
	if o == nil || IsNil(o.Amount) {
		var ret string
		return ret
	}
	return *o.Amount
}

// GetAmountOk returns a tuple with the Amount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityExchangeVoucher) GetAmountOk() (*string, bool) {
	if o == nil || IsNil(o.Amount) {
		return nil, false
	}
	return o.Amount, true
}

// HasAmount returns a boolean if a field has been set.
func (o *ActivityExchangeVoucher) HasAmount() bool {
	if o != nil && !IsNil(o.Amount) {
		return true
	}

	return false
}

// SetAmount gets a reference to the given string and assigns it to the Amount field.
func (o *ActivityExchangeVoucher) SetAmount(v string) {
	o.Amount = &v
}

// GetFloorAmount returns the FloorAmount field value if set, zero value otherwise.
func (o *ActivityExchangeVoucher) GetFloorAmount() string {
	if o == nil || IsNil(o.FloorAmount) {
		var ret string
		return ret
	}
	return *o.FloorAmount
}

// GetFloorAmountOk returns a tuple with the FloorAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityExchangeVoucher) GetFloorAmountOk() (*string, bool) {
	if o == nil || IsNil(o.FloorAmount) {
		return nil, false
	}
	return o.FloorAmount, true
}

// HasFloorAmount returns a boolean if a field has been set.
func (o *ActivityExchangeVoucher) HasFloorAmount() bool {
	if o != nil && !IsNil(o.FloorAmount) {
		return true
	}

	return false
}

// SetFloorAmount gets a reference to the given string and assigns it to the FloorAmount field.
func (o *ActivityExchangeVoucher) SetFloorAmount(v string) {
	o.FloorAmount = &v
}

// GetOverdueRefundable returns the OverdueRefundable field value if set, zero value otherwise.
func (o *ActivityExchangeVoucher) GetOverdueRefundable() bool {
	if o == nil || IsNil(o.OverdueRefundable) {
		var ret bool
		return ret
	}
	return *o.OverdueRefundable
}

// GetOverdueRefundableOk returns a tuple with the OverdueRefundable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityExchangeVoucher) GetOverdueRefundableOk() (*bool, bool) {
	if o == nil || IsNil(o.OverdueRefundable) {
		return nil, false
	}
	return o.OverdueRefundable, true
}

// HasOverdueRefundable returns a boolean if a field has been set.
func (o *ActivityExchangeVoucher) HasOverdueRefundable() bool {
	if o != nil && !IsNil(o.OverdueRefundable) {
		return true
	}

	return false
}

// SetOverdueRefundable gets a reference to the given bool and assigns it to the OverdueRefundable field.
func (o *ActivityExchangeVoucher) SetOverdueRefundable(v bool) {
	o.OverdueRefundable = &v
}

// GetRefundable returns the Refundable field value if set, zero value otherwise.
func (o *ActivityExchangeVoucher) GetRefundable() bool {
	if o == nil || IsNil(o.Refundable) {
		var ret bool
		return ret
	}
	return *o.Refundable
}

// GetRefundableOk returns a tuple with the Refundable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityExchangeVoucher) GetRefundableOk() (*bool, bool) {
	if o == nil || IsNil(o.Refundable) {
		return nil, false
	}
	return o.Refundable, true
}

// HasRefundable returns a boolean if a field has been set.
func (o *ActivityExchangeVoucher) HasRefundable() bool {
	if o != nil && !IsNil(o.Refundable) {
		return true
	}

	return false
}

// SetRefundable gets a reference to the given bool and assigns it to the Refundable field.
func (o *ActivityExchangeVoucher) SetRefundable(v bool) {
	o.Refundable = &v
}

// GetSaleAmount returns the SaleAmount field value if set, zero value otherwise.
func (o *ActivityExchangeVoucher) GetSaleAmount() string {
	if o == nil || IsNil(o.SaleAmount) {
		var ret string
		return ret
	}
	return *o.SaleAmount
}

// GetSaleAmountOk returns a tuple with the SaleAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityExchangeVoucher) GetSaleAmountOk() (*string, bool) {
	if o == nil || IsNil(o.SaleAmount) {
		return nil, false
	}
	return o.SaleAmount, true
}

// HasSaleAmount returns a boolean if a field has been set.
func (o *ActivityExchangeVoucher) HasSaleAmount() bool {
	if o != nil && !IsNil(o.SaleAmount) {
		return true
	}

	return false
}

// SetSaleAmount gets a reference to the given string and assigns it to the SaleAmount field.
func (o *ActivityExchangeVoucher) SetSaleAmount(v string) {
	o.SaleAmount = &v
}

func (o ActivityExchangeVoucher) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ActivityExchangeVoucher) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Amount) {
		toSerialize["amount"] = o.Amount
	}
	if !IsNil(o.FloorAmount) {
		toSerialize["floor_amount"] = o.FloorAmount
	}
	if !IsNil(o.OverdueRefundable) {
		toSerialize["overdue_refundable"] = o.OverdueRefundable
	}
	if !IsNil(o.Refundable) {
		toSerialize["refundable"] = o.Refundable
	}
	if !IsNil(o.SaleAmount) {
		toSerialize["sale_amount"] = o.SaleAmount
	}
	return toSerialize, nil
}

type NullableActivityExchangeVoucher struct {
	value *ActivityExchangeVoucher
	isSet bool
}

func (v NullableActivityExchangeVoucher) Get() *ActivityExchangeVoucher {
	return v.value
}

func (v *NullableActivityExchangeVoucher) Set(val *ActivityExchangeVoucher) {
	v.value = val
	v.isSet = true
}

func (v NullableActivityExchangeVoucher) IsSet() bool {
	return v.isSet
}

func (v *NullableActivityExchangeVoucher) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActivityExchangeVoucher(val *ActivityExchangeVoucher) *NullableActivityExchangeVoucher {
	return &NullableActivityExchangeVoucher{value: val, isSet: true}
}

func (v NullableActivityExchangeVoucher) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActivityExchangeVoucher) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


