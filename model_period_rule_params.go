/*
支付宝开放平台API

支付宝开放平台v3协议文档

API version: 2024-07-05
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the PeriodRuleParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PeriodRuleParams{}

// PeriodRuleParams struct for PeriodRuleParams
type PeriodRuleParams struct {
	// 首次执行时间execute_time是周期扣款产品必填，即商户发起首次扣款的时间。精确到日，格式为yyyy-MM-dd 结合其他必填的扣款周期参数，会确定商户以后的扣款计划。发起扣款的时间需符合这里的扣款计划。
	ExecuteTime *string `json:"execute_time,omitempty"`
	// 周期数period是周期扣款产品必填。与另一参数period_type组合使用确定扣款周期，例如period_type为DAY，period=90，则扣款周期为90天。
	Period *int32 `json:"period,omitempty"`
	// 周期类型period_type是周期扣款产品必填，枚举值为DAY和MONTH。 DAY即扣款周期按天计，MONTH代表扣款周期按自然月。 与另一参数period组合使用确定扣款周期，例如period_type为DAY，period=30，则扣款周期为30天；period_type为MONTH，period=3，则扣款周期为3个自然月。 自然月是指，不论这个月有多少天，周期都计算到月份中的同一日期。例如1月3日到2月3日为一个自然月，1月3日到4月3日为三个自然月。注意周期类型使用MONTH的时候，计划扣款时间execute_time不允许传28日之后的日期（可以传28日），以此避免有些月份可能不存在对应日期的情况。
	PeriodType *string `json:"period_type,omitempty"`
	// 单次扣款最大金额single_amount是周期扣款产品必填，即每次发起扣款时限制的最大金额，单位为元。商户每次发起扣款都不允许大于此金额。
	SingleAmount *string `json:"single_amount,omitempty"`
	// 总金额限制，单位为元。如果传入此参数，商户多次扣款的累计金额不允许超过此金额。
	TotalAmount *string `json:"total_amount,omitempty"`
	// 总扣款次数。如果传入此参数，则商户成功扣款的次数不能超过此次数限制（扣款失败不计入）。
	TotalPayments *int32 `json:"total_payments,omitempty"`
}

// NewPeriodRuleParams instantiates a new PeriodRuleParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPeriodRuleParams() *PeriodRuleParams {
	this := PeriodRuleParams{}
	return &this
}

// NewPeriodRuleParamsWithDefaults instantiates a new PeriodRuleParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPeriodRuleParamsWithDefaults() *PeriodRuleParams {
	this := PeriodRuleParams{}
	return &this
}

// GetExecuteTime returns the ExecuteTime field value if set, zero value otherwise.
func (o *PeriodRuleParams) GetExecuteTime() string {
	if o == nil || IsNil(o.ExecuteTime) {
		var ret string
		return ret
	}
	return *o.ExecuteTime
}

// GetExecuteTimeOk returns a tuple with the ExecuteTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PeriodRuleParams) GetExecuteTimeOk() (*string, bool) {
	if o == nil || IsNil(o.ExecuteTime) {
		return nil, false
	}
	return o.ExecuteTime, true
}

// HasExecuteTime returns a boolean if a field has been set.
func (o *PeriodRuleParams) HasExecuteTime() bool {
	if o != nil && !IsNil(o.ExecuteTime) {
		return true
	}

	return false
}

// SetExecuteTime gets a reference to the given string and assigns it to the ExecuteTime field.
func (o *PeriodRuleParams) SetExecuteTime(v string) {
	o.ExecuteTime = &v
}

// GetPeriod returns the Period field value if set, zero value otherwise.
func (o *PeriodRuleParams) GetPeriod() int32 {
	if o == nil || IsNil(o.Period) {
		var ret int32
		return ret
	}
	return *o.Period
}

// GetPeriodOk returns a tuple with the Period field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PeriodRuleParams) GetPeriodOk() (*int32, bool) {
	if o == nil || IsNil(o.Period) {
		return nil, false
	}
	return o.Period, true
}

// HasPeriod returns a boolean if a field has been set.
func (o *PeriodRuleParams) HasPeriod() bool {
	if o != nil && !IsNil(o.Period) {
		return true
	}

	return false
}

// SetPeriod gets a reference to the given int32 and assigns it to the Period field.
func (o *PeriodRuleParams) SetPeriod(v int32) {
	o.Period = &v
}

// GetPeriodType returns the PeriodType field value if set, zero value otherwise.
func (o *PeriodRuleParams) GetPeriodType() string {
	if o == nil || IsNil(o.PeriodType) {
		var ret string
		return ret
	}
	return *o.PeriodType
}

// GetPeriodTypeOk returns a tuple with the PeriodType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PeriodRuleParams) GetPeriodTypeOk() (*string, bool) {
	if o == nil || IsNil(o.PeriodType) {
		return nil, false
	}
	return o.PeriodType, true
}

// HasPeriodType returns a boolean if a field has been set.
func (o *PeriodRuleParams) HasPeriodType() bool {
	if o != nil && !IsNil(o.PeriodType) {
		return true
	}

	return false
}

// SetPeriodType gets a reference to the given string and assigns it to the PeriodType field.
func (o *PeriodRuleParams) SetPeriodType(v string) {
	o.PeriodType = &v
}

// GetSingleAmount returns the SingleAmount field value if set, zero value otherwise.
func (o *PeriodRuleParams) GetSingleAmount() string {
	if o == nil || IsNil(o.SingleAmount) {
		var ret string
		return ret
	}
	return *o.SingleAmount
}

// GetSingleAmountOk returns a tuple with the SingleAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PeriodRuleParams) GetSingleAmountOk() (*string, bool) {
	if o == nil || IsNil(o.SingleAmount) {
		return nil, false
	}
	return o.SingleAmount, true
}

// HasSingleAmount returns a boolean if a field has been set.
func (o *PeriodRuleParams) HasSingleAmount() bool {
	if o != nil && !IsNil(o.SingleAmount) {
		return true
	}

	return false
}

// SetSingleAmount gets a reference to the given string and assigns it to the SingleAmount field.
func (o *PeriodRuleParams) SetSingleAmount(v string) {
	o.SingleAmount = &v
}

// GetTotalAmount returns the TotalAmount field value if set, zero value otherwise.
func (o *PeriodRuleParams) GetTotalAmount() string {
	if o == nil || IsNil(o.TotalAmount) {
		var ret string
		return ret
	}
	return *o.TotalAmount
}

// GetTotalAmountOk returns a tuple with the TotalAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PeriodRuleParams) GetTotalAmountOk() (*string, bool) {
	if o == nil || IsNil(o.TotalAmount) {
		return nil, false
	}
	return o.TotalAmount, true
}

// HasTotalAmount returns a boolean if a field has been set.
func (o *PeriodRuleParams) HasTotalAmount() bool {
	if o != nil && !IsNil(o.TotalAmount) {
		return true
	}

	return false
}

// SetTotalAmount gets a reference to the given string and assigns it to the TotalAmount field.
func (o *PeriodRuleParams) SetTotalAmount(v string) {
	o.TotalAmount = &v
}

// GetTotalPayments returns the TotalPayments field value if set, zero value otherwise.
func (o *PeriodRuleParams) GetTotalPayments() int32 {
	if o == nil || IsNil(o.TotalPayments) {
		var ret int32
		return ret
	}
	return *o.TotalPayments
}

// GetTotalPaymentsOk returns a tuple with the TotalPayments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PeriodRuleParams) GetTotalPaymentsOk() (*int32, bool) {
	if o == nil || IsNil(o.TotalPayments) {
		return nil, false
	}
	return o.TotalPayments, true
}

// HasTotalPayments returns a boolean if a field has been set.
func (o *PeriodRuleParams) HasTotalPayments() bool {
	if o != nil && !IsNil(o.TotalPayments) {
		return true
	}

	return false
}

// SetTotalPayments gets a reference to the given int32 and assigns it to the TotalPayments field.
func (o *PeriodRuleParams) SetTotalPayments(v int32) {
	o.TotalPayments = &v
}

func (o PeriodRuleParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PeriodRuleParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ExecuteTime) {
		toSerialize["execute_time"] = o.ExecuteTime
	}
	if !IsNil(o.Period) {
		toSerialize["period"] = o.Period
	}
	if !IsNil(o.PeriodType) {
		toSerialize["period_type"] = o.PeriodType
	}
	if !IsNil(o.SingleAmount) {
		toSerialize["single_amount"] = o.SingleAmount
	}
	if !IsNil(o.TotalAmount) {
		toSerialize["total_amount"] = o.TotalAmount
	}
	if !IsNil(o.TotalPayments) {
		toSerialize["total_payments"] = o.TotalPayments
	}
	return toSerialize, nil
}

type NullablePeriodRuleParams struct {
	value *PeriodRuleParams
	isSet bool
}

func (v NullablePeriodRuleParams) Get() *PeriodRuleParams {
	return v.value
}

func (v *NullablePeriodRuleParams) Set(val *PeriodRuleParams) {
	v.value = val
	v.isSet = true
}

func (v NullablePeriodRuleParams) IsSet() bool {
	return v.isSet
}

func (v *NullablePeriodRuleParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePeriodRuleParams(val *PeriodRuleParams) *NullablePeriodRuleParams {
	return &NullablePeriodRuleParams{value: val, isSet: true}
}

func (v NullablePeriodRuleParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePeriodRuleParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


