/*
支付宝开放平台API

支付宝开放平台v3协议文档

API version: 2024-07-05
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alipay

import (
	"encoding/json"
)

// checks if the HbFqPayInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HbFqPayInfo{}

// HbFqPayInfo struct for HbFqPayInfo
type HbFqPayInfo struct {
	// 用户使用花呗分期支付的金额数。单位：元。
	FqAmount *string `json:"fq_amount,omitempty"`
	// 用户使用花呗分期支付的分期数
	UserInstallNum *string `json:"user_install_num,omitempty"`
}

// NewHbFqPayInfo instantiates a new HbFqPayInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHbFqPayInfo() *HbFqPayInfo {
	this := HbFqPayInfo{}
	return &this
}

// NewHbFqPayInfoWithDefaults instantiates a new HbFqPayInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHbFqPayInfoWithDefaults() *HbFqPayInfo {
	this := HbFqPayInfo{}
	return &this
}

// GetFqAmount returns the FqAmount field value if set, zero value otherwise.
func (o *HbFqPayInfo) GetFqAmount() string {
	if o == nil || IsNil(o.FqAmount) {
		var ret string
		return ret
	}
	return *o.FqAmount
}

// GetFqAmountOk returns a tuple with the FqAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HbFqPayInfo) GetFqAmountOk() (*string, bool) {
	if o == nil || IsNil(o.FqAmount) {
		return nil, false
	}
	return o.FqAmount, true
}

// HasFqAmount returns a boolean if a field has been set.
func (o *HbFqPayInfo) HasFqAmount() bool {
	if o != nil && !IsNil(o.FqAmount) {
		return true
	}

	return false
}

// SetFqAmount gets a reference to the given string and assigns it to the FqAmount field.
func (o *HbFqPayInfo) SetFqAmount(v string) {
	o.FqAmount = &v
}

// GetUserInstallNum returns the UserInstallNum field value if set, zero value otherwise.
func (o *HbFqPayInfo) GetUserInstallNum() string {
	if o == nil || IsNil(o.UserInstallNum) {
		var ret string
		return ret
	}
	return *o.UserInstallNum
}

// GetUserInstallNumOk returns a tuple with the UserInstallNum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HbFqPayInfo) GetUserInstallNumOk() (*string, bool) {
	if o == nil || IsNil(o.UserInstallNum) {
		return nil, false
	}
	return o.UserInstallNum, true
}

// HasUserInstallNum returns a boolean if a field has been set.
func (o *HbFqPayInfo) HasUserInstallNum() bool {
	if o != nil && !IsNil(o.UserInstallNum) {
		return true
	}

	return false
}

// SetUserInstallNum gets a reference to the given string and assigns it to the UserInstallNum field.
func (o *HbFqPayInfo) SetUserInstallNum(v string) {
	o.UserInstallNum = &v
}

func (o HbFqPayInfo) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HbFqPayInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FqAmount) {
		toSerialize["fq_amount"] = o.FqAmount
	}
	if !IsNil(o.UserInstallNum) {
		toSerialize["user_install_num"] = o.UserInstallNum
	}
	return toSerialize, nil
}

type NullableHbFqPayInfo struct {
	value *HbFqPayInfo
	isSet bool
}

func (v NullableHbFqPayInfo) Get() *HbFqPayInfo {
	return v.value
}

func (v *NullableHbFqPayInfo) Set(val *HbFqPayInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableHbFqPayInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableHbFqPayInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHbFqPayInfo(val *HbFqPayInfo) *NullableHbFqPayInfo {
	return &NullableHbFqPayInfo{value: val, isSet: true}
}

func (v NullableHbFqPayInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHbFqPayInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
