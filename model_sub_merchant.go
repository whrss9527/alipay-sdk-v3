/*
支付宝开放平台API

支付宝开放平台v3协议文档

API version: 2024-07-05
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alipay

import (
	"encoding/json"
)

// checks if the SubMerchant type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SubMerchant{}

// SubMerchant struct for SubMerchant
type SubMerchant struct {
	// 支付宝二级商户编号。 间连受理商户的支付宝商户编号，通过间连商户入驻接口后由支付宝生成。 直付通和机构间连业务场景下必传。
	MerchantId *string `json:"merchant_id,omitempty"`
	// 二级商户编号类型。 枚举值： alipay:支付宝分配的间联商户编号； 目前仅支持alipay，默认可以不传。
	MerchantType *string `json:"merchant_type,omitempty"`
}

// NewSubMerchant instantiates a new SubMerchant object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubMerchant() *SubMerchant {
	this := SubMerchant{}
	return &this
}

// NewSubMerchantWithDefaults instantiates a new SubMerchant object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubMerchantWithDefaults() *SubMerchant {
	this := SubMerchant{}
	return &this
}

// GetMerchantId returns the MerchantId field value if set, zero value otherwise.
func (o *SubMerchant) GetMerchantId() string {
	if o == nil || IsNil(o.MerchantId) {
		var ret string
		return ret
	}
	return *o.MerchantId
}

// GetMerchantIdOk returns a tuple with the MerchantId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubMerchant) GetMerchantIdOk() (*string, bool) {
	if o == nil || IsNil(o.MerchantId) {
		return nil, false
	}
	return o.MerchantId, true
}

// HasMerchantId returns a boolean if a field has been set.
func (o *SubMerchant) HasMerchantId() bool {
	if o != nil && !IsNil(o.MerchantId) {
		return true
	}

	return false
}

// SetMerchantId gets a reference to the given string and assigns it to the MerchantId field.
func (o *SubMerchant) SetMerchantId(v string) {
	o.MerchantId = &v
}

// GetMerchantType returns the MerchantType field value if set, zero value otherwise.
func (o *SubMerchant) GetMerchantType() string {
	if o == nil || IsNil(o.MerchantType) {
		var ret string
		return ret
	}
	return *o.MerchantType
}

// GetMerchantTypeOk returns a tuple with the MerchantType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubMerchant) GetMerchantTypeOk() (*string, bool) {
	if o == nil || IsNil(o.MerchantType) {
		return nil, false
	}
	return o.MerchantType, true
}

// HasMerchantType returns a boolean if a field has been set.
func (o *SubMerchant) HasMerchantType() bool {
	if o != nil && !IsNil(o.MerchantType) {
		return true
	}

	return false
}

// SetMerchantType gets a reference to the given string and assigns it to the MerchantType field.
func (o *SubMerchant) SetMerchantType(v string) {
	o.MerchantType = &v
}

func (o SubMerchant) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SubMerchant) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MerchantId) {
		toSerialize["merchant_id"] = o.MerchantId
	}
	if !IsNil(o.MerchantType) {
		toSerialize["merchant_type"] = o.MerchantType
	}
	return toSerialize, nil
}

type NullableSubMerchant struct {
	value *SubMerchant
	isSet bool
}

func (v NullableSubMerchant) Get() *SubMerchant {
	return v.value
}

func (v *NullableSubMerchant) Set(val *SubMerchant) {
	v.value = val
	v.isSet = true
}

func (v NullableSubMerchant) IsSet() bool {
	return v.isSet
}

func (v *NullableSubMerchant) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubMerchant(val *SubMerchant) *NullableSubMerchant {
	return &NullableSubMerchant{value: val, isSet: true}
}

func (v NullableSubMerchant) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubMerchant) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
