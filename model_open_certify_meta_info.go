/*
支付宝开放平台API

支付宝开放平台v3协议文档

API version: 2024-07-05
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the OpenCertifyMetaInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OpenCertifyMetaInfo{}

// OpenCertifyMetaInfo struct for OpenCertifyMetaInfo
type OpenCertifyMetaInfo struct {
	// 设备操作系统类型
	DeviceType *string `json:"device_type,omitempty"`
}

// NewOpenCertifyMetaInfo instantiates a new OpenCertifyMetaInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOpenCertifyMetaInfo() *OpenCertifyMetaInfo {
	this := OpenCertifyMetaInfo{}
	return &this
}

// NewOpenCertifyMetaInfoWithDefaults instantiates a new OpenCertifyMetaInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOpenCertifyMetaInfoWithDefaults() *OpenCertifyMetaInfo {
	this := OpenCertifyMetaInfo{}
	return &this
}

// GetDeviceType returns the DeviceType field value if set, zero value otherwise.
func (o *OpenCertifyMetaInfo) GetDeviceType() string {
	if o == nil || IsNil(o.DeviceType) {
		var ret string
		return ret
	}
	return *o.DeviceType
}

// GetDeviceTypeOk returns a tuple with the DeviceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpenCertifyMetaInfo) GetDeviceTypeOk() (*string, bool) {
	if o == nil || IsNil(o.DeviceType) {
		return nil, false
	}
	return o.DeviceType, true
}

// HasDeviceType returns a boolean if a field has been set.
func (o *OpenCertifyMetaInfo) HasDeviceType() bool {
	if o != nil && !IsNil(o.DeviceType) {
		return true
	}

	return false
}

// SetDeviceType gets a reference to the given string and assigns it to the DeviceType field.
func (o *OpenCertifyMetaInfo) SetDeviceType(v string) {
	o.DeviceType = &v
}

func (o OpenCertifyMetaInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OpenCertifyMetaInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DeviceType) {
		toSerialize["device_type"] = o.DeviceType
	}
	return toSerialize, nil
}

type NullableOpenCertifyMetaInfo struct {
	value *OpenCertifyMetaInfo
	isSet bool
}

func (v NullableOpenCertifyMetaInfo) Get() *OpenCertifyMetaInfo {
	return v.value
}

func (v *NullableOpenCertifyMetaInfo) Set(val *OpenCertifyMetaInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableOpenCertifyMetaInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableOpenCertifyMetaInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOpenCertifyMetaInfo(val *OpenCertifyMetaInfo) *NullableOpenCertifyMetaInfo {
	return &NullableOpenCertifyMetaInfo{value: val, isSet: true}
}

func (v NullableOpenCertifyMetaInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOpenCertifyMetaInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


