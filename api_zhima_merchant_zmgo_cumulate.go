/*
支付宝开放平台API

支付宝开放平台v3协议文档

API version: 2024-07-05
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strconv"
	"time"
)


// ZhimaMerchantZmgoCumulateAPIService ZhimaMerchantZmgoCumulateAPI service
type ZhimaMerchantZmgoCumulateAPIService service

type ApiZhimaMerchantZmgoCumulateQueryRequest struct {
	ctx context.Context
	ApiService *ZhimaMerchantZmgoCumulateAPIService
	agreementId *string
	userId *string
	openId *string
	providerPid *string
	needDetail *bool
	pageNo *int32
	pageSize *int32
}

// 芝麻go协议号，唯一标识一个芝麻go协议。
func (r ApiZhimaMerchantZmgoCumulateQueryRequest) AgreementId(agreementId string) ApiZhimaMerchantZmgoCumulateQueryRequest {
	r.agreementId = &agreementId
	return r
}

// 用户 id，用户在支付宝的唯一标识，以 2088 开头的 16 位纯数字组成。
func (r ApiZhimaMerchantZmgoCumulateQueryRequest) UserId(userId string) ApiZhimaMerchantZmgoCumulateQueryRequest {
	r.userId = &userId
	return r
}

// 用户 id，用户在支付宝的唯一标识，以 2088 开头的 16 位纯数字组成。
func (r ApiZhimaMerchantZmgoCumulateQueryRequest) OpenId(openId string) ApiZhimaMerchantZmgoCumulateQueryRequest {
	r.openId = &openId
	return r
}

// 数据回传的商户 ID，即和用户发生业务来往的 PID 主体。商户账号在支付宝的唯一标识，以 2088 开头的 16 位纯数字组成。
func (r ApiZhimaMerchantZmgoCumulateQueryRequest) ProviderPid(providerPid string) ApiZhimaMerchantZmgoCumulateQueryRequest {
	r.providerPid = &providerPid
	return r
}

// 是否需要回传明细。枚举支持： * true：需要回传明细。 * false：不需要回传明细。
func (r ApiZhimaMerchantZmgoCumulateQueryRequest) NeedDetail(needDetail bool) ApiZhimaMerchantZmgoCumulateQueryRequest {
	r.needDetail = &needDetail
	return r
}

// 分页参数，当need_detail&#x3D;true时需要，代表当前页数，从1开始。
func (r ApiZhimaMerchantZmgoCumulateQueryRequest) PageNo(pageNo int32) ApiZhimaMerchantZmgoCumulateQueryRequest {
	r.pageNo = &pageNo
	return r
}

// 分页参数，当need_detail&#x3D;true时需要，代表每页大小，不能大于20。
func (r ApiZhimaMerchantZmgoCumulateQueryRequest) PageSize(pageSize int32) ApiZhimaMerchantZmgoCumulateQueryRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiZhimaMerchantZmgoCumulateQueryRequest) Execute() (*ZhimaMerchantZmgoCumulateQueryResponseModel, *http.Response, error) {
	return r.ApiService.ZhimaMerchantZmgoCumulateQueryExecute(r)
}

/*
ZhimaMerchantZmgoCumulateQuery 商家芝麻GO累计数据查询接口

芝麻GO数据累计查询接口，包含汇总和明细信息

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiZhimaMerchantZmgoCumulateQueryRequest
*/
func (r *ZhimaMerchantZmgoCumulateAPIService) ZhimaMerchantZmgoCumulateQuery(ctx context.Context) ApiZhimaMerchantZmgoCumulateQueryRequest {
	return ApiZhimaMerchantZmgoCumulateQueryRequest{
		ApiService: r,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ZhimaMerchantZmgoCumulateQueryResponseModel
func (a *ZhimaMerchantZmgoCumulateAPIService) ZhimaMerchantZmgoCumulateQueryExecute(r ApiZhimaMerchantZmgoCumulateQueryRequest) (*ZhimaMerchantZmgoCumulateQueryResponseModel, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ZhimaMerchantZmgoCumulateQueryResponseModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ZhimaMerchantZmgoCumulateAPIService.ZhimaMerchantZmgoCumulateQuery")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/zhima/merchant/zmgo/cumulate/query"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}


	if r.agreementId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "agreement_id", r.agreementId, "form", "")
	}
	if r.userId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "user_id", r.userId, "form", "")
	}
	if r.openId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "open_id", r.openId, "form", "")
	}
	if r.providerPid != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "provider_pid", r.providerPid, "form", "")
	}
	if r.needDetail != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "need_detail", r.needDetail, "form", "")
	}
	if r.pageNo != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page_no", r.pageNo, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page_size", r.pageSize, "form", "")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	// Add signing logic
	err = a.signRequest(req)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	// Add verification logic
	err = a.verifyResponse(localVarHTTPResponse, localVarBody)
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v ZhimaMerchantZmgoCumulateQueryDefaultResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}


type ApiZhimaMerchantZmgoCumulateSyncRequest struct {
	ctx context.Context
	ApiService *ZhimaMerchantZmgoCumulateAPIService
	zhimaMerchantZmgoCumulateSyncModel *ZhimaMerchantZmgoCumulateSyncModel
}

func (r ApiZhimaMerchantZmgoCumulateSyncRequest) ZhimaMerchantZmgoCumulateSyncModel(zhimaMerchantZmgoCumulateSyncModel ZhimaMerchantZmgoCumulateSyncModel) ApiZhimaMerchantZmgoCumulateSyncRequest {
	r.zhimaMerchantZmgoCumulateSyncModel = &zhimaMerchantZmgoCumulateSyncModel
	return r
}

func (r ApiZhimaMerchantZmgoCumulateSyncRequest) Execute() (*ZhimaMerchantZmgoCumulateSyncResponseModel, *http.Response, error) {
	return r.ApiService.ZhimaMerchantZmgoCumulateSyncExecute(r)
}

/*
ZhimaMerchantZmgoCumulateSync 商家芝麻GO累计数据回传接口

外部商家接入芝麻GO场景下，回传用户行为履约数据给芝麻。

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiZhimaMerchantZmgoCumulateSyncRequest
*/
func (r *ZhimaMerchantZmgoCumulateAPIService) ZhimaMerchantZmgoCumulateSync(ctx context.Context) ApiZhimaMerchantZmgoCumulateSyncRequest {
	return ApiZhimaMerchantZmgoCumulateSyncRequest{
		ApiService: r,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ZhimaMerchantZmgoCumulateSyncResponseModel
func (a *ZhimaMerchantZmgoCumulateAPIService) ZhimaMerchantZmgoCumulateSyncExecute(r ApiZhimaMerchantZmgoCumulateSyncRequest) (*ZhimaMerchantZmgoCumulateSyncResponseModel, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ZhimaMerchantZmgoCumulateSyncResponseModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ZhimaMerchantZmgoCumulateAPIService.ZhimaMerchantZmgoCumulateSync")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/zhima/merchant/zmgo/cumulate/sync"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}



	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.zhimaMerchantZmgoCumulateSyncModel

	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	// Add signing logic
	err = a.signRequest(req)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	// Add verification logic
	err = a.verifyResponse(localVarHTTPResponse, localVarBody)
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v ZhimaMerchantZmgoCumulateSyncDefaultResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}


func (a *ZhimaMerchantZmgoCumulateAPIService) signRequest(req *http.Request) error {
	appID := a.client.cfg.AppID
	appCertSN := a.client.cfg.AppCertSN
	privateKey := a.client.cfg.PrivateKey

	nonce := generateUUID()
	timestamp := strconv.FormatInt(time.Now().UnixNano()/1e6, 10)

	authString := fmt.Sprintf("app_id=%s", appID)
	if appCertSN != "" {
		authString += fmt.Sprintf(",app_cert_sn=%s", appCertSN)
	}
	authString += fmt.Sprintf(",nonce=%s,timestamp=%s", nonce, timestamp)

	httpMethod := req.Method
	httpRequestUri := req.URL.Path
	if req.URL.RawQuery != "" {
		httpRequestUri += "?" + req.URL.RawQuery
	}

	var httpRequestBody string
	if req.Body != nil {
		bodyBytes, err := io.ReadAll(req.Body)
		if err != nil {
			return err
		}
		httpRequestBody = string(bodyBytes)
		req.Body = io.NopCloser(bytes.NewBuffer(bodyBytes))
	}

	content := authString + "\n" +
		httpMethod + "\n" +
		httpRequestUri + "\n" +
		httpRequestBody + "\n"

	if appAuthToken := req.Header.Get("alipay-app-auth-token"); appAuthToken != "" {
		content += appAuthToken + "\n"
	}

	signature, err := signWithRSA(content, privateKey)
	if err != nil {
		return err
	}

	req.Header.Set("Authorization", fmt.Sprintf("ALIPAY-SHA256withRSA %s,sign=%s", authString, signature))
	return nil
}

func (a *ZhimaMerchantZmgoCumulateAPIService) verifyResponse(resp *http.Response, body []byte) error {
	timestamp := resp.Header.Get("alipay-timestamp")
	nonce := resp.Header.Get("alipay-nonce")
	sign := resp.Header.Get("alipay-signature")

	content := timestamp + "\n" +
		nonce + "\n" +
		string(body) + "\n"

	publicKey := a.client.cfg.PublicKey

	return verifyWithRSA(content, sign, publicKey)
}


