/*
支付宝开放平台API

支付宝开放平台v3协议文档

API version: 2024-07-05
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alipay

import (
	"bytes"
	"context"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strconv"
	"time"
)

// AlipayOpenSpOperationResultAPIService AlipayOpenSpOperationResultAPI service
type AlipayOpenSpOperationResultAPIService service

type ApiAlipayOpenSpOperationResultQueryRequest struct {
	ctx                 context.Context
	ApiService          *AlipayOpenSpOperationResultAPIService
	operateType         *string
	batchNo             *string
	accessProductCode   *string
	merchantNo          *string
	alipayAccount       *string
	isvScenePermissions *string
}

// 代运营操作类型。取值如下 ACCOUNT_BIND：账号绑定； OPERATION_AUTH：代运营授权。
func (r ApiAlipayOpenSpOperationResultQueryRequest) OperateType(operateType string) ApiAlipayOpenSpOperationResultQueryRequest {
	r.operateType = &operateType
	return r
}

// 支付宝操作批次号。 batch_no提供基于操作批次的精确查询，只查询本操作批次的代运营操作结果，不反映最终代运营操作结果。 注意： 1.access_product_code、merchant_no、alipay_account三个参数组合与传入 batch_no 为两种查询方式，不可同时为空且以 batch_no 优先。 2.access_product_code、merchant_no、alipay_account三个参数组合可以查询最终代运营操作结果。
func (r ApiAlipayOpenSpOperationResultQueryRequest) BatchNo(batchNo string) ApiAlipayOpenSpOperationResultQueryRequest {
	r.batchNo = &batchNo
	return r
}

// 接入的产品编号。未传batch_no时必填，枚举如下： OPENAPI_BIND_DEFAULT：操作类型为账号绑定； OPENAPI_AUTH_DEFAULT：操作类型为代运营授权。
func (r ApiAlipayOpenSpOperationResultQueryRequest) AccessProductCode(accessProductCode string) ApiAlipayOpenSpOperationResultQueryRequest {
	r.accessProductCode = &accessProductCode
	return r
}

// 支付宝商户号。支持间连、直连商户，值为2088开头。 未传batch_no时需注意： 若查询间连商户则 merchant_no 必填；  若查询直连商户，则merchant_no和alipay_account不能同时为空，都有值优先取merchant_no。
func (r ApiAlipayOpenSpOperationResultQueryRequest) MerchantNo(merchantNo string) ApiAlipayOpenSpOperationResultQueryRequest {
	r.merchantNo = &merchantNo
	return r
}

// 支付宝登录账号，通常为手机号或者邮箱。未传batch_no时需注意： 1.当查询merchant_no为间连商户时：   * 若 operate_type&#x3D;ACCOUNT_BIND，则alipay_account必填。   * 若 operate_type&#x3D;OPERATION_AUTH，则alipay_account无需传入。 2.当查询merchant_no为直连商户时：   * merchant_no和alipay_account不能同时为空，都有值优先取merchant_no。
func (r ApiAlipayOpenSpOperationResultQueryRequest) AlipayAccount(alipayAccount string) ApiAlipayOpenSpOperationResultQueryRequest {
	r.alipayAccount = &alipayAccount
	return r
}

// 场景授权列表结构结构：场景codeA:权限code1,权限code2;场景codeB:权限code1,权限code2;
func (r ApiAlipayOpenSpOperationResultQueryRequest) IsvScenePermissions(isvScenePermissions string) ApiAlipayOpenSpOperationResultQueryRequest {
	r.isvScenePermissions = &isvScenePermissions
	return r
}

func (r ApiAlipayOpenSpOperationResultQueryRequest) Execute() (*AlipayOpenSpOperationResultQueryResponseModel, *http.Response, error) {
	return r.ApiService.AlipayOpenSpOperationResultQueryExecute(r)
}

/*
AlipayOpenSpOperationResultQuery 查询服务商代运营操作结果

查询服务商代运营操作（代运营授权或者账号绑定）结果。提供两种查询方式：
方式一：operate_type + batch_no，提供基于操作批次的精确查询，只查询本操作批次的代运营操作结果，不反映最终代运营操作结果。 方式一查询方式优先级更高。
方式二：operate_type + access_product_code + merchant_no + alipay_account 参数组合，可以查询代运营操作最终结果，任意一个操作批次成功都会体现在最终结果中。
方式三：operate_type + isv_scene_permissions + merchant_no + alipay_account 参数组合，可以查询代运营操作最终结果，任意一个操作批次成功都会体现在最终结果中（仅支持查询授权结果）。

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiAlipayOpenSpOperationResultQueryRequest
*/
func (r *AlipayOpenSpOperationResultAPIService) AlipayOpenSpOperationResultQuery(ctx context.Context) ApiAlipayOpenSpOperationResultQueryRequest {
	return ApiAlipayOpenSpOperationResultQueryRequest{
		ApiService: r,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return AlipayOpenSpOperationResultQueryResponseModel
func (a *AlipayOpenSpOperationResultAPIService) AlipayOpenSpOperationResultQueryExecute(r ApiAlipayOpenSpOperationResultQueryRequest) (*AlipayOpenSpOperationResultQueryResponseModel, *http.Response, error) {
	err := a.client.prepareConfig()
	if err != nil {
		return nil, nil, &GenericOpenAPIError{error: err.Error()}
	}
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *AlipayOpenSpOperationResultQueryResponseModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AlipayOpenSpOperationResultAPIService.AlipayOpenSpOperationResultQuery")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/alipay/open/sp/operation/result/query"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.operateType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "operate_type", r.operateType, "form", "")
	}
	if r.batchNo != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "batch_no", r.batchNo, "form", "")
	}
	if r.accessProductCode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "access_product_code", r.accessProductCode, "form", "")
	}
	if r.merchantNo != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "merchant_no", r.merchantNo, "form", "")
	}
	if r.alipayAccount != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "alipay_account", r.alipayAccount, "form", "")
	}
	if r.isvScenePermissions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "isv_scene_permissions", r.isvScenePermissions, "form", "")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	// Add signing logic
	err = a.signRequest(req)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	// Add verification logic
	err = a.verifyResponse(localVarHTTPResponse, localVarBody)
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v AlipayOpenSpOperationResultQueryDefaultResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

func (a *AlipayOpenSpOperationResultAPIService) signRequest(req *http.Request) error {
	appID := a.client.cfg.AppID
	appCertSN := a.client.cfg.AppCertSN
	nonce := generateUUID()
	timestamp := strconv.FormatInt(time.Now().UnixNano()/1e6, 10)

	authString := fmt.Sprintf("app_id=%s", appID)
	if appCertSN != "" {
		authString += fmt.Sprintf(",app_cert_sn=%s", appCertSN)
	}
	authString += fmt.Sprintf(",nonce=%s,timestamp=%s", nonce, timestamp)

	httpMethod := req.Method
	httpRequestUri := req.URL.Path
	if req.URL.RawQuery != "" {
		httpRequestUri += "?" + req.URL.RawQuery
	}

	var httpRequestBody string
	if req.Body != nil {
		bodyBytes, err := io.ReadAll(req.Body)
		if err != nil {
			return err
		}
		httpRequestBody = string(bodyBytes)
		req.Body = io.NopCloser(bytes.NewBuffer(bodyBytes))
	}

	content := authString + "\n" +
		httpMethod + "\n" +
		httpRequestUri + "\n" +
		httpRequestBody + "\n"

	if appAuthToken := req.Header.Get("alipay-app-auth-token"); appAuthToken != "" {
		content += appAuthToken + "\n"
	}

	signature, err := signWithRSA(content, a.client.cfg.privateKey)
	if err != nil {
		return err
	}

	req.Header.Set("Authorization", fmt.Sprintf("ALIPAY-SHA256withRSA %s,sign=%s", authString, signature))
	return nil
}

func (a *AlipayOpenSpOperationResultAPIService) verifyResponse(resp *http.Response, body []byte) error {
	timestamp := resp.Header.Get("alipay-timestamp")
	nonce := resp.Header.Get("alipay-nonce")
	sign := resp.Header.Get("alipay-signature")

	content := timestamp + "\n" +
		nonce + "\n" +
		string(body) + "\n"

	return verifyWithRSA(content, sign, a.client.cfg.publicKey)
}
