/*
支付宝开放平台API

支付宝开放平台v3协议文档

API version: 2024-07-05
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alipay

import (
	"bytes"
	"context"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strconv"
	"time"
)

// AlipayPcreditHuabeiAuthAgreementAPIService AlipayPcreditHuabeiAuthAgreementAPI service
type AlipayPcreditHuabeiAuthAgreementAPIService service

type ApiAlipayPcreditHuabeiAuthAgreementCloseRequest struct {
	ctx                                        context.Context
	ApiService                                 *AlipayPcreditHuabeiAuthAgreementAPIService
	alipayPcreditHuabeiAuthAgreementCloseModel *AlipayPcreditHuabeiAuthAgreementCloseModel
}

func (r ApiAlipayPcreditHuabeiAuthAgreementCloseRequest) AlipayPcreditHuabeiAuthAgreementCloseModel(alipayPcreditHuabeiAuthAgreementCloseModel AlipayPcreditHuabeiAuthAgreementCloseModel) ApiAlipayPcreditHuabeiAuthAgreementCloseRequest {
	r.alipayPcreditHuabeiAuthAgreementCloseModel = &alipayPcreditHuabeiAuthAgreementCloseModel
	return r
}

func (r ApiAlipayPcreditHuabeiAuthAgreementCloseRequest) Execute() (*AlipayPcreditHuabeiAuthAgreementCloseResponseModel, *http.Response, error) {
	return r.ApiService.AlipayPcreditHuabeiAuthAgreementCloseExecute(r)
}

/*
AlipayPcreditHuabeiAuthAgreementClose 花芝协议关闭接口

用户已经开通花芝先享后，商户可通过此接口提前关闭协议。

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiAlipayPcreditHuabeiAuthAgreementCloseRequest
*/
func (r *AlipayPcreditHuabeiAuthAgreementAPIService) AlipayPcreditHuabeiAuthAgreementClose(ctx context.Context) ApiAlipayPcreditHuabeiAuthAgreementCloseRequest {
	return ApiAlipayPcreditHuabeiAuthAgreementCloseRequest{
		ApiService: r,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return AlipayPcreditHuabeiAuthAgreementCloseResponseModel
func (a *AlipayPcreditHuabeiAuthAgreementAPIService) AlipayPcreditHuabeiAuthAgreementCloseExecute(r ApiAlipayPcreditHuabeiAuthAgreementCloseRequest) (*AlipayPcreditHuabeiAuthAgreementCloseResponseModel, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *AlipayPcreditHuabeiAuthAgreementCloseResponseModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AlipayPcreditHuabeiAuthAgreementAPIService.AlipayPcreditHuabeiAuthAgreementClose")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/alipay/pcredit/huabei/auth/agreement/close"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.alipayPcreditHuabeiAuthAgreementCloseModel

	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	// Add signing logic
	err = a.signRequest(req)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	// Add verification logic
	err = a.verifyResponse(localVarHTTPResponse, localVarBody)
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v AlipayPcreditHuabeiAuthAgreementCloseDefaultResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAlipayPcreditHuabeiAuthAgreementQueryRequest struct {
	ctx          context.Context
	ApiService   *AlipayPcreditHuabeiAuthAgreementAPIService
	agreementNo  *string
	alipayUserId *string
	openId       *string
	outSignNo    *string
	authScene    *string
}

// 支付宝系统中用以唯一标识用户签约记录的编号，即花芝轻会员。传入该参数，会忽略其它所有参数。
func (r ApiAlipayPcreditHuabeiAuthAgreementQueryRequest) AgreementNo(agreementNo string) ApiAlipayPcreditHuabeiAuthAgreementQueryRequest {
	r.agreementNo = &agreementNo
	return r
}

// 买家在支付宝的用户id
func (r ApiAlipayPcreditHuabeiAuthAgreementQueryRequest) AlipayUserId(alipayUserId string) ApiAlipayPcreditHuabeiAuthAgreementQueryRequest {
	r.alipayUserId = &alipayUserId
	return r
}

// 买家在支付宝的用户id
func (r ApiAlipayPcreditHuabeiAuthAgreementQueryRequest) OpenId(openId string) ApiAlipayPcreditHuabeiAuthAgreementQueryRequest {
	r.openId = &openId
	return r
}

// 外部签约号，由商户提供，花芝轻会员协议中标识用户的唯一签约号（确保在商户系统中唯一）。
func (r ApiAlipayPcreditHuabeiAuthAgreementQueryRequest) OutSignNo(outSignNo string) ApiAlipayPcreditHuabeiAuthAgreementQueryRequest {
	r.outSignNo = &outSignNo
	return r
}

// 花芝轻会员签约场景，商户和支付宝签约时确定。该值需要与系统/页面签约接口调用时传入的值保持一致。
func (r ApiAlipayPcreditHuabeiAuthAgreementQueryRequest) AuthScene(authScene string) ApiAlipayPcreditHuabeiAuthAgreementQueryRequest {
	r.authScene = &authScene
	return r
}

func (r ApiAlipayPcreditHuabeiAuthAgreementQueryRequest) Execute() (*AlipayPcreditHuabeiAuthAgreementQueryResponseModel, *http.Response, error) {
	return r.ApiService.AlipayPcreditHuabeiAuthAgreementQueryExecute(r)
}

/*
AlipayPcreditHuabeiAuthAgreementQuery 花芝轻会员协议查询接口

花芝轻会员协议查询，返回协议的状态。如果协议处于签约状态，同时返回最新的资金池余额。
有两种方式查询。优先使用agreement_no查询；其次是使用(out_sign_no, auth_scene)查询。
如果商户不能保证out_sign_no的唯一性，慎用(out_sign_no, auth_scene)的查询方式，它优先返回仍处于签约状态的协议。

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiAlipayPcreditHuabeiAuthAgreementQueryRequest
*/
func (r *AlipayPcreditHuabeiAuthAgreementAPIService) AlipayPcreditHuabeiAuthAgreementQuery(ctx context.Context) ApiAlipayPcreditHuabeiAuthAgreementQueryRequest {
	return ApiAlipayPcreditHuabeiAuthAgreementQueryRequest{
		ApiService: r,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return AlipayPcreditHuabeiAuthAgreementQueryResponseModel
func (a *AlipayPcreditHuabeiAuthAgreementAPIService) AlipayPcreditHuabeiAuthAgreementQueryExecute(r ApiAlipayPcreditHuabeiAuthAgreementQueryRequest) (*AlipayPcreditHuabeiAuthAgreementQueryResponseModel, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *AlipayPcreditHuabeiAuthAgreementQueryResponseModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AlipayPcreditHuabeiAuthAgreementAPIService.AlipayPcreditHuabeiAuthAgreementQuery")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/alipay/pcredit/huabei/auth/agreement/query"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.agreementNo != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "agreement_no", r.agreementNo, "form", "")
	}
	if r.alipayUserId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "alipay_user_id", r.alipayUserId, "form", "")
	}
	if r.openId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "open_id", r.openId, "form", "")
	}
	if r.outSignNo != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "out_sign_no", r.outSignNo, "form", "")
	}
	if r.authScene != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "auth_scene", r.authScene, "form", "")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	// Add signing logic
	err = a.signRequest(req)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	// Add verification logic
	err = a.verifyResponse(localVarHTTPResponse, localVarBody)
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v AlipayPcreditHuabeiAuthAgreementQueryDefaultResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

func (a *AlipayPcreditHuabeiAuthAgreementAPIService) signRequest(req *http.Request) error {
	appID := a.client.cfg.AppID
	appCertSN := a.client.cfg.AppCertSN
	privateKey := a.client.cfg.PrivateKey

	nonce := generateUUID()
	timestamp := strconv.FormatInt(time.Now().UnixNano()/1e6, 10)

	authString := fmt.Sprintf("app_id=%s", appID)
	if appCertSN != "" {
		authString += fmt.Sprintf(",app_cert_sn=%s", appCertSN)
	}
	authString += fmt.Sprintf(",nonce=%s,timestamp=%s", nonce, timestamp)

	httpMethod := req.Method
	httpRequestUri := req.URL.Path
	if req.URL.RawQuery != "" {
		httpRequestUri += "?" + req.URL.RawQuery
	}

	var httpRequestBody string
	if req.Body != nil {
		bodyBytes, err := io.ReadAll(req.Body)
		if err != nil {
			return err
		}
		httpRequestBody = string(bodyBytes)
		req.Body = io.NopCloser(bytes.NewBuffer(bodyBytes))
	}

	content := authString + "\n" +
		httpMethod + "\n" +
		httpRequestUri + "\n" +
		httpRequestBody + "\n"

	if appAuthToken := req.Header.Get("alipay-app-auth-token"); appAuthToken != "" {
		content += appAuthToken + "\n"
	}

	signature, err := signWithRSA(content, privateKey)
	if err != nil {
		return err
	}

	req.Header.Set("Authorization", fmt.Sprintf("ALIPAY-SHA256withRSA %s,sign=%s", authString, signature))
	return nil
}

func (a *AlipayPcreditHuabeiAuthAgreementAPIService) verifyResponse(resp *http.Response, body []byte) error {
	timestamp := resp.Header.Get("alipay-timestamp")
	nonce := resp.Header.Get("alipay-nonce")
	sign := resp.Header.Get("alipay-signature")

	content := timestamp + "\n" +
		nonce + "\n" +
		string(body) + "\n"

	publicKey := a.client.cfg.PublicKey

	return verifyWithRSA(content, sign, publicKey)
}
