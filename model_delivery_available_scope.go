/*
支付宝开放平台API

支付宝开放平台v3协议文档

API version: 2024-07-05
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the DeliveryAvailableScope type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeliveryAvailableScope{}

// DeliveryAvailableScope struct for DeliveryAvailableScope
type DeliveryAvailableScope struct {
	DeliveryAvailableCityCode *DeliveryAvailableCityCode `json:"delivery_available_city_code,omitempty"`
	// 投放可用范围类型，目前支持的类型是城市范围CITY_CODE
	DeliveryAvailableScopeType *string `json:"delivery_available_scope_type,omitempty"`
}

// NewDeliveryAvailableScope instantiates a new DeliveryAvailableScope object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeliveryAvailableScope() *DeliveryAvailableScope {
	this := DeliveryAvailableScope{}
	return &this
}

// NewDeliveryAvailableScopeWithDefaults instantiates a new DeliveryAvailableScope object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeliveryAvailableScopeWithDefaults() *DeliveryAvailableScope {
	this := DeliveryAvailableScope{}
	return &this
}

// GetDeliveryAvailableCityCode returns the DeliveryAvailableCityCode field value if set, zero value otherwise.
func (o *DeliveryAvailableScope) GetDeliveryAvailableCityCode() DeliveryAvailableCityCode {
	if o == nil || IsNil(o.DeliveryAvailableCityCode) {
		var ret DeliveryAvailableCityCode
		return ret
	}
	return *o.DeliveryAvailableCityCode
}

// GetDeliveryAvailableCityCodeOk returns a tuple with the DeliveryAvailableCityCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeliveryAvailableScope) GetDeliveryAvailableCityCodeOk() (*DeliveryAvailableCityCode, bool) {
	if o == nil || IsNil(o.DeliveryAvailableCityCode) {
		return nil, false
	}
	return o.DeliveryAvailableCityCode, true
}

// HasDeliveryAvailableCityCode returns a boolean if a field has been set.
func (o *DeliveryAvailableScope) HasDeliveryAvailableCityCode() bool {
	if o != nil && !IsNil(o.DeliveryAvailableCityCode) {
		return true
	}

	return false
}

// SetDeliveryAvailableCityCode gets a reference to the given DeliveryAvailableCityCode and assigns it to the DeliveryAvailableCityCode field.
func (o *DeliveryAvailableScope) SetDeliveryAvailableCityCode(v DeliveryAvailableCityCode) {
	o.DeliveryAvailableCityCode = &v
}

// GetDeliveryAvailableScopeType returns the DeliveryAvailableScopeType field value if set, zero value otherwise.
func (o *DeliveryAvailableScope) GetDeliveryAvailableScopeType() string {
	if o == nil || IsNil(o.DeliveryAvailableScopeType) {
		var ret string
		return ret
	}
	return *o.DeliveryAvailableScopeType
}

// GetDeliveryAvailableScopeTypeOk returns a tuple with the DeliveryAvailableScopeType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeliveryAvailableScope) GetDeliveryAvailableScopeTypeOk() (*string, bool) {
	if o == nil || IsNil(o.DeliveryAvailableScopeType) {
		return nil, false
	}
	return o.DeliveryAvailableScopeType, true
}

// HasDeliveryAvailableScopeType returns a boolean if a field has been set.
func (o *DeliveryAvailableScope) HasDeliveryAvailableScopeType() bool {
	if o != nil && !IsNil(o.DeliveryAvailableScopeType) {
		return true
	}

	return false
}

// SetDeliveryAvailableScopeType gets a reference to the given string and assigns it to the DeliveryAvailableScopeType field.
func (o *DeliveryAvailableScope) SetDeliveryAvailableScopeType(v string) {
	o.DeliveryAvailableScopeType = &v
}

func (o DeliveryAvailableScope) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeliveryAvailableScope) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DeliveryAvailableCityCode) {
		toSerialize["delivery_available_city_code"] = o.DeliveryAvailableCityCode
	}
	if !IsNil(o.DeliveryAvailableScopeType) {
		toSerialize["delivery_available_scope_type"] = o.DeliveryAvailableScopeType
	}
	return toSerialize, nil
}

type NullableDeliveryAvailableScope struct {
	value *DeliveryAvailableScope
	isSet bool
}

func (v NullableDeliveryAvailableScope) Get() *DeliveryAvailableScope {
	return v.value
}

func (v *NullableDeliveryAvailableScope) Set(val *DeliveryAvailableScope) {
	v.value = val
	v.isSet = true
}

func (v NullableDeliveryAvailableScope) IsSet() bool {
	return v.isSet
}

func (v *NullableDeliveryAvailableScope) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeliveryAvailableScope(val *DeliveryAvailableScope) *NullableDeliveryAvailableScope {
	return &NullableDeliveryAvailableScope{value: val, isSet: true}
}

func (v NullableDeliveryAvailableScope) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeliveryAvailableScope) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


