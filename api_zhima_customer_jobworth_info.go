/*
支付宝开放平台API

支付宝开放平台v3协议文档

API version: 2024-07-05
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alipay

import (
	"bytes"
	"context"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strconv"
	"time"
)

// ZhimaCustomerJobworthInfoAPIService ZhimaCustomerJobworthInfoAPI service
type ZhimaCustomerJobworthInfoAPIService service

type ApiZhimaCustomerJobworthInfoQueryRequest struct {
	ctx                context.Context
	ApiService         *ZhimaCustomerJobworthInfoAPIService
	userName           *string
	connKey            *string
	certNo             *string
	userId             *string
	openId             *string
	backUrl            *string
	certType           *string
	kaVisitorId        *string
	visitorType        *string
	visitorName        *string
	companyCertificate *string
	visitorUrl         *string
	hasButton          *bool
	hasNumber          *bool
	hasQrCode          *bool
	hasHtml            *bool
	jobId              *string
	industryId         *string
	cloudResumeScene   *string
}

// 姓名
func (r ApiZhimaCustomerJobworthInfoQueryRequest) UserName(userName string) ApiZhimaCustomerJobworthInfoQueryRequest {
	r.userName = &userName
	return r
}

// 外部订单号，zhima.credit.payafteruse.creditagreement.sign的入参 out_agreement_no智能简历场景支持只传该值
func (r ApiZhimaCustomerJobworthInfoQueryRequest) ConnKey(connKey string) ApiZhimaCustomerJobworthInfoQueryRequest {
	r.connKey = &connKey
	return r
}

// 证件号 ，根据cert_type类型设置对应证件号码，选择身份证校验时必传
func (r ApiZhimaCustomerJobworthInfoQueryRequest) CertNo(certNo string) ApiZhimaCustomerJobworthInfoQueryRequest {
	r.certNo = &certNo
	return r
}

// 蚂蚁统一会员ID ，为2088开头的唯一标识 选择支付宝uid检验时必传，支付宝uid或身份证+身份证类型 查询2选1，都设置时uid优先
func (r ApiZhimaCustomerJobworthInfoQueryRequest) UserId(userId string) ApiZhimaCustomerJobworthInfoQueryRequest {
	r.userId = &userId
	return r
}

// 蚂蚁统一会员ID ，为2088开头的唯一标识 选择支付宝uid检验时必传，支付宝uid或身份证+身份证类型 查询2选1，都设置时uid优先
func (r ApiZhimaCustomerJobworthInfoQueryRequest) OpenId(openId string) ApiZhimaCustomerJobworthInfoQueryRequest {
	r.openId = &openId
	return r
}

// 若用户没有开通工作证或者芝麻，成功开通后回跳的链接 ，支持http或schema地址
func (r ApiZhimaCustomerJobworthInfoQueryRequest) BackUrl(backUrl string) ApiZhimaCustomerJobworthInfoQueryRequest {
	r.backUrl = &backUrl
	return r
}

// 证件类型 ，枚举值： 0:身份证1:护照2:台湾同胞回乡证3:港澳居民往来内地通行证4:台湾居民通行证5:港澳居民通行证 选择身份证校验时必传，支付宝uid或身份证+身份证类型 查询2选1，都设置时uid优先
func (r ApiZhimaCustomerJobworthInfoQueryRequest) CertType(certType string) ApiZhimaCustomerJobworthInfoQueryRequest {
	r.certType = &certType
	return r
}

// 商户内部的唯一id如果是需要返回h5页面必填
func (r ApiZhimaCustomerJobworthInfoQueryRequest) KaVisitorId(kaVisitorId string) ApiZhimaCustomerJobworthInfoQueryRequest {
	r.kaVisitorId = &kaVisitorId
	return r
}

// 访问类型 C &#x3D; company  or P &#x3D; person 如果是需要返回h5页面必填
func (r ApiZhimaCustomerJobworthInfoQueryRequest) VisitorType(visitorType string) ApiZhimaCustomerJobworthInfoQueryRequest {
	r.visitorType = &visitorType
	return r
}

// 商户侧配置访客名称 如果是需要返回h5页面必填
func (r ApiZhimaCustomerJobworthInfoQueryRequest) VisitorName(visitorName string) ApiZhimaCustomerJobworthInfoQueryRequest {
	r.visitorName = &visitorName
	return r
}

// 公司社会统一代码h5页面访客展示使用
func (r ApiZhimaCustomerJobworthInfoQueryRequest) CompanyCertificate(companyCertificate string) ApiZhimaCustomerJobworthInfoQueryRequest {
	r.companyCertificate = &companyCertificate
	return r
}

// 上传图片接口返回的id
func (r ApiZhimaCustomerJobworthInfoQueryRequest) VisitorUrl(visitorUrl string) ApiZhimaCustomerJobworthInfoQueryRequest {
	r.visitorUrl = &visitorUrl
	return r
}

// 在h5页面是否展示底部跳转按钮
func (r ApiZhimaCustomerJobworthInfoQueryRequest) HasButton(hasButton bool) ApiZhimaCustomerJobworthInfoQueryRequest {
	r.hasButton = &hasButton
	return r
}

// true or false 是否展示
func (r ApiZhimaCustomerJobworthInfoQueryRequest) HasNumber(hasNumber bool) ApiZhimaCustomerJobworthInfoQueryRequest {
	r.hasNumber = &hasNumber
	return r
}

// 是否展示二维码
func (r ApiZhimaCustomerJobworthInfoQueryRequest) HasQrCode(hasQrCode bool) ApiZhimaCustomerJobworthInfoQueryRequest {
	r.hasQrCode = &hasQrCode
	return r
}

// 是否需要返回h5页面
func (r ApiZhimaCustomerJobworthInfoQueryRequest) HasHtml(hasHtml bool) ApiZhimaCustomerJobworthInfoQueryRequest {
	r.hasHtml = &hasHtml
	return r
}

// 对外使用的jobid
func (r ApiZhimaCustomerJobworthInfoQueryRequest) JobId(jobId string) ApiZhimaCustomerJobworthInfoQueryRequest {
	r.jobId = &jobId
	return r
}

// 行业描述ID
func (r ApiZhimaCustomerJobworthInfoQueryRequest) IndustryId(industryId string) ApiZhimaCustomerJobworthInfoQueryRequest {
	r.industryId = &industryId
	return r
}

// 子场景
func (r ApiZhimaCustomerJobworthInfoQueryRequest) CloudResumeScene(cloudResumeScene string) ApiZhimaCustomerJobworthInfoQueryRequest {
	r.cloudResumeScene = &cloudResumeScene
	return r
}

func (r ApiZhimaCustomerJobworthInfoQueryRequest) Execute() (*ZhimaCustomerJobworthInfoQueryResponseModel, *http.Response, error) {
	return r.ApiService.ZhimaCustomerJobworthInfoQueryExecute(r)
}

/*
ZhimaCustomerJobworthInfoQuery 职得工作证信息查询

查询用户职得工作证信息
查询方式3选1，都设置时uid优先
1、支付宝uid查询：user_id
2、身份证+姓名查询：cert_type+cert_no
3、智能简历场景：conn_key

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiZhimaCustomerJobworthInfoQueryRequest
*/
func (r *ZhimaCustomerJobworthInfoAPIService) ZhimaCustomerJobworthInfoQuery(ctx context.Context) ApiZhimaCustomerJobworthInfoQueryRequest {
	return ApiZhimaCustomerJobworthInfoQueryRequest{
		ApiService: r,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ZhimaCustomerJobworthInfoQueryResponseModel
func (a *ZhimaCustomerJobworthInfoAPIService) ZhimaCustomerJobworthInfoQueryExecute(r ApiZhimaCustomerJobworthInfoQueryRequest) (*ZhimaCustomerJobworthInfoQueryResponseModel, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ZhimaCustomerJobworthInfoQueryResponseModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ZhimaCustomerJobworthInfoAPIService.ZhimaCustomerJobworthInfoQuery")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/zhima/customer/jobworth/info/query"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.userName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "user_name", r.userName, "form", "")
	}
	if r.connKey != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conn_key", r.connKey, "form", "")
	}
	if r.certNo != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cert_no", r.certNo, "form", "")
	}
	if r.userId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "user_id", r.userId, "form", "")
	}
	if r.openId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "open_id", r.openId, "form", "")
	}
	if r.backUrl != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "back_url", r.backUrl, "form", "")
	}
	if r.certType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cert_type", r.certType, "form", "")
	}
	if r.kaVisitorId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ka_visitor_id", r.kaVisitorId, "form", "")
	}
	if r.visitorType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "visitor_type", r.visitorType, "form", "")
	}
	if r.visitorName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "visitor_name", r.visitorName, "form", "")
	}
	if r.companyCertificate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "company_certificate", r.companyCertificate, "form", "")
	}
	if r.visitorUrl != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "visitor_url", r.visitorUrl, "form", "")
	}
	if r.hasButton != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "has_button", r.hasButton, "form", "")
	}
	if r.hasNumber != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "has_number", r.hasNumber, "form", "")
	}
	if r.hasQrCode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "has_qr_code", r.hasQrCode, "form", "")
	}
	if r.hasHtml != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "has_html", r.hasHtml, "form", "")
	}
	if r.jobId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "job_id", r.jobId, "form", "")
	}
	if r.industryId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "industry_id", r.industryId, "form", "")
	}
	if r.cloudResumeScene != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cloud_resume_scene", r.cloudResumeScene, "form", "")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	// Add signing logic
	err = a.signRequest(req)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	// Add verification logic
	err = a.verifyResponse(localVarHTTPResponse, localVarBody)
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v ZhimaCustomerJobworthInfoQueryDefaultResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

func (a *ZhimaCustomerJobworthInfoAPIService) signRequest(req *http.Request) error {
	appID := a.client.cfg.AppID
	appCertSN := a.client.cfg.AppCertSN
	privateKey := a.client.cfg.PrivateKey

	nonce := generateUUID()
	timestamp := strconv.FormatInt(time.Now().UnixNano()/1e6, 10)

	authString := fmt.Sprintf("app_id=%s", appID)
	if appCertSN != "" {
		authString += fmt.Sprintf(",app_cert_sn=%s", appCertSN)
	}
	authString += fmt.Sprintf(",nonce=%s,timestamp=%s", nonce, timestamp)

	httpMethod := req.Method
	httpRequestUri := req.URL.Path
	if req.URL.RawQuery != "" {
		httpRequestUri += "?" + req.URL.RawQuery
	}

	var httpRequestBody string
	if req.Body != nil {
		bodyBytes, err := io.ReadAll(req.Body)
		if err != nil {
			return err
		}
		httpRequestBody = string(bodyBytes)
		req.Body = io.NopCloser(bytes.NewBuffer(bodyBytes))
	}

	content := authString + "\n" +
		httpMethod + "\n" +
		httpRequestUri + "\n" +
		httpRequestBody + "\n"

	if appAuthToken := req.Header.Get("alipay-app-auth-token"); appAuthToken != "" {
		content += appAuthToken + "\n"
	}

	signature, err := signWithRSA(content, privateKey)
	if err != nil {
		return err
	}

	req.Header.Set("Authorization", fmt.Sprintf("ALIPAY-SHA256withRSA %s,sign=%s", authString, signature))
	return nil
}

func (a *ZhimaCustomerJobworthInfoAPIService) verifyResponse(resp *http.Response, body []byte) error {
	timestamp := resp.Header.Get("alipay-timestamp")
	nonce := resp.Header.Get("alipay-nonce")
	sign := resp.Header.Get("alipay-signature")

	content := timestamp + "\n" +
		nonce + "\n" +
		string(body) + "\n"

	publicKey := a.client.cfg.PublicKey

	return verifyWithRSA(content, sign, publicKey)
}
