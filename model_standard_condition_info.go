/*
支付宝开放平台API

支付宝开放平台v3协议文档

API version: 2024-07-05
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alipay

import (
	"encoding/json"
)

// checks if the StandardConditionInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StandardConditionInfo{}

// StandardConditionInfo struct for StandardConditionInfo
type StandardConditionInfo struct {
	// 条件类型
	RuleFactor *string `json:"rule_factor,omitempty"`
	// 费控条件ID
	RuleId *string `json:"rule_id,omitempty"`
	// 费控条件名称
	RuleName *string `json:"rule_name,omitempty"`
	// 费控条件操作符 枚举值： LT(\"<\",\"小于\") LE(\"<=\",\"小于等于\") EQ(\"=\",\"等于\") NE(\"!=\",\"不等于\") GE(\">=\",\"大于等于\") GT(\">\",\"大于\")
	RuleOperator *string `json:"rule_operator,omitempty"`
	// 费控条件值
	RuleValue *string `json:"rule_value,omitempty"`
}

// NewStandardConditionInfo instantiates a new StandardConditionInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStandardConditionInfo() *StandardConditionInfo {
	this := StandardConditionInfo{}
	return &this
}

// NewStandardConditionInfoWithDefaults instantiates a new StandardConditionInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStandardConditionInfoWithDefaults() *StandardConditionInfo {
	this := StandardConditionInfo{}
	return &this
}

// GetRuleFactor returns the RuleFactor field value if set, zero value otherwise.
func (o *StandardConditionInfo) GetRuleFactor() string {
	if o == nil || IsNil(o.RuleFactor) {
		var ret string
		return ret
	}
	return *o.RuleFactor
}

// GetRuleFactorOk returns a tuple with the RuleFactor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StandardConditionInfo) GetRuleFactorOk() (*string, bool) {
	if o == nil || IsNil(o.RuleFactor) {
		return nil, false
	}
	return o.RuleFactor, true
}

// HasRuleFactor returns a boolean if a field has been set.
func (o *StandardConditionInfo) HasRuleFactor() bool {
	if o != nil && !IsNil(o.RuleFactor) {
		return true
	}

	return false
}

// SetRuleFactor gets a reference to the given string and assigns it to the RuleFactor field.
func (o *StandardConditionInfo) SetRuleFactor(v string) {
	o.RuleFactor = &v
}

// GetRuleId returns the RuleId field value if set, zero value otherwise.
func (o *StandardConditionInfo) GetRuleId() string {
	if o == nil || IsNil(o.RuleId) {
		var ret string
		return ret
	}
	return *o.RuleId
}

// GetRuleIdOk returns a tuple with the RuleId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StandardConditionInfo) GetRuleIdOk() (*string, bool) {
	if o == nil || IsNil(o.RuleId) {
		return nil, false
	}
	return o.RuleId, true
}

// HasRuleId returns a boolean if a field has been set.
func (o *StandardConditionInfo) HasRuleId() bool {
	if o != nil && !IsNil(o.RuleId) {
		return true
	}

	return false
}

// SetRuleId gets a reference to the given string and assigns it to the RuleId field.
func (o *StandardConditionInfo) SetRuleId(v string) {
	o.RuleId = &v
}

// GetRuleName returns the RuleName field value if set, zero value otherwise.
func (o *StandardConditionInfo) GetRuleName() string {
	if o == nil || IsNil(o.RuleName) {
		var ret string
		return ret
	}
	return *o.RuleName
}

// GetRuleNameOk returns a tuple with the RuleName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StandardConditionInfo) GetRuleNameOk() (*string, bool) {
	if o == nil || IsNil(o.RuleName) {
		return nil, false
	}
	return o.RuleName, true
}

// HasRuleName returns a boolean if a field has been set.
func (o *StandardConditionInfo) HasRuleName() bool {
	if o != nil && !IsNil(o.RuleName) {
		return true
	}

	return false
}

// SetRuleName gets a reference to the given string and assigns it to the RuleName field.
func (o *StandardConditionInfo) SetRuleName(v string) {
	o.RuleName = &v
}

// GetRuleOperator returns the RuleOperator field value if set, zero value otherwise.
func (o *StandardConditionInfo) GetRuleOperator() string {
	if o == nil || IsNil(o.RuleOperator) {
		var ret string
		return ret
	}
	return *o.RuleOperator
}

// GetRuleOperatorOk returns a tuple with the RuleOperator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StandardConditionInfo) GetRuleOperatorOk() (*string, bool) {
	if o == nil || IsNil(o.RuleOperator) {
		return nil, false
	}
	return o.RuleOperator, true
}

// HasRuleOperator returns a boolean if a field has been set.
func (o *StandardConditionInfo) HasRuleOperator() bool {
	if o != nil && !IsNil(o.RuleOperator) {
		return true
	}

	return false
}

// SetRuleOperator gets a reference to the given string and assigns it to the RuleOperator field.
func (o *StandardConditionInfo) SetRuleOperator(v string) {
	o.RuleOperator = &v
}

// GetRuleValue returns the RuleValue field value if set, zero value otherwise.
func (o *StandardConditionInfo) GetRuleValue() string {
	if o == nil || IsNil(o.RuleValue) {
		var ret string
		return ret
	}
	return *o.RuleValue
}

// GetRuleValueOk returns a tuple with the RuleValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StandardConditionInfo) GetRuleValueOk() (*string, bool) {
	if o == nil || IsNil(o.RuleValue) {
		return nil, false
	}
	return o.RuleValue, true
}

// HasRuleValue returns a boolean if a field has been set.
func (o *StandardConditionInfo) HasRuleValue() bool {
	if o != nil && !IsNil(o.RuleValue) {
		return true
	}

	return false
}

// SetRuleValue gets a reference to the given string and assigns it to the RuleValue field.
func (o *StandardConditionInfo) SetRuleValue(v string) {
	o.RuleValue = &v
}

func (o StandardConditionInfo) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StandardConditionInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RuleFactor) {
		toSerialize["rule_factor"] = o.RuleFactor
	}
	if !IsNil(o.RuleId) {
		toSerialize["rule_id"] = o.RuleId
	}
	if !IsNil(o.RuleName) {
		toSerialize["rule_name"] = o.RuleName
	}
	if !IsNil(o.RuleOperator) {
		toSerialize["rule_operator"] = o.RuleOperator
	}
	if !IsNil(o.RuleValue) {
		toSerialize["rule_value"] = o.RuleValue
	}
	return toSerialize, nil
}

type NullableStandardConditionInfo struct {
	value *StandardConditionInfo
	isSet bool
}

func (v NullableStandardConditionInfo) Get() *StandardConditionInfo {
	return v.value
}

func (v *NullableStandardConditionInfo) Set(val *StandardConditionInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableStandardConditionInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableStandardConditionInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStandardConditionInfo(val *StandardConditionInfo) *NullableStandardConditionInfo {
	return &NullableStandardConditionInfo{value: val, isSet: true}
}

func (v NullableStandardConditionInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStandardConditionInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
