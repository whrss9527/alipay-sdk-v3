/*
支付宝开放平台API

支付宝开放平台v3协议文档

API version: 2024-07-05
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alipay

import (
	"bytes"
	"context"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strconv"
	"time"
)

// AlipayCommerceEducateCampusInstitutionsAPIService AlipayCommerceEducateCampusInstitutionsAPI service
type AlipayCommerceEducateCampusInstitutionsAPIService service

type ApiAlipayCommerceEducateCampusInstitutionsAddRequest struct {
	ctx                                             context.Context
	ApiService                                      *AlipayCommerceEducateCampusInstitutionsAPIService
	alipayCommerceEducateCampusInstitutionsAddModel *AlipayCommerceEducateCampusInstitutionsAddModel
}

func (r ApiAlipayCommerceEducateCampusInstitutionsAddRequest) AlipayCommerceEducateCampusInstitutionsAddModel(alipayCommerceEducateCampusInstitutionsAddModel AlipayCommerceEducateCampusInstitutionsAddModel) ApiAlipayCommerceEducateCampusInstitutionsAddRequest {
	r.alipayCommerceEducateCampusInstitutionsAddModel = &alipayCommerceEducateCampusInstitutionsAddModel
	return r
}

func (r ApiAlipayCommerceEducateCampusInstitutionsAddRequest) Execute() (*AlipayCommerceEducateCampusInstitutionsAddResponseModel, *http.Response, error) {
	return r.ApiService.AlipayCommerceEducateCampusInstitutionsAddExecute(r)
}

/*
AlipayCommerceEducateCampusInstitutionsAdd 入驻学校信息

学校信息入驻

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiAlipayCommerceEducateCampusInstitutionsAddRequest
*/
func (r *AlipayCommerceEducateCampusInstitutionsAPIService) AlipayCommerceEducateCampusInstitutionsAdd(ctx context.Context) ApiAlipayCommerceEducateCampusInstitutionsAddRequest {
	return ApiAlipayCommerceEducateCampusInstitutionsAddRequest{
		ApiService: r,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return AlipayCommerceEducateCampusInstitutionsAddResponseModel
func (a *AlipayCommerceEducateCampusInstitutionsAPIService) AlipayCommerceEducateCampusInstitutionsAddExecute(r ApiAlipayCommerceEducateCampusInstitutionsAddRequest) (*AlipayCommerceEducateCampusInstitutionsAddResponseModel, *http.Response, error) {
	err := a.client.prepareConfig()
	if err != nil {
		return nil, nil, &GenericOpenAPIError{error: err.Error()}
	}
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *AlipayCommerceEducateCampusInstitutionsAddResponseModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AlipayCommerceEducateCampusInstitutionsAPIService.AlipayCommerceEducateCampusInstitutionsAdd")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/alipay/commerce/educate/campus/institutions/add"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.alipayCommerceEducateCampusInstitutionsAddModel

	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	// Add signing logic
	err = a.signRequest(req)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	// Add verification logic
	err = a.verifyResponse(localVarHTTPResponse, localVarBody)
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v AlipayCommerceEducateCampusInstitutionsAddDefaultResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAlipayCommerceEducateCampusInstitutionsQueryRequest struct {
	ctx          context.Context
	ApiService   *AlipayCommerceEducateCampusInstitutionsAPIService
	instName     *string
	provinceCode *string
	cityCode     *string
	instId       *string
	instStdCode  *string
	likeProperty *string
}

// 学校名称
func (r ApiAlipayCommerceEducateCampusInstitutionsQueryRequest) InstName(instName string) ApiAlipayCommerceEducateCampusInstitutionsQueryRequest {
	r.instName = &instName
	return r
}

// 省份编码，编码标准为中华人民共和国行政区划代码，参见 2020年12月中华人民共和国县以上行政区划代码。
func (r ApiAlipayCommerceEducateCampusInstitutionsQueryRequest) ProvinceCode(provinceCode string) ApiAlipayCommerceEducateCampusInstitutionsQueryRequest {
	r.provinceCode = &provinceCode
	return r
}

// 城市编码，编码标准为中华人民共和国行政区划代码，参见 2020年12月中华人民共和国县以上行政区划代码。
func (r ApiAlipayCommerceEducateCampusInstitutionsQueryRequest) CityCode(cityCode string) ApiAlipayCommerceEducateCampusInstitutionsQueryRequest {
	r.cityCode = &cityCode
	return r
}

// 学校内标：支付宝内部学校唯一编号。使用内标查询时，默认使用内标进行精确匹配。
func (r ApiAlipayCommerceEducateCampusInstitutionsQueryRequest) InstId(instId string) ApiAlipayCommerceEducateCampusInstitutionsQueryRequest {
	r.instId = &instId
	return r
}

// 学校外标：统一社会信用编码或教育部提供的学校标识码。使用学校外标查询时，默认使用外标进行精确匹配。
func (r ApiAlipayCommerceEducateCampusInstitutionsQueryRequest) InstStdCode(instStdCode string) ApiAlipayCommerceEducateCampusInstitutionsQueryRequest {
	r.instStdCode = &instStdCode
	return r
}

// 是否使用学校名称模糊匹配进行查询，默认精确匹配。 枚举值如下： 1：精确匹配； 0：模糊匹配
func (r ApiAlipayCommerceEducateCampusInstitutionsQueryRequest) LikeProperty(likeProperty string) ApiAlipayCommerceEducateCampusInstitutionsQueryRequest {
	r.likeProperty = &likeProperty
	return r
}

func (r ApiAlipayCommerceEducateCampusInstitutionsQueryRequest) Execute() (*AlipayCommerceEducateCampusInstitutionsQueryResponseModel, *http.Response, error) {
	return r.ApiService.AlipayCommerceEducateCampusInstitutionsQueryExecute(r)
}

/*
AlipayCommerceEducateCampusInstitutionsQuery 查询学校信息

可以通过学校库产品查询支付宝系统中是否已存在对应的学校，避免重复入驻，以及通过该接口查询入驻的进度：入驻成功则会返回学校信息，失败则不会返回

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiAlipayCommerceEducateCampusInstitutionsQueryRequest
*/
func (r *AlipayCommerceEducateCampusInstitutionsAPIService) AlipayCommerceEducateCampusInstitutionsQuery(ctx context.Context) ApiAlipayCommerceEducateCampusInstitutionsQueryRequest {
	return ApiAlipayCommerceEducateCampusInstitutionsQueryRequest{
		ApiService: r,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return AlipayCommerceEducateCampusInstitutionsQueryResponseModel
func (a *AlipayCommerceEducateCampusInstitutionsAPIService) AlipayCommerceEducateCampusInstitutionsQueryExecute(r ApiAlipayCommerceEducateCampusInstitutionsQueryRequest) (*AlipayCommerceEducateCampusInstitutionsQueryResponseModel, *http.Response, error) {
	err := a.client.prepareConfig()
	if err != nil {
		return nil, nil, &GenericOpenAPIError{error: err.Error()}
	}
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *AlipayCommerceEducateCampusInstitutionsQueryResponseModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AlipayCommerceEducateCampusInstitutionsAPIService.AlipayCommerceEducateCampusInstitutionsQuery")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/alipay/commerce/educate/campus/institutions/query"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.instName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "inst_name", r.instName, "form", "")
	}
	if r.provinceCode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "province_code", r.provinceCode, "form", "")
	}
	if r.cityCode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "city_code", r.cityCode, "form", "")
	}
	if r.instId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "inst_id", r.instId, "form", "")
	}
	if r.instStdCode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "inst_std_code", r.instStdCode, "form", "")
	}
	if r.likeProperty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "like_property", r.likeProperty, "form", "")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	// Add signing logic
	err = a.signRequest(req)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	// Add verification logic
	err = a.verifyResponse(localVarHTTPResponse, localVarBody)
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v AlipayCommerceEducateCampusInstitutionsQueryDefaultResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

func (a *AlipayCommerceEducateCampusInstitutionsAPIService) signRequest(req *http.Request) error {
	appID := a.client.cfg.AppID
	appCertSN := a.client.cfg.AppCertSN
	nonce := generateUUID()
	timestamp := strconv.FormatInt(time.Now().UnixNano()/1e6, 10)

	authString := fmt.Sprintf("app_id=%s", appID)
	if appCertSN != "" {
		authString += fmt.Sprintf(",app_cert_sn=%s", appCertSN)
	}
	authString += fmt.Sprintf(",nonce=%s,timestamp=%s", nonce, timestamp)

	httpMethod := req.Method
	httpRequestUri := req.URL.Path
	if req.URL.RawQuery != "" {
		httpRequestUri += "?" + req.URL.RawQuery
	}

	var httpRequestBody string
	if req.Body != nil {
		bodyBytes, err := io.ReadAll(req.Body)
		if err != nil {
			return err
		}
		httpRequestBody = string(bodyBytes)
		req.Body = io.NopCloser(bytes.NewBuffer(bodyBytes))
	}

	content := authString + "\n" +
		httpMethod + "\n" +
		httpRequestUri + "\n" +
		httpRequestBody + "\n"

	if appAuthToken := req.Header.Get("alipay-app-auth-token"); appAuthToken != "" {
		content += appAuthToken + "\n"
	}

	signature, err := signWithRSA(content, a.client.cfg.privateKey)
	if err != nil {
		return err
	}

	req.Header.Set("Authorization", fmt.Sprintf("ALIPAY-SHA256withRSA %s,sign=%s", authString, signature))
	return nil
}

func (a *AlipayCommerceEducateCampusInstitutionsAPIService) verifyResponse(resp *http.Response, body []byte) error {
	timestamp := resp.Header.Get("alipay-timestamp")
	nonce := resp.Header.Get("alipay-nonce")
	sign := resp.Header.Get("alipay-signature")

	content := timestamp + "\n" +
		nonce + "\n" +
		string(body) + "\n"

	return verifyWithRSA(content, sign, a.client.cfg.publicKey)
}
