/*
支付宝开放平台API

支付宝开放平台v3协议文档

API version: 2024-07-05
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alipay

import (
	"encoding/json"
)

// checks if the PluginUseRelationInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PluginUseRelationInfo{}

// PluginUseRelationInfo struct for PluginUseRelationInfo
type PluginUseRelationInfo struct {
	// 邀测驳回原因
	BetaMemo *string `json:"beta_memo,omitempty"`
	// 邀测插件版本号
	BetaPluginVersion *string `json:"beta_plugin_version,omitempty"`
	// 邀测二维码
	BetaQrCodeUrl *string `json:"beta_qr_code_url,omitempty"`
	// WAITCHECK-待确认;CHECKED-确认;REJECT-拒绝
	BetaStatus *string `json:"beta_status,omitempty"`
	// 激活时间
	GmtActive *string `json:"gmt_active,omitempty"`
	// 订购时间
	GmtCreate *string `json:"gmt_create,omitempty"`
	// 插件失效时间
	GmtInvalid *string `json:"gmt_invalid,omitempty"`
	// 应用ID
	MiniAppId *string `json:"mini_app_id,omitempty"`
	// 插件构建版本
	PluginDeployVersion *string `json:"plugin_deploy_version,omitempty"`
	// 插件ID
	PluginId *string `json:"plugin_id,omitempty"`
	// 插件状态，取值包括EXECUTING/WAIT_WORKING/WORKING/STOP_WORKING/WAIT_BUY
	PluginStatus *string `json:"plugin_status,omitempty"`
	// 分端版本配置信息列表
	PluginUseConfigInfoList []PluginUseConfigInfo `json:"plugin_use_config_info_list,omitempty"`
	// 插件版本
	PluginVersion *string `json:"plugin_version,omitempty"`
	// 插件运行状态，取值包括ONLINE/TRIAL/REVIEW/DEBUG
	RunModeType *string `json:"run_mode_type,omitempty"`
	// 渠道来源，取值包括SHOP_MINI/PLUGIN_DEBUG/PLUGIN_TRIAL/PLUGIN_AUDIT/GENERAL_SHOP_ID
	SourceFrom *string `json:"source_from,omitempty"`
}

// NewPluginUseRelationInfo instantiates a new PluginUseRelationInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPluginUseRelationInfo() *PluginUseRelationInfo {
	this := PluginUseRelationInfo{}
	return &this
}

// NewPluginUseRelationInfoWithDefaults instantiates a new PluginUseRelationInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPluginUseRelationInfoWithDefaults() *PluginUseRelationInfo {
	this := PluginUseRelationInfo{}
	return &this
}

// GetBetaMemo returns the BetaMemo field value if set, zero value otherwise.
func (o *PluginUseRelationInfo) GetBetaMemo() string {
	if o == nil || IsNil(o.BetaMemo) {
		var ret string
		return ret
	}
	return *o.BetaMemo
}

// GetBetaMemoOk returns a tuple with the BetaMemo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PluginUseRelationInfo) GetBetaMemoOk() (*string, bool) {
	if o == nil || IsNil(o.BetaMemo) {
		return nil, false
	}
	return o.BetaMemo, true
}

// HasBetaMemo returns a boolean if a field has been set.
func (o *PluginUseRelationInfo) HasBetaMemo() bool {
	if o != nil && !IsNil(o.BetaMemo) {
		return true
	}

	return false
}

// SetBetaMemo gets a reference to the given string and assigns it to the BetaMemo field.
func (o *PluginUseRelationInfo) SetBetaMemo(v string) {
	o.BetaMemo = &v
}

// GetBetaPluginVersion returns the BetaPluginVersion field value if set, zero value otherwise.
func (o *PluginUseRelationInfo) GetBetaPluginVersion() string {
	if o == nil || IsNil(o.BetaPluginVersion) {
		var ret string
		return ret
	}
	return *o.BetaPluginVersion
}

// GetBetaPluginVersionOk returns a tuple with the BetaPluginVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PluginUseRelationInfo) GetBetaPluginVersionOk() (*string, bool) {
	if o == nil || IsNil(o.BetaPluginVersion) {
		return nil, false
	}
	return o.BetaPluginVersion, true
}

// HasBetaPluginVersion returns a boolean if a field has been set.
func (o *PluginUseRelationInfo) HasBetaPluginVersion() bool {
	if o != nil && !IsNil(o.BetaPluginVersion) {
		return true
	}

	return false
}

// SetBetaPluginVersion gets a reference to the given string and assigns it to the BetaPluginVersion field.
func (o *PluginUseRelationInfo) SetBetaPluginVersion(v string) {
	o.BetaPluginVersion = &v
}

// GetBetaQrCodeUrl returns the BetaQrCodeUrl field value if set, zero value otherwise.
func (o *PluginUseRelationInfo) GetBetaQrCodeUrl() string {
	if o == nil || IsNil(o.BetaQrCodeUrl) {
		var ret string
		return ret
	}
	return *o.BetaQrCodeUrl
}

// GetBetaQrCodeUrlOk returns a tuple with the BetaQrCodeUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PluginUseRelationInfo) GetBetaQrCodeUrlOk() (*string, bool) {
	if o == nil || IsNil(o.BetaQrCodeUrl) {
		return nil, false
	}
	return o.BetaQrCodeUrl, true
}

// HasBetaQrCodeUrl returns a boolean if a field has been set.
func (o *PluginUseRelationInfo) HasBetaQrCodeUrl() bool {
	if o != nil && !IsNil(o.BetaQrCodeUrl) {
		return true
	}

	return false
}

// SetBetaQrCodeUrl gets a reference to the given string and assigns it to the BetaQrCodeUrl field.
func (o *PluginUseRelationInfo) SetBetaQrCodeUrl(v string) {
	o.BetaQrCodeUrl = &v
}

// GetBetaStatus returns the BetaStatus field value if set, zero value otherwise.
func (o *PluginUseRelationInfo) GetBetaStatus() string {
	if o == nil || IsNil(o.BetaStatus) {
		var ret string
		return ret
	}
	return *o.BetaStatus
}

// GetBetaStatusOk returns a tuple with the BetaStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PluginUseRelationInfo) GetBetaStatusOk() (*string, bool) {
	if o == nil || IsNil(o.BetaStatus) {
		return nil, false
	}
	return o.BetaStatus, true
}

// HasBetaStatus returns a boolean if a field has been set.
func (o *PluginUseRelationInfo) HasBetaStatus() bool {
	if o != nil && !IsNil(o.BetaStatus) {
		return true
	}

	return false
}

// SetBetaStatus gets a reference to the given string and assigns it to the BetaStatus field.
func (o *PluginUseRelationInfo) SetBetaStatus(v string) {
	o.BetaStatus = &v
}

// GetGmtActive returns the GmtActive field value if set, zero value otherwise.
func (o *PluginUseRelationInfo) GetGmtActive() string {
	if o == nil || IsNil(o.GmtActive) {
		var ret string
		return ret
	}
	return *o.GmtActive
}

// GetGmtActiveOk returns a tuple with the GmtActive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PluginUseRelationInfo) GetGmtActiveOk() (*string, bool) {
	if o == nil || IsNil(o.GmtActive) {
		return nil, false
	}
	return o.GmtActive, true
}

// HasGmtActive returns a boolean if a field has been set.
func (o *PluginUseRelationInfo) HasGmtActive() bool {
	if o != nil && !IsNil(o.GmtActive) {
		return true
	}

	return false
}

// SetGmtActive gets a reference to the given string and assigns it to the GmtActive field.
func (o *PluginUseRelationInfo) SetGmtActive(v string) {
	o.GmtActive = &v
}

// GetGmtCreate returns the GmtCreate field value if set, zero value otherwise.
func (o *PluginUseRelationInfo) GetGmtCreate() string {
	if o == nil || IsNil(o.GmtCreate) {
		var ret string
		return ret
	}
	return *o.GmtCreate
}

// GetGmtCreateOk returns a tuple with the GmtCreate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PluginUseRelationInfo) GetGmtCreateOk() (*string, bool) {
	if o == nil || IsNil(o.GmtCreate) {
		return nil, false
	}
	return o.GmtCreate, true
}

// HasGmtCreate returns a boolean if a field has been set.
func (o *PluginUseRelationInfo) HasGmtCreate() bool {
	if o != nil && !IsNil(o.GmtCreate) {
		return true
	}

	return false
}

// SetGmtCreate gets a reference to the given string and assigns it to the GmtCreate field.
func (o *PluginUseRelationInfo) SetGmtCreate(v string) {
	o.GmtCreate = &v
}

// GetGmtInvalid returns the GmtInvalid field value if set, zero value otherwise.
func (o *PluginUseRelationInfo) GetGmtInvalid() string {
	if o == nil || IsNil(o.GmtInvalid) {
		var ret string
		return ret
	}
	return *o.GmtInvalid
}

// GetGmtInvalidOk returns a tuple with the GmtInvalid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PluginUseRelationInfo) GetGmtInvalidOk() (*string, bool) {
	if o == nil || IsNil(o.GmtInvalid) {
		return nil, false
	}
	return o.GmtInvalid, true
}

// HasGmtInvalid returns a boolean if a field has been set.
func (o *PluginUseRelationInfo) HasGmtInvalid() bool {
	if o != nil && !IsNil(o.GmtInvalid) {
		return true
	}

	return false
}

// SetGmtInvalid gets a reference to the given string and assigns it to the GmtInvalid field.
func (o *PluginUseRelationInfo) SetGmtInvalid(v string) {
	o.GmtInvalid = &v
}

// GetMiniAppId returns the MiniAppId field value if set, zero value otherwise.
func (o *PluginUseRelationInfo) GetMiniAppId() string {
	if o == nil || IsNil(o.MiniAppId) {
		var ret string
		return ret
	}
	return *o.MiniAppId
}

// GetMiniAppIdOk returns a tuple with the MiniAppId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PluginUseRelationInfo) GetMiniAppIdOk() (*string, bool) {
	if o == nil || IsNil(o.MiniAppId) {
		return nil, false
	}
	return o.MiniAppId, true
}

// HasMiniAppId returns a boolean if a field has been set.
func (o *PluginUseRelationInfo) HasMiniAppId() bool {
	if o != nil && !IsNil(o.MiniAppId) {
		return true
	}

	return false
}

// SetMiniAppId gets a reference to the given string and assigns it to the MiniAppId field.
func (o *PluginUseRelationInfo) SetMiniAppId(v string) {
	o.MiniAppId = &v
}

// GetPluginDeployVersion returns the PluginDeployVersion field value if set, zero value otherwise.
func (o *PluginUseRelationInfo) GetPluginDeployVersion() string {
	if o == nil || IsNil(o.PluginDeployVersion) {
		var ret string
		return ret
	}
	return *o.PluginDeployVersion
}

// GetPluginDeployVersionOk returns a tuple with the PluginDeployVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PluginUseRelationInfo) GetPluginDeployVersionOk() (*string, bool) {
	if o == nil || IsNil(o.PluginDeployVersion) {
		return nil, false
	}
	return o.PluginDeployVersion, true
}

// HasPluginDeployVersion returns a boolean if a field has been set.
func (o *PluginUseRelationInfo) HasPluginDeployVersion() bool {
	if o != nil && !IsNil(o.PluginDeployVersion) {
		return true
	}

	return false
}

// SetPluginDeployVersion gets a reference to the given string and assigns it to the PluginDeployVersion field.
func (o *PluginUseRelationInfo) SetPluginDeployVersion(v string) {
	o.PluginDeployVersion = &v
}

// GetPluginId returns the PluginId field value if set, zero value otherwise.
func (o *PluginUseRelationInfo) GetPluginId() string {
	if o == nil || IsNil(o.PluginId) {
		var ret string
		return ret
	}
	return *o.PluginId
}

// GetPluginIdOk returns a tuple with the PluginId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PluginUseRelationInfo) GetPluginIdOk() (*string, bool) {
	if o == nil || IsNil(o.PluginId) {
		return nil, false
	}
	return o.PluginId, true
}

// HasPluginId returns a boolean if a field has been set.
func (o *PluginUseRelationInfo) HasPluginId() bool {
	if o != nil && !IsNil(o.PluginId) {
		return true
	}

	return false
}

// SetPluginId gets a reference to the given string and assigns it to the PluginId field.
func (o *PluginUseRelationInfo) SetPluginId(v string) {
	o.PluginId = &v
}

// GetPluginStatus returns the PluginStatus field value if set, zero value otherwise.
func (o *PluginUseRelationInfo) GetPluginStatus() string {
	if o == nil || IsNil(o.PluginStatus) {
		var ret string
		return ret
	}
	return *o.PluginStatus
}

// GetPluginStatusOk returns a tuple with the PluginStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PluginUseRelationInfo) GetPluginStatusOk() (*string, bool) {
	if o == nil || IsNil(o.PluginStatus) {
		return nil, false
	}
	return o.PluginStatus, true
}

// HasPluginStatus returns a boolean if a field has been set.
func (o *PluginUseRelationInfo) HasPluginStatus() bool {
	if o != nil && !IsNil(o.PluginStatus) {
		return true
	}

	return false
}

// SetPluginStatus gets a reference to the given string and assigns it to the PluginStatus field.
func (o *PluginUseRelationInfo) SetPluginStatus(v string) {
	o.PluginStatus = &v
}

// GetPluginUseConfigInfoList returns the PluginUseConfigInfoList field value if set, zero value otherwise.
func (o *PluginUseRelationInfo) GetPluginUseConfigInfoList() []PluginUseConfigInfo {
	if o == nil || IsNil(o.PluginUseConfigInfoList) {
		var ret []PluginUseConfigInfo
		return ret
	}
	return o.PluginUseConfigInfoList
}

// GetPluginUseConfigInfoListOk returns a tuple with the PluginUseConfigInfoList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PluginUseRelationInfo) GetPluginUseConfigInfoListOk() ([]PluginUseConfigInfo, bool) {
	if o == nil || IsNil(o.PluginUseConfigInfoList) {
		return nil, false
	}
	return o.PluginUseConfigInfoList, true
}

// HasPluginUseConfigInfoList returns a boolean if a field has been set.
func (o *PluginUseRelationInfo) HasPluginUseConfigInfoList() bool {
	if o != nil && !IsNil(o.PluginUseConfigInfoList) {
		return true
	}

	return false
}

// SetPluginUseConfigInfoList gets a reference to the given []PluginUseConfigInfo and assigns it to the PluginUseConfigInfoList field.
func (o *PluginUseRelationInfo) SetPluginUseConfigInfoList(v []PluginUseConfigInfo) {
	o.PluginUseConfigInfoList = v
}

// GetPluginVersion returns the PluginVersion field value if set, zero value otherwise.
func (o *PluginUseRelationInfo) GetPluginVersion() string {
	if o == nil || IsNil(o.PluginVersion) {
		var ret string
		return ret
	}
	return *o.PluginVersion
}

// GetPluginVersionOk returns a tuple with the PluginVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PluginUseRelationInfo) GetPluginVersionOk() (*string, bool) {
	if o == nil || IsNil(o.PluginVersion) {
		return nil, false
	}
	return o.PluginVersion, true
}

// HasPluginVersion returns a boolean if a field has been set.
func (o *PluginUseRelationInfo) HasPluginVersion() bool {
	if o != nil && !IsNil(o.PluginVersion) {
		return true
	}

	return false
}

// SetPluginVersion gets a reference to the given string and assigns it to the PluginVersion field.
func (o *PluginUseRelationInfo) SetPluginVersion(v string) {
	o.PluginVersion = &v
}

// GetRunModeType returns the RunModeType field value if set, zero value otherwise.
func (o *PluginUseRelationInfo) GetRunModeType() string {
	if o == nil || IsNil(o.RunModeType) {
		var ret string
		return ret
	}
	return *o.RunModeType
}

// GetRunModeTypeOk returns a tuple with the RunModeType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PluginUseRelationInfo) GetRunModeTypeOk() (*string, bool) {
	if o == nil || IsNil(o.RunModeType) {
		return nil, false
	}
	return o.RunModeType, true
}

// HasRunModeType returns a boolean if a field has been set.
func (o *PluginUseRelationInfo) HasRunModeType() bool {
	if o != nil && !IsNil(o.RunModeType) {
		return true
	}

	return false
}

// SetRunModeType gets a reference to the given string and assigns it to the RunModeType field.
func (o *PluginUseRelationInfo) SetRunModeType(v string) {
	o.RunModeType = &v
}

// GetSourceFrom returns the SourceFrom field value if set, zero value otherwise.
func (o *PluginUseRelationInfo) GetSourceFrom() string {
	if o == nil || IsNil(o.SourceFrom) {
		var ret string
		return ret
	}
	return *o.SourceFrom
}

// GetSourceFromOk returns a tuple with the SourceFrom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PluginUseRelationInfo) GetSourceFromOk() (*string, bool) {
	if o == nil || IsNil(o.SourceFrom) {
		return nil, false
	}
	return o.SourceFrom, true
}

// HasSourceFrom returns a boolean if a field has been set.
func (o *PluginUseRelationInfo) HasSourceFrom() bool {
	if o != nil && !IsNil(o.SourceFrom) {
		return true
	}

	return false
}

// SetSourceFrom gets a reference to the given string and assigns it to the SourceFrom field.
func (o *PluginUseRelationInfo) SetSourceFrom(v string) {
	o.SourceFrom = &v
}

func (o PluginUseRelationInfo) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PluginUseRelationInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BetaMemo) {
		toSerialize["beta_memo"] = o.BetaMemo
	}
	if !IsNil(o.BetaPluginVersion) {
		toSerialize["beta_plugin_version"] = o.BetaPluginVersion
	}
	if !IsNil(o.BetaQrCodeUrl) {
		toSerialize["beta_qr_code_url"] = o.BetaQrCodeUrl
	}
	if !IsNil(o.BetaStatus) {
		toSerialize["beta_status"] = o.BetaStatus
	}
	if !IsNil(o.GmtActive) {
		toSerialize["gmt_active"] = o.GmtActive
	}
	if !IsNil(o.GmtCreate) {
		toSerialize["gmt_create"] = o.GmtCreate
	}
	if !IsNil(o.GmtInvalid) {
		toSerialize["gmt_invalid"] = o.GmtInvalid
	}
	if !IsNil(o.MiniAppId) {
		toSerialize["mini_app_id"] = o.MiniAppId
	}
	if !IsNil(o.PluginDeployVersion) {
		toSerialize["plugin_deploy_version"] = o.PluginDeployVersion
	}
	if !IsNil(o.PluginId) {
		toSerialize["plugin_id"] = o.PluginId
	}
	if !IsNil(o.PluginStatus) {
		toSerialize["plugin_status"] = o.PluginStatus
	}
	if !IsNil(o.PluginUseConfigInfoList) {
		toSerialize["plugin_use_config_info_list"] = o.PluginUseConfigInfoList
	}
	if !IsNil(o.PluginVersion) {
		toSerialize["plugin_version"] = o.PluginVersion
	}
	if !IsNil(o.RunModeType) {
		toSerialize["run_mode_type"] = o.RunModeType
	}
	if !IsNil(o.SourceFrom) {
		toSerialize["source_from"] = o.SourceFrom
	}
	return toSerialize, nil
}

type NullablePluginUseRelationInfo struct {
	value *PluginUseRelationInfo
	isSet bool
}

func (v NullablePluginUseRelationInfo) Get() *PluginUseRelationInfo {
	return v.value
}

func (v *NullablePluginUseRelationInfo) Set(val *PluginUseRelationInfo) {
	v.value = val
	v.isSet = true
}

func (v NullablePluginUseRelationInfo) IsSet() bool {
	return v.isSet
}

func (v *NullablePluginUseRelationInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePluginUseRelationInfo(val *PluginUseRelationInfo) *NullablePluginUseRelationInfo {
	return &NullablePluginUseRelationInfo{value: val, isSet: true}
}

func (v NullablePluginUseRelationInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePluginUseRelationInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
