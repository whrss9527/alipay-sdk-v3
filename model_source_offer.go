/*
支付宝开放平台API

支付宝开放平台v3协议文档

API version: 2024-07-05
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alipay

import (
	"encoding/json"
)

// checks if the SourceOffer type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SourceOffer{}

// SourceOffer struct for SourceOffer
type SourceOffer struct {
	// offerId，根据offer类型对应不同ID。支持小程序的APPID/小程序服务的服务编码/优惠券的活动ID
	OfferId *string `json:"offer_id,omitempty"`
	// offer类型。目前仅支持小程序（mini_app/service）、小程序服务（subservice）、营销活动（voucher）、商品(goods)、小游戏(game)。 注意：其中“小程序”offer类型，在发布接口请用mini_app，查询接口返回为service
	OfferType *string `json:"offer_type,omitempty"`
}

// NewSourceOffer instantiates a new SourceOffer object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSourceOffer() *SourceOffer {
	this := SourceOffer{}
	return &this
}

// NewSourceOfferWithDefaults instantiates a new SourceOffer object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSourceOfferWithDefaults() *SourceOffer {
	this := SourceOffer{}
	return &this
}

// GetOfferId returns the OfferId field value if set, zero value otherwise.
func (o *SourceOffer) GetOfferId() string {
	if o == nil || IsNil(o.OfferId) {
		var ret string
		return ret
	}
	return *o.OfferId
}

// GetOfferIdOk returns a tuple with the OfferId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SourceOffer) GetOfferIdOk() (*string, bool) {
	if o == nil || IsNil(o.OfferId) {
		return nil, false
	}
	return o.OfferId, true
}

// HasOfferId returns a boolean if a field has been set.
func (o *SourceOffer) HasOfferId() bool {
	if o != nil && !IsNil(o.OfferId) {
		return true
	}

	return false
}

// SetOfferId gets a reference to the given string and assigns it to the OfferId field.
func (o *SourceOffer) SetOfferId(v string) {
	o.OfferId = &v
}

// GetOfferType returns the OfferType field value if set, zero value otherwise.
func (o *SourceOffer) GetOfferType() string {
	if o == nil || IsNil(o.OfferType) {
		var ret string
		return ret
	}
	return *o.OfferType
}

// GetOfferTypeOk returns a tuple with the OfferType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SourceOffer) GetOfferTypeOk() (*string, bool) {
	if o == nil || IsNil(o.OfferType) {
		return nil, false
	}
	return o.OfferType, true
}

// HasOfferType returns a boolean if a field has been set.
func (o *SourceOffer) HasOfferType() bool {
	if o != nil && !IsNil(o.OfferType) {
		return true
	}

	return false
}

// SetOfferType gets a reference to the given string and assigns it to the OfferType field.
func (o *SourceOffer) SetOfferType(v string) {
	o.OfferType = &v
}

func (o SourceOffer) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SourceOffer) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.OfferId) {
		toSerialize["offer_id"] = o.OfferId
	}
	if !IsNil(o.OfferType) {
		toSerialize["offer_type"] = o.OfferType
	}
	return toSerialize, nil
}

type NullableSourceOffer struct {
	value *SourceOffer
	isSet bool
}

func (v NullableSourceOffer) Get() *SourceOffer {
	return v.value
}

func (v *NullableSourceOffer) Set(val *SourceOffer) {
	v.value = val
	v.isSet = true
}

func (v NullableSourceOffer) IsSet() bool {
	return v.isSet
}

func (v *NullableSourceOffer) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSourceOffer(val *SourceOffer) *NullableSourceOffer {
	return &NullableSourceOffer{value: val, isSet: true}
}

func (v NullableSourceOffer) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSourceOffer) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
