/*
支付宝开放平台API

支付宝开放平台v3协议文档

API version: 2024-07-05
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alipay

import (
	"bytes"
	"context"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"os"
	"strconv"
	"time"
)

// AlipayOpenAgentMobilepayAPIService AlipayOpenAgentMobilepayAPI service
type AlipayOpenAgentMobilepayAPIService service

type ApiAlipayOpenAgentMobilepaySignRequest struct {
	ctx                    context.Context
	ApiService             *AlipayOpenAgentMobilepayAPIService
	appAuthPic             *os.File
	appDemo                *os.File
	appHomeScreenshot      *os.File
	appItemScreenshot      *os.File
	appPayScreenshot       *os.File
	businessLicenseAuthPic *os.File
	businessLicensePic     *os.File
	data                   *AlipayOpenAgentMobilepaySignModel
	homeScreenshot         *os.File
	inAppScreenshot        *os.File
	payScreenshot          *os.File
	specialLicensePic      *os.File
}

func (r ApiAlipayOpenAgentMobilepaySignRequest) AppAuthPic(appAuthPic *os.File) ApiAlipayOpenAgentMobilepaySignRequest {
	r.appAuthPic = appAuthPic
	return r
}

func (r ApiAlipayOpenAgentMobilepaySignRequest) AppDemo(appDemo *os.File) ApiAlipayOpenAgentMobilepaySignRequest {
	r.appDemo = appDemo
	return r
}

func (r ApiAlipayOpenAgentMobilepaySignRequest) AppHomeScreenshot(appHomeScreenshot *os.File) ApiAlipayOpenAgentMobilepaySignRequest {
	r.appHomeScreenshot = appHomeScreenshot
	return r
}

func (r ApiAlipayOpenAgentMobilepaySignRequest) AppItemScreenshot(appItemScreenshot *os.File) ApiAlipayOpenAgentMobilepaySignRequest {
	r.appItemScreenshot = appItemScreenshot
	return r
}

func (r ApiAlipayOpenAgentMobilepaySignRequest) AppPayScreenshot(appPayScreenshot *os.File) ApiAlipayOpenAgentMobilepaySignRequest {
	r.appPayScreenshot = appPayScreenshot
	return r
}

func (r ApiAlipayOpenAgentMobilepaySignRequest) BusinessLicenseAuthPic(businessLicenseAuthPic *os.File) ApiAlipayOpenAgentMobilepaySignRequest {
	r.businessLicenseAuthPic = businessLicenseAuthPic
	return r
}

func (r ApiAlipayOpenAgentMobilepaySignRequest) BusinessLicensePic(businessLicensePic *os.File) ApiAlipayOpenAgentMobilepaySignRequest {
	r.businessLicensePic = businessLicensePic
	return r
}

func (r ApiAlipayOpenAgentMobilepaySignRequest) Data(data AlipayOpenAgentMobilepaySignModel) ApiAlipayOpenAgentMobilepaySignRequest {
	r.data = &data
	return r
}

func (r ApiAlipayOpenAgentMobilepaySignRequest) HomeScreenshot(homeScreenshot *os.File) ApiAlipayOpenAgentMobilepaySignRequest {
	r.homeScreenshot = homeScreenshot
	return r
}

func (r ApiAlipayOpenAgentMobilepaySignRequest) InAppScreenshot(inAppScreenshot *os.File) ApiAlipayOpenAgentMobilepaySignRequest {
	r.inAppScreenshot = inAppScreenshot
	return r
}

func (r ApiAlipayOpenAgentMobilepaySignRequest) PayScreenshot(payScreenshot *os.File) ApiAlipayOpenAgentMobilepaySignRequest {
	r.payScreenshot = payScreenshot
	return r
}

func (r ApiAlipayOpenAgentMobilepaySignRequest) SpecialLicensePic(specialLicensePic *os.File) ApiAlipayOpenAgentMobilepaySignRequest {
	r.specialLicensePic = specialLicensePic
	return r
}

func (r ApiAlipayOpenAgentMobilepaySignRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.AlipayOpenAgentMobilepaySignExecute(r)
}

/*
AlipayOpenAgentMobilepaySign 代签约APP支付产品

三方应用代理签约APP支付产品，需要配合开启事务接口使用

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiAlipayOpenAgentMobilepaySignRequest
*/
func (r *AlipayOpenAgentMobilepayAPIService) AlipayOpenAgentMobilepaySign(ctx context.Context) ApiAlipayOpenAgentMobilepaySignRequest {
	return ApiAlipayOpenAgentMobilepaySignRequest{
		ApiService: r,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return map[string]interface{}
func (a *AlipayOpenAgentMobilepayAPIService) AlipayOpenAgentMobilepaySignExecute(r ApiAlipayOpenAgentMobilepaySignRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AlipayOpenAgentMobilepayAPIService.AlipayOpenAgentMobilepaySign")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/alipay/open/agent/mobilepay/sign"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	var appAuthPicLocalVarFormFileName string
	var appAuthPicLocalVarFileName string
	var appAuthPicLocalVarFileBytes []byte

	appAuthPicLocalVarFormFileName = "app_auth_pic"
	appAuthPicLocalVarFile := r.appAuthPic

	if appAuthPicLocalVarFile != nil {
		fbs, _ := io.ReadAll(appAuthPicLocalVarFile)

		appAuthPicLocalVarFileBytes = fbs
		appAuthPicLocalVarFileName = appAuthPicLocalVarFile.Name()
		appAuthPicLocalVarFile.Close()
		formFiles = append(formFiles, formFile{fileBytes: appAuthPicLocalVarFileBytes, fileName: appAuthPicLocalVarFileName, formFileName: appAuthPicLocalVarFormFileName})
	}
	var appDemoLocalVarFormFileName string
	var appDemoLocalVarFileName string
	var appDemoLocalVarFileBytes []byte

	appDemoLocalVarFormFileName = "app_demo"
	appDemoLocalVarFile := r.appDemo

	if appDemoLocalVarFile != nil {
		fbs, _ := io.ReadAll(appDemoLocalVarFile)

		appDemoLocalVarFileBytes = fbs
		appDemoLocalVarFileName = appDemoLocalVarFile.Name()
		appDemoLocalVarFile.Close()
		formFiles = append(formFiles, formFile{fileBytes: appDemoLocalVarFileBytes, fileName: appDemoLocalVarFileName, formFileName: appDemoLocalVarFormFileName})
	}
	var appHomeScreenshotLocalVarFormFileName string
	var appHomeScreenshotLocalVarFileName string
	var appHomeScreenshotLocalVarFileBytes []byte

	appHomeScreenshotLocalVarFormFileName = "app_home_screenshot"
	appHomeScreenshotLocalVarFile := r.appHomeScreenshot

	if appHomeScreenshotLocalVarFile != nil {
		fbs, _ := io.ReadAll(appHomeScreenshotLocalVarFile)

		appHomeScreenshotLocalVarFileBytes = fbs
		appHomeScreenshotLocalVarFileName = appHomeScreenshotLocalVarFile.Name()
		appHomeScreenshotLocalVarFile.Close()
		formFiles = append(formFiles, formFile{fileBytes: appHomeScreenshotLocalVarFileBytes, fileName: appHomeScreenshotLocalVarFileName, formFileName: appHomeScreenshotLocalVarFormFileName})
	}
	var appItemScreenshotLocalVarFormFileName string
	var appItemScreenshotLocalVarFileName string
	var appItemScreenshotLocalVarFileBytes []byte

	appItemScreenshotLocalVarFormFileName = "app_item_screenshot"
	appItemScreenshotLocalVarFile := r.appItemScreenshot

	if appItemScreenshotLocalVarFile != nil {
		fbs, _ := io.ReadAll(appItemScreenshotLocalVarFile)

		appItemScreenshotLocalVarFileBytes = fbs
		appItemScreenshotLocalVarFileName = appItemScreenshotLocalVarFile.Name()
		appItemScreenshotLocalVarFile.Close()
		formFiles = append(formFiles, formFile{fileBytes: appItemScreenshotLocalVarFileBytes, fileName: appItemScreenshotLocalVarFileName, formFileName: appItemScreenshotLocalVarFormFileName})
	}
	var appPayScreenshotLocalVarFormFileName string
	var appPayScreenshotLocalVarFileName string
	var appPayScreenshotLocalVarFileBytes []byte

	appPayScreenshotLocalVarFormFileName = "app_pay_screenshot"
	appPayScreenshotLocalVarFile := r.appPayScreenshot

	if appPayScreenshotLocalVarFile != nil {
		fbs, _ := io.ReadAll(appPayScreenshotLocalVarFile)

		appPayScreenshotLocalVarFileBytes = fbs
		appPayScreenshotLocalVarFileName = appPayScreenshotLocalVarFile.Name()
		appPayScreenshotLocalVarFile.Close()
		formFiles = append(formFiles, formFile{fileBytes: appPayScreenshotLocalVarFileBytes, fileName: appPayScreenshotLocalVarFileName, formFileName: appPayScreenshotLocalVarFormFileName})
	}
	var businessLicenseAuthPicLocalVarFormFileName string
	var businessLicenseAuthPicLocalVarFileName string
	var businessLicenseAuthPicLocalVarFileBytes []byte

	businessLicenseAuthPicLocalVarFormFileName = "business_license_auth_pic"
	businessLicenseAuthPicLocalVarFile := r.businessLicenseAuthPic

	if businessLicenseAuthPicLocalVarFile != nil {
		fbs, _ := io.ReadAll(businessLicenseAuthPicLocalVarFile)

		businessLicenseAuthPicLocalVarFileBytes = fbs
		businessLicenseAuthPicLocalVarFileName = businessLicenseAuthPicLocalVarFile.Name()
		businessLicenseAuthPicLocalVarFile.Close()
		formFiles = append(formFiles, formFile{fileBytes: businessLicenseAuthPicLocalVarFileBytes, fileName: businessLicenseAuthPicLocalVarFileName, formFileName: businessLicenseAuthPicLocalVarFormFileName})
	}
	var businessLicensePicLocalVarFormFileName string
	var businessLicensePicLocalVarFileName string
	var businessLicensePicLocalVarFileBytes []byte

	businessLicensePicLocalVarFormFileName = "business_license_pic"
	businessLicensePicLocalVarFile := r.businessLicensePic

	if businessLicensePicLocalVarFile != nil {
		fbs, _ := io.ReadAll(businessLicensePicLocalVarFile)

		businessLicensePicLocalVarFileBytes = fbs
		businessLicensePicLocalVarFileName = businessLicensePicLocalVarFile.Name()
		businessLicensePicLocalVarFile.Close()
		formFiles = append(formFiles, formFile{fileBytes: businessLicensePicLocalVarFileBytes, fileName: businessLicensePicLocalVarFileName, formFileName: businessLicensePicLocalVarFormFileName})
	}
	if r.data != nil {
		paramJson, err := parameterToJson(*r.data)
		if err != nil {
			return localVarReturnValue, nil, err
		}
		localVarFormParams.Add("data", paramJson)
	}
	var homeScreenshotLocalVarFormFileName string
	var homeScreenshotLocalVarFileName string
	var homeScreenshotLocalVarFileBytes []byte

	homeScreenshotLocalVarFormFileName = "home_screenshot"
	homeScreenshotLocalVarFile := r.homeScreenshot

	if homeScreenshotLocalVarFile != nil {
		fbs, _ := io.ReadAll(homeScreenshotLocalVarFile)

		homeScreenshotLocalVarFileBytes = fbs
		homeScreenshotLocalVarFileName = homeScreenshotLocalVarFile.Name()
		homeScreenshotLocalVarFile.Close()
		formFiles = append(formFiles, formFile{fileBytes: homeScreenshotLocalVarFileBytes, fileName: homeScreenshotLocalVarFileName, formFileName: homeScreenshotLocalVarFormFileName})
	}
	var inAppScreenshotLocalVarFormFileName string
	var inAppScreenshotLocalVarFileName string
	var inAppScreenshotLocalVarFileBytes []byte

	inAppScreenshotLocalVarFormFileName = "in_app_screenshot"
	inAppScreenshotLocalVarFile := r.inAppScreenshot

	if inAppScreenshotLocalVarFile != nil {
		fbs, _ := io.ReadAll(inAppScreenshotLocalVarFile)

		inAppScreenshotLocalVarFileBytes = fbs
		inAppScreenshotLocalVarFileName = inAppScreenshotLocalVarFile.Name()
		inAppScreenshotLocalVarFile.Close()
		formFiles = append(formFiles, formFile{fileBytes: inAppScreenshotLocalVarFileBytes, fileName: inAppScreenshotLocalVarFileName, formFileName: inAppScreenshotLocalVarFormFileName})
	}
	var payScreenshotLocalVarFormFileName string
	var payScreenshotLocalVarFileName string
	var payScreenshotLocalVarFileBytes []byte

	payScreenshotLocalVarFormFileName = "pay_screenshot"
	payScreenshotLocalVarFile := r.payScreenshot

	if payScreenshotLocalVarFile != nil {
		fbs, _ := io.ReadAll(payScreenshotLocalVarFile)

		payScreenshotLocalVarFileBytes = fbs
		payScreenshotLocalVarFileName = payScreenshotLocalVarFile.Name()
		payScreenshotLocalVarFile.Close()
		formFiles = append(formFiles, formFile{fileBytes: payScreenshotLocalVarFileBytes, fileName: payScreenshotLocalVarFileName, formFileName: payScreenshotLocalVarFormFileName})
	}
	var specialLicensePicLocalVarFormFileName string
	var specialLicensePicLocalVarFileName string
	var specialLicensePicLocalVarFileBytes []byte

	specialLicensePicLocalVarFormFileName = "special_license_pic"
	specialLicensePicLocalVarFile := r.specialLicensePic

	if specialLicensePicLocalVarFile != nil {
		fbs, _ := io.ReadAll(specialLicensePicLocalVarFile)

		specialLicensePicLocalVarFileBytes = fbs
		specialLicensePicLocalVarFileName = specialLicensePicLocalVarFile.Name()
		specialLicensePicLocalVarFile.Close()
		formFiles = append(formFiles, formFile{fileBytes: specialLicensePicLocalVarFileBytes, fileName: specialLicensePicLocalVarFileName, formFileName: specialLicensePicLocalVarFormFileName})
	}

	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	// Add signing logic
	err = a.signRequest(req)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	// Add verification logic
	err = a.verifyResponse(localVarHTTPResponse, localVarBody)
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v AlipayOpenAgentMobilepaySignDefaultResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

func (a *AlipayOpenAgentMobilepayAPIService) signRequest(req *http.Request) error {
	appID := a.client.cfg.AppID
	appCertSN := a.client.cfg.AppCertSN
	privateKey := a.client.cfg.PrivateKey

	nonce := generateUUID()
	timestamp := strconv.FormatInt(time.Now().UnixNano()/1e6, 10)

	authString := fmt.Sprintf("app_id=%s", appID)
	if appCertSN != "" {
		authString += fmt.Sprintf(",app_cert_sn=%s", appCertSN)
	}
	authString += fmt.Sprintf(",nonce=%s,timestamp=%s", nonce, timestamp)

	httpMethod := req.Method
	httpRequestUri := req.URL.Path
	if req.URL.RawQuery != "" {
		httpRequestUri += "?" + req.URL.RawQuery
	}

	var httpRequestBody string
	if req.Body != nil {
		bodyBytes, err := io.ReadAll(req.Body)
		if err != nil {
			return err
		}
		httpRequestBody = string(bodyBytes)
		req.Body = io.NopCloser(bytes.NewBuffer(bodyBytes))
	}

	content := authString + "\n" +
		httpMethod + "\n" +
		httpRequestUri + "\n" +
		httpRequestBody + "\n"

	if appAuthToken := req.Header.Get("alipay-app-auth-token"); appAuthToken != "" {
		content += appAuthToken + "\n"
	}

	signature, err := signWithRSA(content, privateKey)
	if err != nil {
		return err
	}

	req.Header.Set("Authorization", fmt.Sprintf("ALIPAY-SHA256withRSA %s,sign=%s", authString, signature))
	return nil
}

func (a *AlipayOpenAgentMobilepayAPIService) verifyResponse(resp *http.Response, body []byte) error {
	timestamp := resp.Header.Get("alipay-timestamp")
	nonce := resp.Header.Get("alipay-nonce")
	sign := resp.Header.Get("alipay-signature")

	content := timestamp + "\n" +
		nonce + "\n" +
		string(body) + "\n"

	publicKey := a.client.cfg.PublicKey

	return verifyWithRSA(content, sign, publicKey)
}
