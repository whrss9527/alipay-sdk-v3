/*
支付宝开放平台API

支付宝开放平台v3协议文档

API version: 2024-07-05
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ExpenseCtrlEmployeeRuleInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExpenseCtrlEmployeeRuleInfo{}

// ExpenseCtrlEmployeeRuleInfo struct for ExpenseCtrlEmployeeRuleInfo
type ExpenseCtrlEmployeeRuleInfo struct {
	// 费控规则状态，1表示有效，0表示无效
	Effective *int32 `json:"effective,omitempty"`
	// 费控规则有效期截止
	EffectiveEndDate *string `json:"effective_end_date,omitempty"`
	// 费控规则有效期起始
	EffectiveStartDate *string `json:"effective_start_date,omitempty"`
	// 费控规则作用范围， EMPLOYEE表示员工，ENTERPRISE表示企业
	OwnerType *string `json:"owner_type,omitempty"`
	// 费控规则ID
	StandardId *string `json:"standard_id,omitempty"`
	// 费控规则名称
	StandardName *string `json:"standard_name,omitempty"`
}

// NewExpenseCtrlEmployeeRuleInfo instantiates a new ExpenseCtrlEmployeeRuleInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExpenseCtrlEmployeeRuleInfo() *ExpenseCtrlEmployeeRuleInfo {
	this := ExpenseCtrlEmployeeRuleInfo{}
	return &this
}

// NewExpenseCtrlEmployeeRuleInfoWithDefaults instantiates a new ExpenseCtrlEmployeeRuleInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExpenseCtrlEmployeeRuleInfoWithDefaults() *ExpenseCtrlEmployeeRuleInfo {
	this := ExpenseCtrlEmployeeRuleInfo{}
	return &this
}

// GetEffective returns the Effective field value if set, zero value otherwise.
func (o *ExpenseCtrlEmployeeRuleInfo) GetEffective() int32 {
	if o == nil || IsNil(o.Effective) {
		var ret int32
		return ret
	}
	return *o.Effective
}

// GetEffectiveOk returns a tuple with the Effective field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExpenseCtrlEmployeeRuleInfo) GetEffectiveOk() (*int32, bool) {
	if o == nil || IsNil(o.Effective) {
		return nil, false
	}
	return o.Effective, true
}

// HasEffective returns a boolean if a field has been set.
func (o *ExpenseCtrlEmployeeRuleInfo) HasEffective() bool {
	if o != nil && !IsNil(o.Effective) {
		return true
	}

	return false
}

// SetEffective gets a reference to the given int32 and assigns it to the Effective field.
func (o *ExpenseCtrlEmployeeRuleInfo) SetEffective(v int32) {
	o.Effective = &v
}

// GetEffectiveEndDate returns the EffectiveEndDate field value if set, zero value otherwise.
func (o *ExpenseCtrlEmployeeRuleInfo) GetEffectiveEndDate() string {
	if o == nil || IsNil(o.EffectiveEndDate) {
		var ret string
		return ret
	}
	return *o.EffectiveEndDate
}

// GetEffectiveEndDateOk returns a tuple with the EffectiveEndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExpenseCtrlEmployeeRuleInfo) GetEffectiveEndDateOk() (*string, bool) {
	if o == nil || IsNil(o.EffectiveEndDate) {
		return nil, false
	}
	return o.EffectiveEndDate, true
}

// HasEffectiveEndDate returns a boolean if a field has been set.
func (o *ExpenseCtrlEmployeeRuleInfo) HasEffectiveEndDate() bool {
	if o != nil && !IsNil(o.EffectiveEndDate) {
		return true
	}

	return false
}

// SetEffectiveEndDate gets a reference to the given string and assigns it to the EffectiveEndDate field.
func (o *ExpenseCtrlEmployeeRuleInfo) SetEffectiveEndDate(v string) {
	o.EffectiveEndDate = &v
}

// GetEffectiveStartDate returns the EffectiveStartDate field value if set, zero value otherwise.
func (o *ExpenseCtrlEmployeeRuleInfo) GetEffectiveStartDate() string {
	if o == nil || IsNil(o.EffectiveStartDate) {
		var ret string
		return ret
	}
	return *o.EffectiveStartDate
}

// GetEffectiveStartDateOk returns a tuple with the EffectiveStartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExpenseCtrlEmployeeRuleInfo) GetEffectiveStartDateOk() (*string, bool) {
	if o == nil || IsNil(o.EffectiveStartDate) {
		return nil, false
	}
	return o.EffectiveStartDate, true
}

// HasEffectiveStartDate returns a boolean if a field has been set.
func (o *ExpenseCtrlEmployeeRuleInfo) HasEffectiveStartDate() bool {
	if o != nil && !IsNil(o.EffectiveStartDate) {
		return true
	}

	return false
}

// SetEffectiveStartDate gets a reference to the given string and assigns it to the EffectiveStartDate field.
func (o *ExpenseCtrlEmployeeRuleInfo) SetEffectiveStartDate(v string) {
	o.EffectiveStartDate = &v
}

// GetOwnerType returns the OwnerType field value if set, zero value otherwise.
func (o *ExpenseCtrlEmployeeRuleInfo) GetOwnerType() string {
	if o == nil || IsNil(o.OwnerType) {
		var ret string
		return ret
	}
	return *o.OwnerType
}

// GetOwnerTypeOk returns a tuple with the OwnerType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExpenseCtrlEmployeeRuleInfo) GetOwnerTypeOk() (*string, bool) {
	if o == nil || IsNil(o.OwnerType) {
		return nil, false
	}
	return o.OwnerType, true
}

// HasOwnerType returns a boolean if a field has been set.
func (o *ExpenseCtrlEmployeeRuleInfo) HasOwnerType() bool {
	if o != nil && !IsNil(o.OwnerType) {
		return true
	}

	return false
}

// SetOwnerType gets a reference to the given string and assigns it to the OwnerType field.
func (o *ExpenseCtrlEmployeeRuleInfo) SetOwnerType(v string) {
	o.OwnerType = &v
}

// GetStandardId returns the StandardId field value if set, zero value otherwise.
func (o *ExpenseCtrlEmployeeRuleInfo) GetStandardId() string {
	if o == nil || IsNil(o.StandardId) {
		var ret string
		return ret
	}
	return *o.StandardId
}

// GetStandardIdOk returns a tuple with the StandardId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExpenseCtrlEmployeeRuleInfo) GetStandardIdOk() (*string, bool) {
	if o == nil || IsNil(o.StandardId) {
		return nil, false
	}
	return o.StandardId, true
}

// HasStandardId returns a boolean if a field has been set.
func (o *ExpenseCtrlEmployeeRuleInfo) HasStandardId() bool {
	if o != nil && !IsNil(o.StandardId) {
		return true
	}

	return false
}

// SetStandardId gets a reference to the given string and assigns it to the StandardId field.
func (o *ExpenseCtrlEmployeeRuleInfo) SetStandardId(v string) {
	o.StandardId = &v
}

// GetStandardName returns the StandardName field value if set, zero value otherwise.
func (o *ExpenseCtrlEmployeeRuleInfo) GetStandardName() string {
	if o == nil || IsNil(o.StandardName) {
		var ret string
		return ret
	}
	return *o.StandardName
}

// GetStandardNameOk returns a tuple with the StandardName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExpenseCtrlEmployeeRuleInfo) GetStandardNameOk() (*string, bool) {
	if o == nil || IsNil(o.StandardName) {
		return nil, false
	}
	return o.StandardName, true
}

// HasStandardName returns a boolean if a field has been set.
func (o *ExpenseCtrlEmployeeRuleInfo) HasStandardName() bool {
	if o != nil && !IsNil(o.StandardName) {
		return true
	}

	return false
}

// SetStandardName gets a reference to the given string and assigns it to the StandardName field.
func (o *ExpenseCtrlEmployeeRuleInfo) SetStandardName(v string) {
	o.StandardName = &v
}

func (o ExpenseCtrlEmployeeRuleInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExpenseCtrlEmployeeRuleInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Effective) {
		toSerialize["effective"] = o.Effective
	}
	if !IsNil(o.EffectiveEndDate) {
		toSerialize["effective_end_date"] = o.EffectiveEndDate
	}
	if !IsNil(o.EffectiveStartDate) {
		toSerialize["effective_start_date"] = o.EffectiveStartDate
	}
	if !IsNil(o.OwnerType) {
		toSerialize["owner_type"] = o.OwnerType
	}
	if !IsNil(o.StandardId) {
		toSerialize["standard_id"] = o.StandardId
	}
	if !IsNil(o.StandardName) {
		toSerialize["standard_name"] = o.StandardName
	}
	return toSerialize, nil
}

type NullableExpenseCtrlEmployeeRuleInfo struct {
	value *ExpenseCtrlEmployeeRuleInfo
	isSet bool
}

func (v NullableExpenseCtrlEmployeeRuleInfo) Get() *ExpenseCtrlEmployeeRuleInfo {
	return v.value
}

func (v *NullableExpenseCtrlEmployeeRuleInfo) Set(val *ExpenseCtrlEmployeeRuleInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableExpenseCtrlEmployeeRuleInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableExpenseCtrlEmployeeRuleInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExpenseCtrlEmployeeRuleInfo(val *ExpenseCtrlEmployeeRuleInfo) *NullableExpenseCtrlEmployeeRuleInfo {
	return &NullableExpenseCtrlEmployeeRuleInfo{value: val, isSet: true}
}

func (v NullableExpenseCtrlEmployeeRuleInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExpenseCtrlEmployeeRuleInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


