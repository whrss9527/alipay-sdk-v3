/*
支付宝开放平台API

支付宝开放平台v3协议文档

API version: 2024-07-05
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alipay

import (
	"encoding/json"
)

// checks if the ReplyRecord type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReplyRecord{}

// ReplyRecord struct for ReplyRecord
type ReplyRecord struct {
	// 回复内容
	Content *string `json:"content,omitempty"`
	// 回复时间
	GmtCreate *string `json:"gmt_create,omitempty"`
	// 回复图片
	Images []string `json:"images,omitempty"`
	// 回复角色 商家：MERCHANT  审核小二：AUDITOR
	ReplierRole *string `json:"replier_role,omitempty"`
	// 状态。只在replier_role = ‘AUDITOR’时有值
	Status *string `json:"status,omitempty"`
}

// NewReplyRecord instantiates a new ReplyRecord object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReplyRecord() *ReplyRecord {
	this := ReplyRecord{}
	return &this
}

// NewReplyRecordWithDefaults instantiates a new ReplyRecord object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReplyRecordWithDefaults() *ReplyRecord {
	this := ReplyRecord{}
	return &this
}

// GetContent returns the Content field value if set, zero value otherwise.
func (o *ReplyRecord) GetContent() string {
	if o == nil || IsNil(o.Content) {
		var ret string
		return ret
	}
	return *o.Content
}

// GetContentOk returns a tuple with the Content field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReplyRecord) GetContentOk() (*string, bool) {
	if o == nil || IsNil(o.Content) {
		return nil, false
	}
	return o.Content, true
}

// HasContent returns a boolean if a field has been set.
func (o *ReplyRecord) HasContent() bool {
	if o != nil && !IsNil(o.Content) {
		return true
	}

	return false
}

// SetContent gets a reference to the given string and assigns it to the Content field.
func (o *ReplyRecord) SetContent(v string) {
	o.Content = &v
}

// GetGmtCreate returns the GmtCreate field value if set, zero value otherwise.
func (o *ReplyRecord) GetGmtCreate() string {
	if o == nil || IsNil(o.GmtCreate) {
		var ret string
		return ret
	}
	return *o.GmtCreate
}

// GetGmtCreateOk returns a tuple with the GmtCreate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReplyRecord) GetGmtCreateOk() (*string, bool) {
	if o == nil || IsNil(o.GmtCreate) {
		return nil, false
	}
	return o.GmtCreate, true
}

// HasGmtCreate returns a boolean if a field has been set.
func (o *ReplyRecord) HasGmtCreate() bool {
	if o != nil && !IsNil(o.GmtCreate) {
		return true
	}

	return false
}

// SetGmtCreate gets a reference to the given string and assigns it to the GmtCreate field.
func (o *ReplyRecord) SetGmtCreate(v string) {
	o.GmtCreate = &v
}

// GetImages returns the Images field value if set, zero value otherwise.
func (o *ReplyRecord) GetImages() []string {
	if o == nil || IsNil(o.Images) {
		var ret []string
		return ret
	}
	return o.Images
}

// GetImagesOk returns a tuple with the Images field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReplyRecord) GetImagesOk() ([]string, bool) {
	if o == nil || IsNil(o.Images) {
		return nil, false
	}
	return o.Images, true
}

// HasImages returns a boolean if a field has been set.
func (o *ReplyRecord) HasImages() bool {
	if o != nil && !IsNil(o.Images) {
		return true
	}

	return false
}

// SetImages gets a reference to the given []string and assigns it to the Images field.
func (o *ReplyRecord) SetImages(v []string) {
	o.Images = v
}

// GetReplierRole returns the ReplierRole field value if set, zero value otherwise.
func (o *ReplyRecord) GetReplierRole() string {
	if o == nil || IsNil(o.ReplierRole) {
		var ret string
		return ret
	}
	return *o.ReplierRole
}

// GetReplierRoleOk returns a tuple with the ReplierRole field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReplyRecord) GetReplierRoleOk() (*string, bool) {
	if o == nil || IsNil(o.ReplierRole) {
		return nil, false
	}
	return o.ReplierRole, true
}

// HasReplierRole returns a boolean if a field has been set.
func (o *ReplyRecord) HasReplierRole() bool {
	if o != nil && !IsNil(o.ReplierRole) {
		return true
	}

	return false
}

// SetReplierRole gets a reference to the given string and assigns it to the ReplierRole field.
func (o *ReplyRecord) SetReplierRole(v string) {
	o.ReplierRole = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *ReplyRecord) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReplyRecord) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *ReplyRecord) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *ReplyRecord) SetStatus(v string) {
	o.Status = &v
}

func (o ReplyRecord) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReplyRecord) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Content) {
		toSerialize["content"] = o.Content
	}
	if !IsNil(o.GmtCreate) {
		toSerialize["gmt_create"] = o.GmtCreate
	}
	if !IsNil(o.Images) {
		toSerialize["images"] = o.Images
	}
	if !IsNil(o.ReplierRole) {
		toSerialize["replier_role"] = o.ReplierRole
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	return toSerialize, nil
}

type NullableReplyRecord struct {
	value *ReplyRecord
	isSet bool
}

func (v NullableReplyRecord) Get() *ReplyRecord {
	return v.value
}

func (v *NullableReplyRecord) Set(val *ReplyRecord) {
	v.value = val
	v.isSet = true
}

func (v NullableReplyRecord) IsSet() bool {
	return v.isSet
}

func (v *NullableReplyRecord) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReplyRecord(val *ReplyRecord) *NullableReplyRecord {
	return &NullableReplyRecord{value: val, isSet: true}
}

func (v NullableReplyRecord) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReplyRecord) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
