/*
支付宝开放平台API

支付宝开放平台v3协议文档

API version: 2024-07-05
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alipay

import (
	"encoding/json"
)

// checks if the VoucherUseRule type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VoucherUseRule{}

// VoucherUseRule struct for VoucherUseRule
type VoucherUseRule struct {
	DiscountVoucher       *DiscountVoucher       `json:"discount_voucher,omitempty"`
	ExchangeVoucher       *ExchangeVoucher       `json:"exchange_voucher,omitempty"`
	FixVoucher            *FixVoucher            `json:"fix_voucher,omitempty"`
	SpecialVoucher        *SpecialVoucher        `json:"special_voucher,omitempty"`
	VoucherAvailableScope *VoucherAvailableScope `json:"voucher_available_scope,omitempty"`
	VoucherValidPeriod    *VoucherValidPeriod    `json:"voucher_valid_period,omitempty"`
}

// NewVoucherUseRule instantiates a new VoucherUseRule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVoucherUseRule() *VoucherUseRule {
	this := VoucherUseRule{}
	return &this
}

// NewVoucherUseRuleWithDefaults instantiates a new VoucherUseRule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVoucherUseRuleWithDefaults() *VoucherUseRule {
	this := VoucherUseRule{}
	return &this
}

// GetDiscountVoucher returns the DiscountVoucher field value if set, zero value otherwise.
func (o *VoucherUseRule) GetDiscountVoucher() DiscountVoucher {
	if o == nil || IsNil(o.DiscountVoucher) {
		var ret DiscountVoucher
		return ret
	}
	return *o.DiscountVoucher
}

// GetDiscountVoucherOk returns a tuple with the DiscountVoucher field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VoucherUseRule) GetDiscountVoucherOk() (*DiscountVoucher, bool) {
	if o == nil || IsNil(o.DiscountVoucher) {
		return nil, false
	}
	return o.DiscountVoucher, true
}

// HasDiscountVoucher returns a boolean if a field has been set.
func (o *VoucherUseRule) HasDiscountVoucher() bool {
	if o != nil && !IsNil(o.DiscountVoucher) {
		return true
	}

	return false
}

// SetDiscountVoucher gets a reference to the given DiscountVoucher and assigns it to the DiscountVoucher field.
func (o *VoucherUseRule) SetDiscountVoucher(v DiscountVoucher) {
	o.DiscountVoucher = &v
}

// GetExchangeVoucher returns the ExchangeVoucher field value if set, zero value otherwise.
func (o *VoucherUseRule) GetExchangeVoucher() ExchangeVoucher {
	if o == nil || IsNil(o.ExchangeVoucher) {
		var ret ExchangeVoucher
		return ret
	}
	return *o.ExchangeVoucher
}

// GetExchangeVoucherOk returns a tuple with the ExchangeVoucher field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VoucherUseRule) GetExchangeVoucherOk() (*ExchangeVoucher, bool) {
	if o == nil || IsNil(o.ExchangeVoucher) {
		return nil, false
	}
	return o.ExchangeVoucher, true
}

// HasExchangeVoucher returns a boolean if a field has been set.
func (o *VoucherUseRule) HasExchangeVoucher() bool {
	if o != nil && !IsNil(o.ExchangeVoucher) {
		return true
	}

	return false
}

// SetExchangeVoucher gets a reference to the given ExchangeVoucher and assigns it to the ExchangeVoucher field.
func (o *VoucherUseRule) SetExchangeVoucher(v ExchangeVoucher) {
	o.ExchangeVoucher = &v
}

// GetFixVoucher returns the FixVoucher field value if set, zero value otherwise.
func (o *VoucherUseRule) GetFixVoucher() FixVoucher {
	if o == nil || IsNil(o.FixVoucher) {
		var ret FixVoucher
		return ret
	}
	return *o.FixVoucher
}

// GetFixVoucherOk returns a tuple with the FixVoucher field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VoucherUseRule) GetFixVoucherOk() (*FixVoucher, bool) {
	if o == nil || IsNil(o.FixVoucher) {
		return nil, false
	}
	return o.FixVoucher, true
}

// HasFixVoucher returns a boolean if a field has been set.
func (o *VoucherUseRule) HasFixVoucher() bool {
	if o != nil && !IsNil(o.FixVoucher) {
		return true
	}

	return false
}

// SetFixVoucher gets a reference to the given FixVoucher and assigns it to the FixVoucher field.
func (o *VoucherUseRule) SetFixVoucher(v FixVoucher) {
	o.FixVoucher = &v
}

// GetSpecialVoucher returns the SpecialVoucher field value if set, zero value otherwise.
func (o *VoucherUseRule) GetSpecialVoucher() SpecialVoucher {
	if o == nil || IsNil(o.SpecialVoucher) {
		var ret SpecialVoucher
		return ret
	}
	return *o.SpecialVoucher
}

// GetSpecialVoucherOk returns a tuple with the SpecialVoucher field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VoucherUseRule) GetSpecialVoucherOk() (*SpecialVoucher, bool) {
	if o == nil || IsNil(o.SpecialVoucher) {
		return nil, false
	}
	return o.SpecialVoucher, true
}

// HasSpecialVoucher returns a boolean if a field has been set.
func (o *VoucherUseRule) HasSpecialVoucher() bool {
	if o != nil && !IsNil(o.SpecialVoucher) {
		return true
	}

	return false
}

// SetSpecialVoucher gets a reference to the given SpecialVoucher and assigns it to the SpecialVoucher field.
func (o *VoucherUseRule) SetSpecialVoucher(v SpecialVoucher) {
	o.SpecialVoucher = &v
}

// GetVoucherAvailableScope returns the VoucherAvailableScope field value if set, zero value otherwise.
func (o *VoucherUseRule) GetVoucherAvailableScope() VoucherAvailableScope {
	if o == nil || IsNil(o.VoucherAvailableScope) {
		var ret VoucherAvailableScope
		return ret
	}
	return *o.VoucherAvailableScope
}

// GetVoucherAvailableScopeOk returns a tuple with the VoucherAvailableScope field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VoucherUseRule) GetVoucherAvailableScopeOk() (*VoucherAvailableScope, bool) {
	if o == nil || IsNil(o.VoucherAvailableScope) {
		return nil, false
	}
	return o.VoucherAvailableScope, true
}

// HasVoucherAvailableScope returns a boolean if a field has been set.
func (o *VoucherUseRule) HasVoucherAvailableScope() bool {
	if o != nil && !IsNil(o.VoucherAvailableScope) {
		return true
	}

	return false
}

// SetVoucherAvailableScope gets a reference to the given VoucherAvailableScope and assigns it to the VoucherAvailableScope field.
func (o *VoucherUseRule) SetVoucherAvailableScope(v VoucherAvailableScope) {
	o.VoucherAvailableScope = &v
}

// GetVoucherValidPeriod returns the VoucherValidPeriod field value if set, zero value otherwise.
func (o *VoucherUseRule) GetVoucherValidPeriod() VoucherValidPeriod {
	if o == nil || IsNil(o.VoucherValidPeriod) {
		var ret VoucherValidPeriod
		return ret
	}
	return *o.VoucherValidPeriod
}

// GetVoucherValidPeriodOk returns a tuple with the VoucherValidPeriod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VoucherUseRule) GetVoucherValidPeriodOk() (*VoucherValidPeriod, bool) {
	if o == nil || IsNil(o.VoucherValidPeriod) {
		return nil, false
	}
	return o.VoucherValidPeriod, true
}

// HasVoucherValidPeriod returns a boolean if a field has been set.
func (o *VoucherUseRule) HasVoucherValidPeriod() bool {
	if o != nil && !IsNil(o.VoucherValidPeriod) {
		return true
	}

	return false
}

// SetVoucherValidPeriod gets a reference to the given VoucherValidPeriod and assigns it to the VoucherValidPeriod field.
func (o *VoucherUseRule) SetVoucherValidPeriod(v VoucherValidPeriod) {
	o.VoucherValidPeriod = &v
}

func (o VoucherUseRule) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VoucherUseRule) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DiscountVoucher) {
		toSerialize["discount_voucher"] = o.DiscountVoucher
	}
	if !IsNil(o.ExchangeVoucher) {
		toSerialize["exchange_voucher"] = o.ExchangeVoucher
	}
	if !IsNil(o.FixVoucher) {
		toSerialize["fix_voucher"] = o.FixVoucher
	}
	if !IsNil(o.SpecialVoucher) {
		toSerialize["special_voucher"] = o.SpecialVoucher
	}
	if !IsNil(o.VoucherAvailableScope) {
		toSerialize["voucher_available_scope"] = o.VoucherAvailableScope
	}
	if !IsNil(o.VoucherValidPeriod) {
		toSerialize["voucher_valid_period"] = o.VoucherValidPeriod
	}
	return toSerialize, nil
}

type NullableVoucherUseRule struct {
	value *VoucherUseRule
	isSet bool
}

func (v NullableVoucherUseRule) Get() *VoucherUseRule {
	return v.value
}

func (v *NullableVoucherUseRule) Set(val *VoucherUseRule) {
	v.value = val
	v.isSet = true
}

func (v NullableVoucherUseRule) IsSet() bool {
	return v.isSet
}

func (v *NullableVoucherUseRule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVoucherUseRule(val *VoucherUseRule) *NullableVoucherUseRule {
	return &NullableVoucherUseRule{value: val, isSet: true}
}

func (v NullableVoucherUseRule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVoucherUseRule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
