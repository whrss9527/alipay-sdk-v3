/*
支付宝开放平台API

支付宝开放平台v3协议文档

API version: 2024-07-05
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alipay

import (
	"bytes"
	"context"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strconv"
	"time"
)

// AlipayMarketingActivityUserAPIService AlipayMarketingActivityUserAPI service
type AlipayMarketingActivityUserAPIService service

type ApiAlipayMarketingActivityUserBatchqueryvoucherRequest struct {
	ctx                context.Context
	ApiService         *AlipayMarketingActivityUserAPIService
	authToken          *string
	userId             *string
	openId             *string
	activityId         *string
	belongMerchantId   *string
	senderMerchantId   *string
	voucherStatus      *string
	pageNum            *int32
	merchantAccessMode *string
	pageSize           *int32
}

// 用户授权令牌
func (r ApiAlipayMarketingActivityUserBatchqueryvoucherRequest) AuthToken(authToken string) ApiAlipayMarketingActivityUserBatchqueryvoucherRequest {
	r.authToken = &authToken
	return r
}

// 支付宝用户 id
func (r ApiAlipayMarketingActivityUserBatchqueryvoucherRequest) UserId(userId string) ApiAlipayMarketingActivityUserBatchqueryvoucherRequest {
	r.userId = &userId
	return r
}

// 支付宝用户openId
func (r ApiAlipayMarketingActivityUserBatchqueryvoucherRequest) OpenId(openId string) ApiAlipayMarketingActivityUserBatchqueryvoucherRequest {
	r.openId = &openId
	return r
}

// 活动 id
func (r ApiAlipayMarketingActivityUserBatchqueryvoucherRequest) ActivityId(activityId string) ApiAlipayMarketingActivityUserBatchqueryvoucherRequest {
	r.activityId = &activityId
	return r
}

// 券归属商户
func (r ApiAlipayMarketingActivityUserBatchqueryvoucherRequest) BelongMerchantId(belongMerchantId string) ApiAlipayMarketingActivityUserBatchqueryvoucherRequest {
	r.belongMerchantId = &belongMerchantId
	return r
}

// 券发放商户
func (r ApiAlipayMarketingActivityUserBatchqueryvoucherRequest) SenderMerchantId(senderMerchantId string) ApiAlipayMarketingActivityUserBatchqueryvoucherRequest {
	r.senderMerchantId = &senderMerchantId
	return r
}

// 券状态，其中已过期状态可查询6个月内的数据
func (r ApiAlipayMarketingActivityUserBatchqueryvoucherRequest) VoucherStatus(voucherStatus string) ApiAlipayMarketingActivityUserBatchqueryvoucherRequest {
	r.voucherStatus = &voucherStatus
	return r
}

// 分页查询页码
func (r ApiAlipayMarketingActivityUserBatchqueryvoucherRequest) PageNum(pageNum int32) ApiAlipayMarketingActivityUserBatchqueryvoucherRequest {
	r.pageNum = &pageNum
	return r
}

// 商户接入模式
func (r ApiAlipayMarketingActivityUserBatchqueryvoucherRequest) MerchantAccessMode(merchantAccessMode string) ApiAlipayMarketingActivityUserBatchqueryvoucherRequest {
	r.merchantAccessMode = &merchantAccessMode
	return r
}

// 分页查询单页数据条数
func (r ApiAlipayMarketingActivityUserBatchqueryvoucherRequest) PageSize(pageSize int32) ApiAlipayMarketingActivityUserBatchqueryvoucherRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiAlipayMarketingActivityUserBatchqueryvoucherRequest) Execute() (*AlipayMarketingActivityUserBatchqueryvoucherResponseModel, *http.Response, error) {
	return r.ApiService.AlipayMarketingActivityUserBatchqueryvoucherExecute(r)
}

/*
AlipayMarketingActivityUserBatchqueryvoucher 条件查询用户券

可通过该接口查询用户在某商户可用的全部券，可用于商户的小程序/H5中，用户"我的优惠券"或"提交订单页"展示优惠信息。只能查询商户配的券，无法查询平台优惠券。

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiAlipayMarketingActivityUserBatchqueryvoucherRequest
*/
func (r *AlipayMarketingActivityUserAPIService) AlipayMarketingActivityUserBatchqueryvoucher(ctx context.Context) ApiAlipayMarketingActivityUserBatchqueryvoucherRequest {
	return ApiAlipayMarketingActivityUserBatchqueryvoucherRequest{
		ApiService: r,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return AlipayMarketingActivityUserBatchqueryvoucherResponseModel
func (a *AlipayMarketingActivityUserAPIService) AlipayMarketingActivityUserBatchqueryvoucherExecute(r ApiAlipayMarketingActivityUserBatchqueryvoucherRequest) (*AlipayMarketingActivityUserBatchqueryvoucherResponseModel, *http.Response, error) {
	err := a.client.prepareConfig()
	if err != nil {
		return nil, nil, &GenericOpenAPIError{error: err.Error()}
	}
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *AlipayMarketingActivityUserBatchqueryvoucherResponseModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AlipayMarketingActivityUserAPIService.AlipayMarketingActivityUserBatchqueryvoucher")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/alipay/marketing/activity/ordervoucher/user/batchqueryvoucher"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.authToken != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "auth_token", r.authToken, "form", "")
	}
	if r.userId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "user_id", r.userId, "form", "")
	}
	if r.openId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "open_id", r.openId, "form", "")
	}
	if r.activityId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "activity_id", r.activityId, "form", "")
	}
	if r.belongMerchantId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "belong_merchant_id", r.belongMerchantId, "form", "")
	}
	if r.senderMerchantId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sender_merchant_id", r.senderMerchantId, "form", "")
	}
	if r.voucherStatus != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "voucher_status", r.voucherStatus, "form", "")
	}
	if r.pageNum != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page_num", r.pageNum, "form", "")
	}
	if r.merchantAccessMode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "merchant_access_mode", r.merchantAccessMode, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page_size", r.pageSize, "form", "")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	// Add signing logic
	err = a.signRequest(req)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	// Add verification logic
	err = a.verifyResponse(localVarHTTPResponse, localVarBody)
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v AlipayMarketingActivityUserBatchqueryvoucherDefaultResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAlipayMarketingActivityUserQueryvoucherRequest struct {
	ctx                context.Context
	ApiService         *AlipayMarketingActivityUserAPIService
	merchantId         *string
	userId             *string
	openId             *string
	activityId         *string
	voucherId          *string
	voucherCode        *string
	merchantAccessMode *string
}

// 商户 PID，默认为当前接口调用商户。
func (r ApiAlipayMarketingActivityUserQueryvoucherRequest) MerchantId(merchantId string) ApiAlipayMarketingActivityUserQueryvoucherRequest {
	r.merchantId = &merchantId
	return r
}

// 支付宝user_id账号
func (r ApiAlipayMarketingActivityUserQueryvoucherRequest) UserId(userId string) ApiAlipayMarketingActivityUserQueryvoucherRequest {
	r.userId = &userId
	return r
}

// 领券的支付宝用户openId
func (r ApiAlipayMarketingActivityUserQueryvoucherRequest) OpenId(openId string) ApiAlipayMarketingActivityUserQueryvoucherRequest {
	r.openId = &openId
	return r
}

// 活动id
func (r ApiAlipayMarketingActivityUserQueryvoucherRequest) ActivityId(activityId string) ApiAlipayMarketingActivityUserQueryvoucherRequest {
	r.activityId = &activityId
	return r
}

// 用户券 id。支付宝为用户优惠券唯一分配的 id。
func (r ApiAlipayMarketingActivityUserQueryvoucherRequest) VoucherId(voucherId string) ApiAlipayMarketingActivityUserQueryvoucherRequest {
	r.voucherId = &voucherId
	return r
}

// 用户领取的商家券券码。
func (r ApiAlipayMarketingActivityUserQueryvoucherRequest) VoucherCode(voucherCode string) ApiAlipayMarketingActivityUserQueryvoucherRequest {
	r.voucherCode = &voucherCode
	return r
}

// 商户接入模式。
func (r ApiAlipayMarketingActivityUserQueryvoucherRequest) MerchantAccessMode(merchantAccessMode string) ApiAlipayMarketingActivityUserQueryvoucherRequest {
	r.merchantAccessMode = &merchantAccessMode
	return r
}

func (r ApiAlipayMarketingActivityUserQueryvoucherRequest) Execute() (*AlipayMarketingActivityUserQueryvoucherResponseModel, *http.Response, error) {
	return r.ApiService.AlipayMarketingActivityUserQueryvoucherExecute(r)
}

/*
AlipayMarketingActivityUserQueryvoucher 查询用户券详情

通过此接口可以查询用户券信息，包括用户券的基础信息、状态。

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiAlipayMarketingActivityUserQueryvoucherRequest
*/
func (r *AlipayMarketingActivityUserAPIService) AlipayMarketingActivityUserQueryvoucher(ctx context.Context) ApiAlipayMarketingActivityUserQueryvoucherRequest {
	return ApiAlipayMarketingActivityUserQueryvoucherRequest{
		ApiService: r,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return AlipayMarketingActivityUserQueryvoucherResponseModel
func (a *AlipayMarketingActivityUserAPIService) AlipayMarketingActivityUserQueryvoucherExecute(r ApiAlipayMarketingActivityUserQueryvoucherRequest) (*AlipayMarketingActivityUserQueryvoucherResponseModel, *http.Response, error) {
	err := a.client.prepareConfig()
	if err != nil {
		return nil, nil, &GenericOpenAPIError{error: err.Error()}
	}
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *AlipayMarketingActivityUserQueryvoucherResponseModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AlipayMarketingActivityUserAPIService.AlipayMarketingActivityUserQueryvoucher")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/alipay/marketing/activity/ordervoucher/user/voucher"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.merchantId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "merchant_id", r.merchantId, "form", "")
	}
	if r.userId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "user_id", r.userId, "form", "")
	}
	if r.openId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "open_id", r.openId, "form", "")
	}
	if r.activityId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "activity_id", r.activityId, "form", "")
	}
	if r.voucherId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "voucher_id", r.voucherId, "form", "")
	}
	if r.voucherCode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "voucher_code", r.voucherCode, "form", "")
	}
	if r.merchantAccessMode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "merchant_access_mode", r.merchantAccessMode, "form", "")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	// Add signing logic
	err = a.signRequest(req)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	// Add verification logic
	err = a.verifyResponse(localVarHTTPResponse, localVarBody)
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v AlipayMarketingActivityUserQueryvoucherDefaultResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

func (a *AlipayMarketingActivityUserAPIService) signRequest(req *http.Request) error {
	appID := a.client.cfg.AppID
	appCertSN := a.client.cfg.AppCertSN
	nonce := generateUUID()
	timestamp := strconv.FormatInt(time.Now().UnixNano()/1e6, 10)

	authString := fmt.Sprintf("app_id=%s", appID)
	if appCertSN != "" {
		authString += fmt.Sprintf(",app_cert_sn=%s", appCertSN)
	}
	authString += fmt.Sprintf(",nonce=%s,timestamp=%s", nonce, timestamp)

	httpMethod := req.Method
	httpRequestUri := req.URL.Path
	if req.URL.RawQuery != "" {
		httpRequestUri += "?" + req.URL.RawQuery
	}

	var httpRequestBody string
	if req.Body != nil {
		bodyBytes, err := io.ReadAll(req.Body)
		if err != nil {
			return err
		}
		httpRequestBody = string(bodyBytes)
		req.Body = io.NopCloser(bytes.NewBuffer(bodyBytes))
	}

	content := authString + "\n" +
		httpMethod + "\n" +
		httpRequestUri + "\n" +
		httpRequestBody + "\n"

	if appAuthToken := req.Header.Get("alipay-app-auth-token"); appAuthToken != "" {
		content += appAuthToken + "\n"
	}

	signature, err := signWithRSA(content, a.client.cfg.privateKey)
	if err != nil {
		return err
	}

	req.Header.Set("Authorization", fmt.Sprintf("ALIPAY-SHA256withRSA %s,sign=%s", authString, signature))
	return nil
}

func (a *AlipayMarketingActivityUserAPIService) verifyResponse(resp *http.Response, body []byte) error {
	timestamp := resp.Header.Get("alipay-timestamp")
	nonce := resp.Header.Get("alipay-nonce")
	sign := resp.Header.Get("alipay-signature")

	content := timestamp + "\n" +
		nonce + "\n" +
		string(body) + "\n"

	return verifyWithRSA(content, sign, a.client.cfg.publicKey)
}
