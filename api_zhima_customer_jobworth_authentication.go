/*
支付宝开放平台API

支付宝开放平台v3协议文档

API version: 2024-07-05
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strconv"
	"time"
)


// ZhimaCustomerJobworthAuthenticationAPIService ZhimaCustomerJobworthAuthenticationAPI service
type ZhimaCustomerJobworthAuthenticationAPIService service

type ApiZhimaCustomerJobworthAuthenticationQueryRequest struct {
	ctx context.Context
	ApiService *ZhimaCustomerJobworthAuthenticationAPIService
	connKey *string
	onceToken *string
	queryType *string
	identityType *string
	serviceId *string
	userId *string
	openId *string
	certNo *string
	certType *string
}

// 调用第一步创建接口的out_agreement_no，由外部传入
func (r ApiZhimaCustomerJobworthAuthenticationQueryRequest) ConnKey(connKey string) ApiZhimaCustomerJobworthAuthenticationQueryRequest {
	r.connKey = &connKey
	return r
}

// 查询身份认证结果的凭证，在认证结果到达终态后只允许查询成功一次，若需要再次查询，则需要调用第一个接口再拉起受理台
func (r ApiZhimaCustomerJobworthAuthenticationQueryRequest) OnceToken(onceToken string) ApiZhimaCustomerJobworthAuthenticationQueryRequest {
	r.onceToken = &onceToken
	return r
}

// exact:精确查询,dim:模糊查询
func (r ApiZhimaCustomerJobworthAuthenticationQueryRequest) QueryType(queryType string) ApiZhimaCustomerJobworthAuthenticationQueryRequest {
	r.queryType = &queryType
	return r
}

// 04:教师，其它身份类型联系芝麻技术支持确认
func (r ApiZhimaCustomerJobworthAuthenticationQueryRequest) IdentityType(identityType string) ApiZhimaCustomerJobworthAuthenticationQueryRequest {
	r.identityType = &identityType
	return r
}

// 信用服务id，商家接入产品功能包时有运营同学分配
func (r ApiZhimaCustomerJobworthAuthenticationQueryRequest) ServiceId(serviceId string) ApiZhimaCustomerJobworthAuthenticationQueryRequest {
	r.serviceId = &serviceId
	return r
}

// 蚂蚁统一会员ID 和身份证任选一个传入
func (r ApiZhimaCustomerJobworthAuthenticationQueryRequest) UserId(userId string) ApiZhimaCustomerJobworthAuthenticationQueryRequest {
	r.userId = &userId
	return r
}

// 蚂蚁统一会员ID 和身份证任选一个传入
func (r ApiZhimaCustomerJobworthAuthenticationQueryRequest) OpenId(openId string) ApiZhimaCustomerJobworthAuthenticationQueryRequest {
	r.openId = &openId
	return r
}

// 证件号
func (r ApiZhimaCustomerJobworthAuthenticationQueryRequest) CertNo(certNo string) ApiZhimaCustomerJobworthAuthenticationQueryRequest {
	r.certNo = &certNo
	return r
}

// \&quot;身份证 : 0\&quot;，\&quot;护照: 1\&quot;，\&quot;台湾往来通行证：4\&quot;,\&quot;港澳往来通行证：3\&quot;, \&quot;回乡证: 2\&quot;；\&quot;港澳证件：5\&quot;
func (r ApiZhimaCustomerJobworthAuthenticationQueryRequest) CertType(certType string) ApiZhimaCustomerJobworthAuthenticationQueryRequest {
	r.certType = &certType
	return r
}

func (r ApiZhimaCustomerJobworthAuthenticationQueryRequest) Execute() (*ZhimaCustomerJobworthAuthenticationQueryResponseModel, *http.Response, error) {
	return r.ApiService.ZhimaCustomerJobworthAuthenticationQueryExecute(r)
}

/*
ZhimaCustomerJobworthAuthenticationQuery 职得身份认证查询接口

根据一次性token查询用户身份认证结果

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiZhimaCustomerJobworthAuthenticationQueryRequest
*/
func (r *ZhimaCustomerJobworthAuthenticationAPIService) ZhimaCustomerJobworthAuthenticationQuery(ctx context.Context) ApiZhimaCustomerJobworthAuthenticationQueryRequest {
	return ApiZhimaCustomerJobworthAuthenticationQueryRequest{
		ApiService: r,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ZhimaCustomerJobworthAuthenticationQueryResponseModel
func (a *ZhimaCustomerJobworthAuthenticationAPIService) ZhimaCustomerJobworthAuthenticationQueryExecute(r ApiZhimaCustomerJobworthAuthenticationQueryRequest) (*ZhimaCustomerJobworthAuthenticationQueryResponseModel, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ZhimaCustomerJobworthAuthenticationQueryResponseModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ZhimaCustomerJobworthAuthenticationAPIService.ZhimaCustomerJobworthAuthenticationQuery")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/zhima/customer/jobworth/authentication"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}


	if r.connKey != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conn_key", r.connKey, "form", "")
	}
	if r.onceToken != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "once_token", r.onceToken, "form", "")
	}
	if r.queryType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "query_type", r.queryType, "form", "")
	}
	if r.identityType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "identity_type", r.identityType, "form", "")
	}
	if r.serviceId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "service_id", r.serviceId, "form", "")
	}
	if r.userId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "user_id", r.userId, "form", "")
	}
	if r.openId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "open_id", r.openId, "form", "")
	}
	if r.certNo != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cert_no", r.certNo, "form", "")
	}
	if r.certType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cert_type", r.certType, "form", "")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	// Add signing logic
	err = a.signRequest(req)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	// Add verification logic
	err = a.verifyResponse(localVarHTTPResponse, localVarBody)
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v ZhimaCustomerJobworthAuthenticationQueryDefaultResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}


func (a *ZhimaCustomerJobworthAuthenticationAPIService) signRequest(req *http.Request) error {
	appID := a.client.cfg.AppID
	appCertSN := a.client.cfg.AppCertSN
	privateKey := a.client.cfg.PrivateKey

	nonce := generateUUID()
	timestamp := strconv.FormatInt(time.Now().UnixNano()/1e6, 10)

	authString := fmt.Sprintf("app_id=%s", appID)
	if appCertSN != "" {
		authString += fmt.Sprintf(",app_cert_sn=%s", appCertSN)
	}
	authString += fmt.Sprintf(",nonce=%s,timestamp=%s", nonce, timestamp)

	httpMethod := req.Method
	httpRequestUri := req.URL.Path
	if req.URL.RawQuery != "" {
		httpRequestUri += "?" + req.URL.RawQuery
	}

	var httpRequestBody string
	if req.Body != nil {
		bodyBytes, err := io.ReadAll(req.Body)
		if err != nil {
			return err
		}
		httpRequestBody = string(bodyBytes)
		req.Body = io.NopCloser(bytes.NewBuffer(bodyBytes))
	}

	content := authString + "\n" +
		httpMethod + "\n" +
		httpRequestUri + "\n" +
		httpRequestBody + "\n"

	if appAuthToken := req.Header.Get("alipay-app-auth-token"); appAuthToken != "" {
		content += appAuthToken + "\n"
	}

	signature, err := signWithRSA(content, privateKey)
	if err != nil {
		return err
	}

	req.Header.Set("Authorization", fmt.Sprintf("ALIPAY-SHA256withRSA %s,sign=%s", authString, signature))
	return nil
}

func (a *ZhimaCustomerJobworthAuthenticationAPIService) verifyResponse(resp *http.Response, body []byte) error {
	timestamp := resp.Header.Get("alipay-timestamp")
	nonce := resp.Header.Get("alipay-nonce")
	sign := resp.Header.Get("alipay-signature")

	content := timestamp + "\n" +
		nonce + "\n" +
		string(body) + "\n"

	publicKey := a.client.cfg.PublicKey

	return verifyWithRSA(content, sign, publicKey)
}


