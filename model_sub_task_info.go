/*
支付宝开放平台API

支付宝开放平台v3协议文档

API version: 2024-07-05
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the SubTaskInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SubTaskInfo{}

// SubTaskInfo struct for SubTaskInfo
type SubTaskInfo struct {
	// 子任务执行结果；执行成功为成功，失败则填充失败结果
	ExecuteResult *string `json:"execute_result,omitempty"`
	// \"子任务状态状态 INIT:初始化 FAILURE:失败 FINISH:成功\"
	Status *string `json:"status,omitempty"`
	// 子任务类型 SIGN_TASK：签约子任务 OPE_TASK：代运营授权子任务 APP_TASK：应用授权子任务
	Type *string `json:"type,omitempty"`
	// 子任务类型描述
	TypeDesc *string `json:"type_desc,omitempty"`
}

// NewSubTaskInfo instantiates a new SubTaskInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubTaskInfo() *SubTaskInfo {
	this := SubTaskInfo{}
	return &this
}

// NewSubTaskInfoWithDefaults instantiates a new SubTaskInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubTaskInfoWithDefaults() *SubTaskInfo {
	this := SubTaskInfo{}
	return &this
}

// GetExecuteResult returns the ExecuteResult field value if set, zero value otherwise.
func (o *SubTaskInfo) GetExecuteResult() string {
	if o == nil || IsNil(o.ExecuteResult) {
		var ret string
		return ret
	}
	return *o.ExecuteResult
}

// GetExecuteResultOk returns a tuple with the ExecuteResult field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubTaskInfo) GetExecuteResultOk() (*string, bool) {
	if o == nil || IsNil(o.ExecuteResult) {
		return nil, false
	}
	return o.ExecuteResult, true
}

// HasExecuteResult returns a boolean if a field has been set.
func (o *SubTaskInfo) HasExecuteResult() bool {
	if o != nil && !IsNil(o.ExecuteResult) {
		return true
	}

	return false
}

// SetExecuteResult gets a reference to the given string and assigns it to the ExecuteResult field.
func (o *SubTaskInfo) SetExecuteResult(v string) {
	o.ExecuteResult = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *SubTaskInfo) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubTaskInfo) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *SubTaskInfo) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *SubTaskInfo) SetStatus(v string) {
	o.Status = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *SubTaskInfo) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubTaskInfo) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *SubTaskInfo) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *SubTaskInfo) SetType(v string) {
	o.Type = &v
}

// GetTypeDesc returns the TypeDesc field value if set, zero value otherwise.
func (o *SubTaskInfo) GetTypeDesc() string {
	if o == nil || IsNil(o.TypeDesc) {
		var ret string
		return ret
	}
	return *o.TypeDesc
}

// GetTypeDescOk returns a tuple with the TypeDesc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubTaskInfo) GetTypeDescOk() (*string, bool) {
	if o == nil || IsNil(o.TypeDesc) {
		return nil, false
	}
	return o.TypeDesc, true
}

// HasTypeDesc returns a boolean if a field has been set.
func (o *SubTaskInfo) HasTypeDesc() bool {
	if o != nil && !IsNil(o.TypeDesc) {
		return true
	}

	return false
}

// SetTypeDesc gets a reference to the given string and assigns it to the TypeDesc field.
func (o *SubTaskInfo) SetTypeDesc(v string) {
	o.TypeDesc = &v
}

func (o SubTaskInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SubTaskInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ExecuteResult) {
		toSerialize["execute_result"] = o.ExecuteResult
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.TypeDesc) {
		toSerialize["type_desc"] = o.TypeDesc
	}
	return toSerialize, nil
}

type NullableSubTaskInfo struct {
	value *SubTaskInfo
	isSet bool
}

func (v NullableSubTaskInfo) Get() *SubTaskInfo {
	return v.value
}

func (v *NullableSubTaskInfo) Set(val *SubTaskInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableSubTaskInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableSubTaskInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubTaskInfo(val *SubTaskInfo) *NullableSubTaskInfo {
	return &NullableSubTaskInfo{value: val, isSet: true}
}

func (v NullableSubTaskInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubTaskInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


