/*
支付宝开放平台API

支付宝开放平台v3协议文档

API version: 2024-07-05
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alipay

import (
	"encoding/json"
)

// checks if the InvoiceItem type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InvoiceItem{}

// InvoiceItem struct for InvoiceItem
type InvoiceItem struct {
	// 含税总金额 (等于sum_price和tax之和)， 单位：元，格式为2位小数，精度2位小数
	Amount *string `json:"amount,omitempty"`
	// 发票项目名称（或商品名称）
	ItemName *string `json:"item_name,omitempty"`
	// 发票项目编号（或商品编号）
	ItemNo *string `json:"item_no,omitempty"`
	// 单价（不含税），格式为2位小数。最大支持6位小数，不足2位小数时需转化为2位小数格式。 折扣行此参数不能传
	Price *string `json:"price,omitempty"`
	// 数量，须大于0，最多6位小数。 折扣行此参数不能传
	Quantity *string `json:"quantity,omitempty"`
	// 发票行性质。0表示正常行，1表示折扣行，2表示被折扣行。 比如充电器单价100元，折扣10元，则明细为2行，充电器行性质为2，折扣行性质为1。如果充电器没有折扣，则值应为0。
	RowType *int32 `json:"row_type,omitempty"`
	// 规格型号
	Specification *string `json:"specification,omitempty"`
	// 不含税总金额，格式为2位小数 单位：元，精度2位小数
	SumPrice *string `json:"sum_price,omitempty"`
	// 税额， 格式为2位小数
	Tax *string `json:"tax,omitempty"`
	// 税率。格式为2位小数，如：0.00, 0.03, 0.13等等
	TaxRate *string `json:"tax_rate,omitempty"`
	// 单位，折扣行不能传
	Unit *string `json:"unit,omitempty"`
	// 0税率标识，只有税率为0的情况才有值，0=出口零税率，1=免税，2=不征收，3=普通零税率
	ZeroRateFlag *string `json:"zero_rate_flag,omitempty"`
}

// NewInvoiceItem instantiates a new InvoiceItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInvoiceItem() *InvoiceItem {
	this := InvoiceItem{}
	return &this
}

// NewInvoiceItemWithDefaults instantiates a new InvoiceItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInvoiceItemWithDefaults() *InvoiceItem {
	this := InvoiceItem{}
	return &this
}

// GetAmount returns the Amount field value if set, zero value otherwise.
func (o *InvoiceItem) GetAmount() string {
	if o == nil || IsNil(o.Amount) {
		var ret string
		return ret
	}
	return *o.Amount
}

// GetAmountOk returns a tuple with the Amount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvoiceItem) GetAmountOk() (*string, bool) {
	if o == nil || IsNil(o.Amount) {
		return nil, false
	}
	return o.Amount, true
}

// HasAmount returns a boolean if a field has been set.
func (o *InvoiceItem) HasAmount() bool {
	if o != nil && !IsNil(o.Amount) {
		return true
	}

	return false
}

// SetAmount gets a reference to the given string and assigns it to the Amount field.
func (o *InvoiceItem) SetAmount(v string) {
	o.Amount = &v
}

// GetItemName returns the ItemName field value if set, zero value otherwise.
func (o *InvoiceItem) GetItemName() string {
	if o == nil || IsNil(o.ItemName) {
		var ret string
		return ret
	}
	return *o.ItemName
}

// GetItemNameOk returns a tuple with the ItemName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvoiceItem) GetItemNameOk() (*string, bool) {
	if o == nil || IsNil(o.ItemName) {
		return nil, false
	}
	return o.ItemName, true
}

// HasItemName returns a boolean if a field has been set.
func (o *InvoiceItem) HasItemName() bool {
	if o != nil && !IsNil(o.ItemName) {
		return true
	}

	return false
}

// SetItemName gets a reference to the given string and assigns it to the ItemName field.
func (o *InvoiceItem) SetItemName(v string) {
	o.ItemName = &v
}

// GetItemNo returns the ItemNo field value if set, zero value otherwise.
func (o *InvoiceItem) GetItemNo() string {
	if o == nil || IsNil(o.ItemNo) {
		var ret string
		return ret
	}
	return *o.ItemNo
}

// GetItemNoOk returns a tuple with the ItemNo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvoiceItem) GetItemNoOk() (*string, bool) {
	if o == nil || IsNil(o.ItemNo) {
		return nil, false
	}
	return o.ItemNo, true
}

// HasItemNo returns a boolean if a field has been set.
func (o *InvoiceItem) HasItemNo() bool {
	if o != nil && !IsNil(o.ItemNo) {
		return true
	}

	return false
}

// SetItemNo gets a reference to the given string and assigns it to the ItemNo field.
func (o *InvoiceItem) SetItemNo(v string) {
	o.ItemNo = &v
}

// GetPrice returns the Price field value if set, zero value otherwise.
func (o *InvoiceItem) GetPrice() string {
	if o == nil || IsNil(o.Price) {
		var ret string
		return ret
	}
	return *o.Price
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvoiceItem) GetPriceOk() (*string, bool) {
	if o == nil || IsNil(o.Price) {
		return nil, false
	}
	return o.Price, true
}

// HasPrice returns a boolean if a field has been set.
func (o *InvoiceItem) HasPrice() bool {
	if o != nil && !IsNil(o.Price) {
		return true
	}

	return false
}

// SetPrice gets a reference to the given string and assigns it to the Price field.
func (o *InvoiceItem) SetPrice(v string) {
	o.Price = &v
}

// GetQuantity returns the Quantity field value if set, zero value otherwise.
func (o *InvoiceItem) GetQuantity() string {
	if o == nil || IsNil(o.Quantity) {
		var ret string
		return ret
	}
	return *o.Quantity
}

// GetQuantityOk returns a tuple with the Quantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvoiceItem) GetQuantityOk() (*string, bool) {
	if o == nil || IsNil(o.Quantity) {
		return nil, false
	}
	return o.Quantity, true
}

// HasQuantity returns a boolean if a field has been set.
func (o *InvoiceItem) HasQuantity() bool {
	if o != nil && !IsNil(o.Quantity) {
		return true
	}

	return false
}

// SetQuantity gets a reference to the given string and assigns it to the Quantity field.
func (o *InvoiceItem) SetQuantity(v string) {
	o.Quantity = &v
}

// GetRowType returns the RowType field value if set, zero value otherwise.
func (o *InvoiceItem) GetRowType() int32 {
	if o == nil || IsNil(o.RowType) {
		var ret int32
		return ret
	}
	return *o.RowType
}

// GetRowTypeOk returns a tuple with the RowType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvoiceItem) GetRowTypeOk() (*int32, bool) {
	if o == nil || IsNil(o.RowType) {
		return nil, false
	}
	return o.RowType, true
}

// HasRowType returns a boolean if a field has been set.
func (o *InvoiceItem) HasRowType() bool {
	if o != nil && !IsNil(o.RowType) {
		return true
	}

	return false
}

// SetRowType gets a reference to the given int32 and assigns it to the RowType field.
func (o *InvoiceItem) SetRowType(v int32) {
	o.RowType = &v
}

// GetSpecification returns the Specification field value if set, zero value otherwise.
func (o *InvoiceItem) GetSpecification() string {
	if o == nil || IsNil(o.Specification) {
		var ret string
		return ret
	}
	return *o.Specification
}

// GetSpecificationOk returns a tuple with the Specification field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvoiceItem) GetSpecificationOk() (*string, bool) {
	if o == nil || IsNil(o.Specification) {
		return nil, false
	}
	return o.Specification, true
}

// HasSpecification returns a boolean if a field has been set.
func (o *InvoiceItem) HasSpecification() bool {
	if o != nil && !IsNil(o.Specification) {
		return true
	}

	return false
}

// SetSpecification gets a reference to the given string and assigns it to the Specification field.
func (o *InvoiceItem) SetSpecification(v string) {
	o.Specification = &v
}

// GetSumPrice returns the SumPrice field value if set, zero value otherwise.
func (o *InvoiceItem) GetSumPrice() string {
	if o == nil || IsNil(o.SumPrice) {
		var ret string
		return ret
	}
	return *o.SumPrice
}

// GetSumPriceOk returns a tuple with the SumPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvoiceItem) GetSumPriceOk() (*string, bool) {
	if o == nil || IsNil(o.SumPrice) {
		return nil, false
	}
	return o.SumPrice, true
}

// HasSumPrice returns a boolean if a field has been set.
func (o *InvoiceItem) HasSumPrice() bool {
	if o != nil && !IsNil(o.SumPrice) {
		return true
	}

	return false
}

// SetSumPrice gets a reference to the given string and assigns it to the SumPrice field.
func (o *InvoiceItem) SetSumPrice(v string) {
	o.SumPrice = &v
}

// GetTax returns the Tax field value if set, zero value otherwise.
func (o *InvoiceItem) GetTax() string {
	if o == nil || IsNil(o.Tax) {
		var ret string
		return ret
	}
	return *o.Tax
}

// GetTaxOk returns a tuple with the Tax field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvoiceItem) GetTaxOk() (*string, bool) {
	if o == nil || IsNil(o.Tax) {
		return nil, false
	}
	return o.Tax, true
}

// HasTax returns a boolean if a field has been set.
func (o *InvoiceItem) HasTax() bool {
	if o != nil && !IsNil(o.Tax) {
		return true
	}

	return false
}

// SetTax gets a reference to the given string and assigns it to the Tax field.
func (o *InvoiceItem) SetTax(v string) {
	o.Tax = &v
}

// GetTaxRate returns the TaxRate field value if set, zero value otherwise.
func (o *InvoiceItem) GetTaxRate() string {
	if o == nil || IsNil(o.TaxRate) {
		var ret string
		return ret
	}
	return *o.TaxRate
}

// GetTaxRateOk returns a tuple with the TaxRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvoiceItem) GetTaxRateOk() (*string, bool) {
	if o == nil || IsNil(o.TaxRate) {
		return nil, false
	}
	return o.TaxRate, true
}

// HasTaxRate returns a boolean if a field has been set.
func (o *InvoiceItem) HasTaxRate() bool {
	if o != nil && !IsNil(o.TaxRate) {
		return true
	}

	return false
}

// SetTaxRate gets a reference to the given string and assigns it to the TaxRate field.
func (o *InvoiceItem) SetTaxRate(v string) {
	o.TaxRate = &v
}

// GetUnit returns the Unit field value if set, zero value otherwise.
func (o *InvoiceItem) GetUnit() string {
	if o == nil || IsNil(o.Unit) {
		var ret string
		return ret
	}
	return *o.Unit
}

// GetUnitOk returns a tuple with the Unit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvoiceItem) GetUnitOk() (*string, bool) {
	if o == nil || IsNil(o.Unit) {
		return nil, false
	}
	return o.Unit, true
}

// HasUnit returns a boolean if a field has been set.
func (o *InvoiceItem) HasUnit() bool {
	if o != nil && !IsNil(o.Unit) {
		return true
	}

	return false
}

// SetUnit gets a reference to the given string and assigns it to the Unit field.
func (o *InvoiceItem) SetUnit(v string) {
	o.Unit = &v
}

// GetZeroRateFlag returns the ZeroRateFlag field value if set, zero value otherwise.
func (o *InvoiceItem) GetZeroRateFlag() string {
	if o == nil || IsNil(o.ZeroRateFlag) {
		var ret string
		return ret
	}
	return *o.ZeroRateFlag
}

// GetZeroRateFlagOk returns a tuple with the ZeroRateFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvoiceItem) GetZeroRateFlagOk() (*string, bool) {
	if o == nil || IsNil(o.ZeroRateFlag) {
		return nil, false
	}
	return o.ZeroRateFlag, true
}

// HasZeroRateFlag returns a boolean if a field has been set.
func (o *InvoiceItem) HasZeroRateFlag() bool {
	if o != nil && !IsNil(o.ZeroRateFlag) {
		return true
	}

	return false
}

// SetZeroRateFlag gets a reference to the given string and assigns it to the ZeroRateFlag field.
func (o *InvoiceItem) SetZeroRateFlag(v string) {
	o.ZeroRateFlag = &v
}

func (o InvoiceItem) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InvoiceItem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Amount) {
		toSerialize["amount"] = o.Amount
	}
	if !IsNil(o.ItemName) {
		toSerialize["item_name"] = o.ItemName
	}
	if !IsNil(o.ItemNo) {
		toSerialize["item_no"] = o.ItemNo
	}
	if !IsNil(o.Price) {
		toSerialize["price"] = o.Price
	}
	if !IsNil(o.Quantity) {
		toSerialize["quantity"] = o.Quantity
	}
	if !IsNil(o.RowType) {
		toSerialize["row_type"] = o.RowType
	}
	if !IsNil(o.Specification) {
		toSerialize["specification"] = o.Specification
	}
	if !IsNil(o.SumPrice) {
		toSerialize["sum_price"] = o.SumPrice
	}
	if !IsNil(o.Tax) {
		toSerialize["tax"] = o.Tax
	}
	if !IsNil(o.TaxRate) {
		toSerialize["tax_rate"] = o.TaxRate
	}
	if !IsNil(o.Unit) {
		toSerialize["unit"] = o.Unit
	}
	if !IsNil(o.ZeroRateFlag) {
		toSerialize["zero_rate_flag"] = o.ZeroRateFlag
	}
	return toSerialize, nil
}

type NullableInvoiceItem struct {
	value *InvoiceItem
	isSet bool
}

func (v NullableInvoiceItem) Get() *InvoiceItem {
	return v.value
}

func (v *NullableInvoiceItem) Set(val *InvoiceItem) {
	v.value = val
	v.isSet = true
}

func (v NullableInvoiceItem) IsSet() bool {
	return v.isSet
}

func (v *NullableInvoiceItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInvoiceItem(val *InvoiceItem) *NullableInvoiceItem {
	return &NullableInvoiceItem{value: val, isSet: true}
}

func (v NullableInvoiceItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInvoiceItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
