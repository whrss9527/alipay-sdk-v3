/*
支付宝开放平台API

支付宝开放平台v3协议文档

API version: 2024-07-05
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the BrandRegistrationInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BrandRegistrationInfo{}

// BrandRegistrationInfo struct for BrandRegistrationInfo
type BrandRegistrationInfo struct {
	// 商标有效期(结束日期)
	EndDate *string `json:"end_date,omitempty"`
	// 商标注册证书信息(当前只支持图片类型，请调用alipay.open.mini.miniapp.brand.upload接口上传图片,可以上传多个商标注册证书信息)
	RegMaterials []string `json:"reg_materials,omitempty"`
	// 商标注册号
	RegNumber *string `json:"reg_number,omitempty"`
	// 商标注册人
	Registrant *string `json:"registrant,omitempty"`
	// 商标有效期(开始日期)
	StartDate *string `json:"start_date,omitempty"`
}

// NewBrandRegistrationInfo instantiates a new BrandRegistrationInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBrandRegistrationInfo() *BrandRegistrationInfo {
	this := BrandRegistrationInfo{}
	return &this
}

// NewBrandRegistrationInfoWithDefaults instantiates a new BrandRegistrationInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBrandRegistrationInfoWithDefaults() *BrandRegistrationInfo {
	this := BrandRegistrationInfo{}
	return &this
}

// GetEndDate returns the EndDate field value if set, zero value otherwise.
func (o *BrandRegistrationInfo) GetEndDate() string {
	if o == nil || IsNil(o.EndDate) {
		var ret string
		return ret
	}
	return *o.EndDate
}

// GetEndDateOk returns a tuple with the EndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BrandRegistrationInfo) GetEndDateOk() (*string, bool) {
	if o == nil || IsNil(o.EndDate) {
		return nil, false
	}
	return o.EndDate, true
}

// HasEndDate returns a boolean if a field has been set.
func (o *BrandRegistrationInfo) HasEndDate() bool {
	if o != nil && !IsNil(o.EndDate) {
		return true
	}

	return false
}

// SetEndDate gets a reference to the given string and assigns it to the EndDate field.
func (o *BrandRegistrationInfo) SetEndDate(v string) {
	o.EndDate = &v
}

// GetRegMaterials returns the RegMaterials field value if set, zero value otherwise.
func (o *BrandRegistrationInfo) GetRegMaterials() []string {
	if o == nil || IsNil(o.RegMaterials) {
		var ret []string
		return ret
	}
	return o.RegMaterials
}

// GetRegMaterialsOk returns a tuple with the RegMaterials field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BrandRegistrationInfo) GetRegMaterialsOk() ([]string, bool) {
	if o == nil || IsNil(o.RegMaterials) {
		return nil, false
	}
	return o.RegMaterials, true
}

// HasRegMaterials returns a boolean if a field has been set.
func (o *BrandRegistrationInfo) HasRegMaterials() bool {
	if o != nil && !IsNil(o.RegMaterials) {
		return true
	}

	return false
}

// SetRegMaterials gets a reference to the given []string and assigns it to the RegMaterials field.
func (o *BrandRegistrationInfo) SetRegMaterials(v []string) {
	o.RegMaterials = v
}

// GetRegNumber returns the RegNumber field value if set, zero value otherwise.
func (o *BrandRegistrationInfo) GetRegNumber() string {
	if o == nil || IsNil(o.RegNumber) {
		var ret string
		return ret
	}
	return *o.RegNumber
}

// GetRegNumberOk returns a tuple with the RegNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BrandRegistrationInfo) GetRegNumberOk() (*string, bool) {
	if o == nil || IsNil(o.RegNumber) {
		return nil, false
	}
	return o.RegNumber, true
}

// HasRegNumber returns a boolean if a field has been set.
func (o *BrandRegistrationInfo) HasRegNumber() bool {
	if o != nil && !IsNil(o.RegNumber) {
		return true
	}

	return false
}

// SetRegNumber gets a reference to the given string and assigns it to the RegNumber field.
func (o *BrandRegistrationInfo) SetRegNumber(v string) {
	o.RegNumber = &v
}

// GetRegistrant returns the Registrant field value if set, zero value otherwise.
func (o *BrandRegistrationInfo) GetRegistrant() string {
	if o == nil || IsNil(o.Registrant) {
		var ret string
		return ret
	}
	return *o.Registrant
}

// GetRegistrantOk returns a tuple with the Registrant field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BrandRegistrationInfo) GetRegistrantOk() (*string, bool) {
	if o == nil || IsNil(o.Registrant) {
		return nil, false
	}
	return o.Registrant, true
}

// HasRegistrant returns a boolean if a field has been set.
func (o *BrandRegistrationInfo) HasRegistrant() bool {
	if o != nil && !IsNil(o.Registrant) {
		return true
	}

	return false
}

// SetRegistrant gets a reference to the given string and assigns it to the Registrant field.
func (o *BrandRegistrationInfo) SetRegistrant(v string) {
	o.Registrant = &v
}

// GetStartDate returns the StartDate field value if set, zero value otherwise.
func (o *BrandRegistrationInfo) GetStartDate() string {
	if o == nil || IsNil(o.StartDate) {
		var ret string
		return ret
	}
	return *o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BrandRegistrationInfo) GetStartDateOk() (*string, bool) {
	if o == nil || IsNil(o.StartDate) {
		return nil, false
	}
	return o.StartDate, true
}

// HasStartDate returns a boolean if a field has been set.
func (o *BrandRegistrationInfo) HasStartDate() bool {
	if o != nil && !IsNil(o.StartDate) {
		return true
	}

	return false
}

// SetStartDate gets a reference to the given string and assigns it to the StartDate field.
func (o *BrandRegistrationInfo) SetStartDate(v string) {
	o.StartDate = &v
}

func (o BrandRegistrationInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BrandRegistrationInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EndDate) {
		toSerialize["end_date"] = o.EndDate
	}
	if !IsNil(o.RegMaterials) {
		toSerialize["reg_materials"] = o.RegMaterials
	}
	if !IsNil(o.RegNumber) {
		toSerialize["reg_number"] = o.RegNumber
	}
	if !IsNil(o.Registrant) {
		toSerialize["registrant"] = o.Registrant
	}
	if !IsNil(o.StartDate) {
		toSerialize["start_date"] = o.StartDate
	}
	return toSerialize, nil
}

type NullableBrandRegistrationInfo struct {
	value *BrandRegistrationInfo
	isSet bool
}

func (v NullableBrandRegistrationInfo) Get() *BrandRegistrationInfo {
	return v.value
}

func (v *NullableBrandRegistrationInfo) Set(val *BrandRegistrationInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableBrandRegistrationInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableBrandRegistrationInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBrandRegistrationInfo(val *BrandRegistrationInfo) *NullableBrandRegistrationInfo {
	return &NullableBrandRegistrationInfo{value: val, isSet: true}
}

func (v NullableBrandRegistrationInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBrandRegistrationInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


