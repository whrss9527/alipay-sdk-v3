/*
支付宝开放平台API

支付宝开放平台v3协议文档

API version: 2024-07-05
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strconv"
	"time"
)


// AlipayOpenMiniWidgetGoodsAPIService AlipayOpenMiniWidgetGoodsAPI service
type AlipayOpenMiniWidgetGoodsAPIService service

type ApiAlipayOpenMiniWidgetGoodsModifyRequest struct {
	ctx context.Context
	ApiService *AlipayOpenMiniWidgetGoodsAPIService
	alipayOpenMiniWidgetGoodsModifyModel *AlipayOpenMiniWidgetGoodsModifyModel
}

func (r ApiAlipayOpenMiniWidgetGoodsModifyRequest) AlipayOpenMiniWidgetGoodsModifyModel(alipayOpenMiniWidgetGoodsModifyModel AlipayOpenMiniWidgetGoodsModifyModel) ApiAlipayOpenMiniWidgetGoodsModifyRequest {
	r.alipayOpenMiniWidgetGoodsModifyModel = &alipayOpenMiniWidgetGoodsModifyModel
	return r
}

func (r ApiAlipayOpenMiniWidgetGoodsModifyRequest) Execute() (*AlipayOpenMiniWidgetGoodsModifyResponseModel, *http.Response, error) {
	return r.ApiService.AlipayOpenMiniWidgetGoodsModifyExecute(r)
}

/*
AlipayOpenMiniWidgetGoodsModify 小部件商品修改

面向商品售卖类的小部件，提供的商品信息修改能力，修改后会进行文本和图片信息审核，审核完成后通知结果通过openmq消息通知

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAlipayOpenMiniWidgetGoodsModifyRequest
*/
func (r *AlipayOpenMiniWidgetGoodsAPIService) AlipayOpenMiniWidgetGoodsModify(ctx context.Context) ApiAlipayOpenMiniWidgetGoodsModifyRequest {
	return ApiAlipayOpenMiniWidgetGoodsModifyRequest{
		ApiService: r,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AlipayOpenMiniWidgetGoodsModifyResponseModel
func (a *AlipayOpenMiniWidgetGoodsAPIService) AlipayOpenMiniWidgetGoodsModifyExecute(r ApiAlipayOpenMiniWidgetGoodsModifyRequest) (*AlipayOpenMiniWidgetGoodsModifyResponseModel, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AlipayOpenMiniWidgetGoodsModifyResponseModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AlipayOpenMiniWidgetGoodsAPIService.AlipayOpenMiniWidgetGoodsModify")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/alipay/open/mini/widget/goods/modify"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}



	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.alipayOpenMiniWidgetGoodsModifyModel

	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	// Add signing logic
	err = a.signRequest(req)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	// Add verification logic
	err = a.verifyResponse(localVarHTTPResponse, localVarBody)
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v AlipayOpenMiniWidgetGoodsModifyDefaultResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}


type ApiAlipayOpenMiniWidgetGoodsQueryRequest struct {
	ctx context.Context
	ApiService *AlipayOpenMiniWidgetGoodsAPIService
	miniAppId *string
	pid *string
	goodsId *string
	pageNum *int32
	pageSize *int32
}

// 根据承接品的商家小程序ID查询
func (r ApiAlipayOpenMiniWidgetGoodsQueryRequest) MiniAppId(miniAppId string) ApiAlipayOpenMiniWidgetGoodsQueryRequest {
	r.miniAppId = &miniAppId
	return r
}

// 根据承接该品的小程序背后的商家查询
func (r ApiAlipayOpenMiniWidgetGoodsQueryRequest) Pid(pid string) ApiAlipayOpenMiniWidgetGoodsQueryRequest {
	r.pid = &pid
	return r
}

// 根据商品的唯一标识查询
func (r ApiAlipayOpenMiniWidgetGoodsQueryRequest) GoodsId(goodsId string) ApiAlipayOpenMiniWidgetGoodsQueryRequest {
	r.goodsId = &goodsId
	return r
}

// 查询第几页，最小值为1
func (r ApiAlipayOpenMiniWidgetGoodsQueryRequest) PageNum(pageNum int32) ApiAlipayOpenMiniWidgetGoodsQueryRequest {
	r.pageNum = &pageNum
	return r
}

// 查询页面数量，最大值为50
func (r ApiAlipayOpenMiniWidgetGoodsQueryRequest) PageSize(pageSize int32) ApiAlipayOpenMiniWidgetGoodsQueryRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiAlipayOpenMiniWidgetGoodsQueryRequest) Execute() (*AlipayOpenMiniWidgetGoodsQueryResponseModel, *http.Response, error) {
	return r.ApiService.AlipayOpenMiniWidgetGoodsQueryExecute(r)
}

/*
AlipayOpenMiniWidgetGoodsQuery 小部件商品查询

面向商品售卖类的小部件，提供商品信息查询能力，返回审核通过的商品信息

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAlipayOpenMiniWidgetGoodsQueryRequest
*/
func (r *AlipayOpenMiniWidgetGoodsAPIService) AlipayOpenMiniWidgetGoodsQuery(ctx context.Context) ApiAlipayOpenMiniWidgetGoodsQueryRequest {
	return ApiAlipayOpenMiniWidgetGoodsQueryRequest{
		ApiService: r,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AlipayOpenMiniWidgetGoodsQueryResponseModel
func (a *AlipayOpenMiniWidgetGoodsAPIService) AlipayOpenMiniWidgetGoodsQueryExecute(r ApiAlipayOpenMiniWidgetGoodsQueryRequest) (*AlipayOpenMiniWidgetGoodsQueryResponseModel, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AlipayOpenMiniWidgetGoodsQueryResponseModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AlipayOpenMiniWidgetGoodsAPIService.AlipayOpenMiniWidgetGoodsQuery")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/alipay/open/mini/widget/goods/query"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}


	if r.miniAppId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "mini_app_id", r.miniAppId, "form", "")
	}
	if r.pid != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pid", r.pid, "form", "")
	}
	if r.goodsId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "goods_id", r.goodsId, "form", "")
	}
	if r.pageNum != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page_num", r.pageNum, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page_size", r.pageSize, "form", "")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	// Add signing logic
	err = a.signRequest(req)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	// Add verification logic
	err = a.verifyResponse(localVarHTTPResponse, localVarBody)
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v AlipayOpenMiniWidgetGoodsQueryDefaultResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}


type ApiAlipayOpenMiniWidgetGoodsUploadRequest struct {
	ctx context.Context
	ApiService *AlipayOpenMiniWidgetGoodsAPIService
	alipayOpenMiniWidgetGoodsUploadModel *AlipayOpenMiniWidgetGoodsUploadModel
}

func (r ApiAlipayOpenMiniWidgetGoodsUploadRequest) AlipayOpenMiniWidgetGoodsUploadModel(alipayOpenMiniWidgetGoodsUploadModel AlipayOpenMiniWidgetGoodsUploadModel) ApiAlipayOpenMiniWidgetGoodsUploadRequest {
	r.alipayOpenMiniWidgetGoodsUploadModel = &alipayOpenMiniWidgetGoodsUploadModel
	return r
}

func (r ApiAlipayOpenMiniWidgetGoodsUploadRequest) Execute() (*AlipayOpenMiniWidgetGoodsUploadResponseModel, *http.Response, error) {
	return r.ApiService.AlipayOpenMiniWidgetGoodsUploadExecute(r)
}

/*
AlipayOpenMiniWidgetGoodsUpload 小部件商品上传

面向商品售卖类的小部件，提供的商品信息上传能力，上传后会进行文本和图片信息审核，审核完成后通知结果通过openmq消息通知

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAlipayOpenMiniWidgetGoodsUploadRequest
*/
func (r *AlipayOpenMiniWidgetGoodsAPIService) AlipayOpenMiniWidgetGoodsUpload(ctx context.Context) ApiAlipayOpenMiniWidgetGoodsUploadRequest {
	return ApiAlipayOpenMiniWidgetGoodsUploadRequest{
		ApiService: r,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AlipayOpenMiniWidgetGoodsUploadResponseModel
func (a *AlipayOpenMiniWidgetGoodsAPIService) AlipayOpenMiniWidgetGoodsUploadExecute(r ApiAlipayOpenMiniWidgetGoodsUploadRequest) (*AlipayOpenMiniWidgetGoodsUploadResponseModel, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AlipayOpenMiniWidgetGoodsUploadResponseModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AlipayOpenMiniWidgetGoodsAPIService.AlipayOpenMiniWidgetGoodsUpload")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/alipay/open/mini/widget/goods/upload"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}



	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.alipayOpenMiniWidgetGoodsUploadModel

	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	// Add signing logic
	err = a.signRequest(req)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	// Add verification logic
	err = a.verifyResponse(localVarHTTPResponse, localVarBody)
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v AlipayOpenMiniWidgetGoodsUploadDefaultResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}


func (a *AlipayOpenMiniWidgetGoodsAPIService) signRequest(req *http.Request) error {
	appID := a.client.cfg.AppID
	appCertSN := a.client.cfg.AppCertSN
	privateKey := a.client.cfg.PrivateKey

	nonce := generateUUID()
	timestamp := strconv.FormatInt(time.Now().UnixNano()/1e6, 10)

	authString := fmt.Sprintf("app_id=%s", appID)
	if appCertSN != "" {
		authString += fmt.Sprintf(",app_cert_sn=%s", appCertSN)
	}
	authString += fmt.Sprintf(",nonce=%s,timestamp=%s", nonce, timestamp)

	httpMethod := req.Method
	httpRequestUri := req.URL.Path
	if req.URL.RawQuery != "" {
		httpRequestUri += "?" + req.URL.RawQuery
	}

	var httpRequestBody string
	if req.Body != nil {
		bodyBytes, err := io.ReadAll(req.Body)
		if err != nil {
			return err
		}
		httpRequestBody = string(bodyBytes)
		req.Body = io.NopCloser(bytes.NewBuffer(bodyBytes))
	}

	content := authString + "\n" +
		httpMethod + "\n" +
		httpRequestUri + "\n" +
		httpRequestBody + "\n"

	if appAuthToken := req.Header.Get("alipay-app-auth-token"); appAuthToken != "" {
		content += appAuthToken + "\n"
	}

	signature, err := signWithRSA(content, privateKey)
	if err != nil {
		return err
	}

	req.Header.Set("Authorization", fmt.Sprintf("ALIPAY-SHA256withRSA %s,sign=%s", authString, signature))
	return nil
}

func (a *AlipayOpenMiniWidgetGoodsAPIService) verifyResponse(resp *http.Response, body []byte) error {
	timestamp := resp.Header.Get("alipay-timestamp")
	nonce := resp.Header.Get("alipay-nonce")
	sign := resp.Header.Get("alipay-signature")

	content := timestamp + "\n" +
		nonce + "\n" +
		string(body) + "\n"

	publicKey := a.client.cfg.PublicKey

	return verifyWithRSA(content, sign, publicKey)
}


