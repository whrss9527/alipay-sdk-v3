/*
支付宝开放平台API

支付宝开放平台v3协议文档

API version: 2024-07-05
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the VoucherUseRuleModify type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VoucherUseRuleModify{}

// VoucherUseRuleModify struct for VoucherUseRuleModify
type VoucherUseRuleModify struct {
	ExchangeVoucher *ExchangeVoucherModify `json:"exchange_voucher,omitempty"`
	VoucherAvailableScope *VoucherAvailableScopeModify `json:"voucher_available_scope,omitempty"`
	VoucherValidPeriod *VoucherValidPeriodModify `json:"voucher_valid_period,omitempty"`
}

// NewVoucherUseRuleModify instantiates a new VoucherUseRuleModify object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVoucherUseRuleModify() *VoucherUseRuleModify {
	this := VoucherUseRuleModify{}
	return &this
}

// NewVoucherUseRuleModifyWithDefaults instantiates a new VoucherUseRuleModify object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVoucherUseRuleModifyWithDefaults() *VoucherUseRuleModify {
	this := VoucherUseRuleModify{}
	return &this
}

// GetExchangeVoucher returns the ExchangeVoucher field value if set, zero value otherwise.
func (o *VoucherUseRuleModify) GetExchangeVoucher() ExchangeVoucherModify {
	if o == nil || IsNil(o.ExchangeVoucher) {
		var ret ExchangeVoucherModify
		return ret
	}
	return *o.ExchangeVoucher
}

// GetExchangeVoucherOk returns a tuple with the ExchangeVoucher field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VoucherUseRuleModify) GetExchangeVoucherOk() (*ExchangeVoucherModify, bool) {
	if o == nil || IsNil(o.ExchangeVoucher) {
		return nil, false
	}
	return o.ExchangeVoucher, true
}

// HasExchangeVoucher returns a boolean if a field has been set.
func (o *VoucherUseRuleModify) HasExchangeVoucher() bool {
	if o != nil && !IsNil(o.ExchangeVoucher) {
		return true
	}

	return false
}

// SetExchangeVoucher gets a reference to the given ExchangeVoucherModify and assigns it to the ExchangeVoucher field.
func (o *VoucherUseRuleModify) SetExchangeVoucher(v ExchangeVoucherModify) {
	o.ExchangeVoucher = &v
}

// GetVoucherAvailableScope returns the VoucherAvailableScope field value if set, zero value otherwise.
func (o *VoucherUseRuleModify) GetVoucherAvailableScope() VoucherAvailableScopeModify {
	if o == nil || IsNil(o.VoucherAvailableScope) {
		var ret VoucherAvailableScopeModify
		return ret
	}
	return *o.VoucherAvailableScope
}

// GetVoucherAvailableScopeOk returns a tuple with the VoucherAvailableScope field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VoucherUseRuleModify) GetVoucherAvailableScopeOk() (*VoucherAvailableScopeModify, bool) {
	if o == nil || IsNil(o.VoucherAvailableScope) {
		return nil, false
	}
	return o.VoucherAvailableScope, true
}

// HasVoucherAvailableScope returns a boolean if a field has been set.
func (o *VoucherUseRuleModify) HasVoucherAvailableScope() bool {
	if o != nil && !IsNil(o.VoucherAvailableScope) {
		return true
	}

	return false
}

// SetVoucherAvailableScope gets a reference to the given VoucherAvailableScopeModify and assigns it to the VoucherAvailableScope field.
func (o *VoucherUseRuleModify) SetVoucherAvailableScope(v VoucherAvailableScopeModify) {
	o.VoucherAvailableScope = &v
}

// GetVoucherValidPeriod returns the VoucherValidPeriod field value if set, zero value otherwise.
func (o *VoucherUseRuleModify) GetVoucherValidPeriod() VoucherValidPeriodModify {
	if o == nil || IsNil(o.VoucherValidPeriod) {
		var ret VoucherValidPeriodModify
		return ret
	}
	return *o.VoucherValidPeriod
}

// GetVoucherValidPeriodOk returns a tuple with the VoucherValidPeriod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VoucherUseRuleModify) GetVoucherValidPeriodOk() (*VoucherValidPeriodModify, bool) {
	if o == nil || IsNil(o.VoucherValidPeriod) {
		return nil, false
	}
	return o.VoucherValidPeriod, true
}

// HasVoucherValidPeriod returns a boolean if a field has been set.
func (o *VoucherUseRuleModify) HasVoucherValidPeriod() bool {
	if o != nil && !IsNil(o.VoucherValidPeriod) {
		return true
	}

	return false
}

// SetVoucherValidPeriod gets a reference to the given VoucherValidPeriodModify and assigns it to the VoucherValidPeriod field.
func (o *VoucherUseRuleModify) SetVoucherValidPeriod(v VoucherValidPeriodModify) {
	o.VoucherValidPeriod = &v
}

func (o VoucherUseRuleModify) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VoucherUseRuleModify) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ExchangeVoucher) {
		toSerialize["exchange_voucher"] = o.ExchangeVoucher
	}
	if !IsNil(o.VoucherAvailableScope) {
		toSerialize["voucher_available_scope"] = o.VoucherAvailableScope
	}
	if !IsNil(o.VoucherValidPeriod) {
		toSerialize["voucher_valid_period"] = o.VoucherValidPeriod
	}
	return toSerialize, nil
}

type NullableVoucherUseRuleModify struct {
	value *VoucherUseRuleModify
	isSet bool
}

func (v NullableVoucherUseRuleModify) Get() *VoucherUseRuleModify {
	return v.value
}

func (v *NullableVoucherUseRuleModify) Set(val *VoucherUseRuleModify) {
	v.value = val
	v.isSet = true
}

func (v NullableVoucherUseRuleModify) IsSet() bool {
	return v.isSet
}

func (v *NullableVoucherUseRuleModify) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVoucherUseRuleModify(val *VoucherUseRuleModify) *NullableVoucherUseRuleModify {
	return &NullableVoucherUseRuleModify{value: val, isSet: true}
}

func (v NullableVoucherUseRuleModify) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVoucherUseRuleModify) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


