/*
支付宝开放平台API

支付宝开放平台v3协议文档

API version: 2024-07-05
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the SearchBaseItems type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SearchBaseItems{}

// SearchBaseItems struct for SearchBaseItems
type SearchBaseItems struct {
	// 搜索可见性
	CanSearch *bool `json:"can_search,omitempty"`
	// 提报关键词列表
	KeyWords []string `json:"key_words,omitempty"`
}

// NewSearchBaseItems instantiates a new SearchBaseItems object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSearchBaseItems() *SearchBaseItems {
	this := SearchBaseItems{}
	return &this
}

// NewSearchBaseItemsWithDefaults instantiates a new SearchBaseItems object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSearchBaseItemsWithDefaults() *SearchBaseItems {
	this := SearchBaseItems{}
	return &this
}

// GetCanSearch returns the CanSearch field value if set, zero value otherwise.
func (o *SearchBaseItems) GetCanSearch() bool {
	if o == nil || IsNil(o.CanSearch) {
		var ret bool
		return ret
	}
	return *o.CanSearch
}

// GetCanSearchOk returns a tuple with the CanSearch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchBaseItems) GetCanSearchOk() (*bool, bool) {
	if o == nil || IsNil(o.CanSearch) {
		return nil, false
	}
	return o.CanSearch, true
}

// HasCanSearch returns a boolean if a field has been set.
func (o *SearchBaseItems) HasCanSearch() bool {
	if o != nil && !IsNil(o.CanSearch) {
		return true
	}

	return false
}

// SetCanSearch gets a reference to the given bool and assigns it to the CanSearch field.
func (o *SearchBaseItems) SetCanSearch(v bool) {
	o.CanSearch = &v
}

// GetKeyWords returns the KeyWords field value if set, zero value otherwise.
func (o *SearchBaseItems) GetKeyWords() []string {
	if o == nil || IsNil(o.KeyWords) {
		var ret []string
		return ret
	}
	return o.KeyWords
}

// GetKeyWordsOk returns a tuple with the KeyWords field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchBaseItems) GetKeyWordsOk() ([]string, bool) {
	if o == nil || IsNil(o.KeyWords) {
		return nil, false
	}
	return o.KeyWords, true
}

// HasKeyWords returns a boolean if a field has been set.
func (o *SearchBaseItems) HasKeyWords() bool {
	if o != nil && !IsNil(o.KeyWords) {
		return true
	}

	return false
}

// SetKeyWords gets a reference to the given []string and assigns it to the KeyWords field.
func (o *SearchBaseItems) SetKeyWords(v []string) {
	o.KeyWords = v
}

func (o SearchBaseItems) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SearchBaseItems) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CanSearch) {
		toSerialize["can_search"] = o.CanSearch
	}
	if !IsNil(o.KeyWords) {
		toSerialize["key_words"] = o.KeyWords
	}
	return toSerialize, nil
}

type NullableSearchBaseItems struct {
	value *SearchBaseItems
	isSet bool
}

func (v NullableSearchBaseItems) Get() *SearchBaseItems {
	return v.value
}

func (v *NullableSearchBaseItems) Set(val *SearchBaseItems) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchBaseItems) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchBaseItems) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchBaseItems(val *SearchBaseItems) *NullableSearchBaseItems {
	return &NullableSearchBaseItems{value: val, isSet: true}
}

func (v NullableSearchBaseItems) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchBaseItems) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


