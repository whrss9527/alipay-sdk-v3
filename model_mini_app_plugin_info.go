/*
支付宝开放平台API

支付宝开放平台v3协议文档

API version: 2024-07-05
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the MiniAppPluginInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MiniAppPluginInfo{}

// MiniAppPluginInfo struct for MiniAppPluginInfo
type MiniAppPluginInfo struct {
	// 插件包地址
	PackageUrl *string `json:"package_url,omitempty"`
	// 插件id，即插件的唯一标识
	PluginId *string `json:"plugin_id,omitempty"`
	// 小程序引用的插件版本，可以指定插件版本，1.2.3。也可以使用最新版本,*。推荐使用*
	RequireVersion *string `json:"require_version,omitempty"`
}

// NewMiniAppPluginInfo instantiates a new MiniAppPluginInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMiniAppPluginInfo() *MiniAppPluginInfo {
	this := MiniAppPluginInfo{}
	return &this
}

// NewMiniAppPluginInfoWithDefaults instantiates a new MiniAppPluginInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMiniAppPluginInfoWithDefaults() *MiniAppPluginInfo {
	this := MiniAppPluginInfo{}
	return &this
}

// GetPackageUrl returns the PackageUrl field value if set, zero value otherwise.
func (o *MiniAppPluginInfo) GetPackageUrl() string {
	if o == nil || IsNil(o.PackageUrl) {
		var ret string
		return ret
	}
	return *o.PackageUrl
}

// GetPackageUrlOk returns a tuple with the PackageUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MiniAppPluginInfo) GetPackageUrlOk() (*string, bool) {
	if o == nil || IsNil(o.PackageUrl) {
		return nil, false
	}
	return o.PackageUrl, true
}

// HasPackageUrl returns a boolean if a field has been set.
func (o *MiniAppPluginInfo) HasPackageUrl() bool {
	if o != nil && !IsNil(o.PackageUrl) {
		return true
	}

	return false
}

// SetPackageUrl gets a reference to the given string and assigns it to the PackageUrl field.
func (o *MiniAppPluginInfo) SetPackageUrl(v string) {
	o.PackageUrl = &v
}

// GetPluginId returns the PluginId field value if set, zero value otherwise.
func (o *MiniAppPluginInfo) GetPluginId() string {
	if o == nil || IsNil(o.PluginId) {
		var ret string
		return ret
	}
	return *o.PluginId
}

// GetPluginIdOk returns a tuple with the PluginId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MiniAppPluginInfo) GetPluginIdOk() (*string, bool) {
	if o == nil || IsNil(o.PluginId) {
		return nil, false
	}
	return o.PluginId, true
}

// HasPluginId returns a boolean if a field has been set.
func (o *MiniAppPluginInfo) HasPluginId() bool {
	if o != nil && !IsNil(o.PluginId) {
		return true
	}

	return false
}

// SetPluginId gets a reference to the given string and assigns it to the PluginId field.
func (o *MiniAppPluginInfo) SetPluginId(v string) {
	o.PluginId = &v
}

// GetRequireVersion returns the RequireVersion field value if set, zero value otherwise.
func (o *MiniAppPluginInfo) GetRequireVersion() string {
	if o == nil || IsNil(o.RequireVersion) {
		var ret string
		return ret
	}
	return *o.RequireVersion
}

// GetRequireVersionOk returns a tuple with the RequireVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MiniAppPluginInfo) GetRequireVersionOk() (*string, bool) {
	if o == nil || IsNil(o.RequireVersion) {
		return nil, false
	}
	return o.RequireVersion, true
}

// HasRequireVersion returns a boolean if a field has been set.
func (o *MiniAppPluginInfo) HasRequireVersion() bool {
	if o != nil && !IsNil(o.RequireVersion) {
		return true
	}

	return false
}

// SetRequireVersion gets a reference to the given string and assigns it to the RequireVersion field.
func (o *MiniAppPluginInfo) SetRequireVersion(v string) {
	o.RequireVersion = &v
}

func (o MiniAppPluginInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MiniAppPluginInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.PackageUrl) {
		toSerialize["package_url"] = o.PackageUrl
	}
	if !IsNil(o.PluginId) {
		toSerialize["plugin_id"] = o.PluginId
	}
	if !IsNil(o.RequireVersion) {
		toSerialize["require_version"] = o.RequireVersion
	}
	return toSerialize, nil
}

type NullableMiniAppPluginInfo struct {
	value *MiniAppPluginInfo
	isSet bool
}

func (v NullableMiniAppPluginInfo) Get() *MiniAppPluginInfo {
	return v.value
}

func (v *NullableMiniAppPluginInfo) Set(val *MiniAppPluginInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableMiniAppPluginInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableMiniAppPluginInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMiniAppPluginInfo(val *MiniAppPluginInfo) *NullableMiniAppPluginInfo {
	return &NullableMiniAppPluginInfo{value: val, isSet: true}
}

func (v NullableMiniAppPluginInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMiniAppPluginInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


