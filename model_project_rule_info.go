/*
支付宝开放平台API

支付宝开放平台v3协议文档

API version: 2024-07-05
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alipay

import (
	"encoding/json"
)

// checks if the ProjectRuleInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProjectRuleInfo{}

// ProjectRuleInfo struct for ProjectRuleInfo
type ProjectRuleInfo struct {
	// 有效期截止
	EffectiveEndDate *string `json:"effective_end_date,omitempty"`
	// 有效期起始
	EffectiveStartDate *string `json:"effective_start_date,omitempty"`
	// 切换open_id前请使用此字段：员工uid列表
	EmployeeList []string `json:"employee_list,omitempty"`
	// 切换open_id后请使用此字段：员工open_id列表
	EmployeeOpenIdList []string `json:"employee_open_id_list,omitempty"`
	// 规则组列表
	ExpenseCtrlRuleInfoGroupList []ExpenseCtrRuleGroupInfo `json:"expense_ctrl_rule_info_group_list,omitempty"`
	// 项目id
	ProjectId *string `json:"project_id,omitempty"`
	// 项目名称
	ProjectName *string `json:"project_name,omitempty"`
}

// NewProjectRuleInfo instantiates a new ProjectRuleInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProjectRuleInfo() *ProjectRuleInfo {
	this := ProjectRuleInfo{}
	return &this
}

// NewProjectRuleInfoWithDefaults instantiates a new ProjectRuleInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProjectRuleInfoWithDefaults() *ProjectRuleInfo {
	this := ProjectRuleInfo{}
	return &this
}

// GetEffectiveEndDate returns the EffectiveEndDate field value if set, zero value otherwise.
func (o *ProjectRuleInfo) GetEffectiveEndDate() string {
	if o == nil || IsNil(o.EffectiveEndDate) {
		var ret string
		return ret
	}
	return *o.EffectiveEndDate
}

// GetEffectiveEndDateOk returns a tuple with the EffectiveEndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectRuleInfo) GetEffectiveEndDateOk() (*string, bool) {
	if o == nil || IsNil(o.EffectiveEndDate) {
		return nil, false
	}
	return o.EffectiveEndDate, true
}

// HasEffectiveEndDate returns a boolean if a field has been set.
func (o *ProjectRuleInfo) HasEffectiveEndDate() bool {
	if o != nil && !IsNil(o.EffectiveEndDate) {
		return true
	}

	return false
}

// SetEffectiveEndDate gets a reference to the given string and assigns it to the EffectiveEndDate field.
func (o *ProjectRuleInfo) SetEffectiveEndDate(v string) {
	o.EffectiveEndDate = &v
}

// GetEffectiveStartDate returns the EffectiveStartDate field value if set, zero value otherwise.
func (o *ProjectRuleInfo) GetEffectiveStartDate() string {
	if o == nil || IsNil(o.EffectiveStartDate) {
		var ret string
		return ret
	}
	return *o.EffectiveStartDate
}

// GetEffectiveStartDateOk returns a tuple with the EffectiveStartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectRuleInfo) GetEffectiveStartDateOk() (*string, bool) {
	if o == nil || IsNil(o.EffectiveStartDate) {
		return nil, false
	}
	return o.EffectiveStartDate, true
}

// HasEffectiveStartDate returns a boolean if a field has been set.
func (o *ProjectRuleInfo) HasEffectiveStartDate() bool {
	if o != nil && !IsNil(o.EffectiveStartDate) {
		return true
	}

	return false
}

// SetEffectiveStartDate gets a reference to the given string and assigns it to the EffectiveStartDate field.
func (o *ProjectRuleInfo) SetEffectiveStartDate(v string) {
	o.EffectiveStartDate = &v
}

// GetEmployeeList returns the EmployeeList field value if set, zero value otherwise.
func (o *ProjectRuleInfo) GetEmployeeList() []string {
	if o == nil || IsNil(o.EmployeeList) {
		var ret []string
		return ret
	}
	return o.EmployeeList
}

// GetEmployeeListOk returns a tuple with the EmployeeList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectRuleInfo) GetEmployeeListOk() ([]string, bool) {
	if o == nil || IsNil(o.EmployeeList) {
		return nil, false
	}
	return o.EmployeeList, true
}

// HasEmployeeList returns a boolean if a field has been set.
func (o *ProjectRuleInfo) HasEmployeeList() bool {
	if o != nil && !IsNil(o.EmployeeList) {
		return true
	}

	return false
}

// SetEmployeeList gets a reference to the given []string and assigns it to the EmployeeList field.
func (o *ProjectRuleInfo) SetEmployeeList(v []string) {
	o.EmployeeList = v
}

// GetEmployeeOpenIdList returns the EmployeeOpenIdList field value if set, zero value otherwise.
func (o *ProjectRuleInfo) GetEmployeeOpenIdList() []string {
	if o == nil || IsNil(o.EmployeeOpenIdList) {
		var ret []string
		return ret
	}
	return o.EmployeeOpenIdList
}

// GetEmployeeOpenIdListOk returns a tuple with the EmployeeOpenIdList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectRuleInfo) GetEmployeeOpenIdListOk() ([]string, bool) {
	if o == nil || IsNil(o.EmployeeOpenIdList) {
		return nil, false
	}
	return o.EmployeeOpenIdList, true
}

// HasEmployeeOpenIdList returns a boolean if a field has been set.
func (o *ProjectRuleInfo) HasEmployeeOpenIdList() bool {
	if o != nil && !IsNil(o.EmployeeOpenIdList) {
		return true
	}

	return false
}

// SetEmployeeOpenIdList gets a reference to the given []string and assigns it to the EmployeeOpenIdList field.
func (o *ProjectRuleInfo) SetEmployeeOpenIdList(v []string) {
	o.EmployeeOpenIdList = v
}

// GetExpenseCtrlRuleInfoGroupList returns the ExpenseCtrlRuleInfoGroupList field value if set, zero value otherwise.
func (o *ProjectRuleInfo) GetExpenseCtrlRuleInfoGroupList() []ExpenseCtrRuleGroupInfo {
	if o == nil || IsNil(o.ExpenseCtrlRuleInfoGroupList) {
		var ret []ExpenseCtrRuleGroupInfo
		return ret
	}
	return o.ExpenseCtrlRuleInfoGroupList
}

// GetExpenseCtrlRuleInfoGroupListOk returns a tuple with the ExpenseCtrlRuleInfoGroupList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectRuleInfo) GetExpenseCtrlRuleInfoGroupListOk() ([]ExpenseCtrRuleGroupInfo, bool) {
	if o == nil || IsNil(o.ExpenseCtrlRuleInfoGroupList) {
		return nil, false
	}
	return o.ExpenseCtrlRuleInfoGroupList, true
}

// HasExpenseCtrlRuleInfoGroupList returns a boolean if a field has been set.
func (o *ProjectRuleInfo) HasExpenseCtrlRuleInfoGroupList() bool {
	if o != nil && !IsNil(o.ExpenseCtrlRuleInfoGroupList) {
		return true
	}

	return false
}

// SetExpenseCtrlRuleInfoGroupList gets a reference to the given []ExpenseCtrRuleGroupInfo and assigns it to the ExpenseCtrlRuleInfoGroupList field.
func (o *ProjectRuleInfo) SetExpenseCtrlRuleInfoGroupList(v []ExpenseCtrRuleGroupInfo) {
	o.ExpenseCtrlRuleInfoGroupList = v
}

// GetProjectId returns the ProjectId field value if set, zero value otherwise.
func (o *ProjectRuleInfo) GetProjectId() string {
	if o == nil || IsNil(o.ProjectId) {
		var ret string
		return ret
	}
	return *o.ProjectId
}

// GetProjectIdOk returns a tuple with the ProjectId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectRuleInfo) GetProjectIdOk() (*string, bool) {
	if o == nil || IsNil(o.ProjectId) {
		return nil, false
	}
	return o.ProjectId, true
}

// HasProjectId returns a boolean if a field has been set.
func (o *ProjectRuleInfo) HasProjectId() bool {
	if o != nil && !IsNil(o.ProjectId) {
		return true
	}

	return false
}

// SetProjectId gets a reference to the given string and assigns it to the ProjectId field.
func (o *ProjectRuleInfo) SetProjectId(v string) {
	o.ProjectId = &v
}

// GetProjectName returns the ProjectName field value if set, zero value otherwise.
func (o *ProjectRuleInfo) GetProjectName() string {
	if o == nil || IsNil(o.ProjectName) {
		var ret string
		return ret
	}
	return *o.ProjectName
}

// GetProjectNameOk returns a tuple with the ProjectName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectRuleInfo) GetProjectNameOk() (*string, bool) {
	if o == nil || IsNil(o.ProjectName) {
		return nil, false
	}
	return o.ProjectName, true
}

// HasProjectName returns a boolean if a field has been set.
func (o *ProjectRuleInfo) HasProjectName() bool {
	if o != nil && !IsNil(o.ProjectName) {
		return true
	}

	return false
}

// SetProjectName gets a reference to the given string and assigns it to the ProjectName field.
func (o *ProjectRuleInfo) SetProjectName(v string) {
	o.ProjectName = &v
}

func (o ProjectRuleInfo) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProjectRuleInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EffectiveEndDate) {
		toSerialize["effective_end_date"] = o.EffectiveEndDate
	}
	if !IsNil(o.EffectiveStartDate) {
		toSerialize["effective_start_date"] = o.EffectiveStartDate
	}
	if !IsNil(o.EmployeeList) {
		toSerialize["employee_list"] = o.EmployeeList
	}
	if !IsNil(o.EmployeeOpenIdList) {
		toSerialize["employee_open_id_list"] = o.EmployeeOpenIdList
	}
	if !IsNil(o.ExpenseCtrlRuleInfoGroupList) {
		toSerialize["expense_ctrl_rule_info_group_list"] = o.ExpenseCtrlRuleInfoGroupList
	}
	if !IsNil(o.ProjectId) {
		toSerialize["project_id"] = o.ProjectId
	}
	if !IsNil(o.ProjectName) {
		toSerialize["project_name"] = o.ProjectName
	}
	return toSerialize, nil
}

type NullableProjectRuleInfo struct {
	value *ProjectRuleInfo
	isSet bool
}

func (v NullableProjectRuleInfo) Get() *ProjectRuleInfo {
	return v.value
}

func (v *NullableProjectRuleInfo) Set(val *ProjectRuleInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableProjectRuleInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableProjectRuleInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProjectRuleInfo(val *ProjectRuleInfo) *NullableProjectRuleInfo {
	return &NullableProjectRuleInfo{value: val, isSet: true}
}

func (v NullableProjectRuleInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProjectRuleInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
