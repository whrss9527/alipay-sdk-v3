/*
支付宝开放平台API

支付宝开放平台v3协议文档

API version: 2024-07-05
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alipay

import (
	"bytes"
	"context"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strconv"
	"strings"
	"time"
)

// AlipayMarketingActivityDeliveryAPIService AlipayMarketingActivityDeliveryAPI service
type AlipayMarketingActivityDeliveryAPIService service

type ApiAlipayMarketingActivityDeliveryCreateRequest struct {
	ctx                                        context.Context
	ApiService                                 *AlipayMarketingActivityDeliveryAPIService
	alipayMarketingActivityDeliveryCreateModel *AlipayMarketingActivityDeliveryCreateModel
}

func (r ApiAlipayMarketingActivityDeliveryCreateRequest) AlipayMarketingActivityDeliveryCreateModel(alipayMarketingActivityDeliveryCreateModel AlipayMarketingActivityDeliveryCreateModel) ApiAlipayMarketingActivityDeliveryCreateRequest {
	r.alipayMarketingActivityDeliveryCreateModel = &alipayMarketingActivityDeliveryCreateModel
	return r
}

func (r ApiAlipayMarketingActivityDeliveryCreateRequest) Execute() (*AlipayMarketingActivityDeliveryCreateResponseModel, *http.Response, error) {
	return r.ApiService.AlipayMarketingActivityDeliveryCreateExecute(r)
}

/*
AlipayMarketingActivityDeliveryCreate 创建推广计划

为商家提供推广内容能力。创建推广成功后，请依据推广变更消息alipay.marketing.activity.delivery.message感知推广变更状态。

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiAlipayMarketingActivityDeliveryCreateRequest
*/
func (r *AlipayMarketingActivityDeliveryAPIService) AlipayMarketingActivityDeliveryCreate(ctx context.Context) ApiAlipayMarketingActivityDeliveryCreateRequest {
	return ApiAlipayMarketingActivityDeliveryCreateRequest{
		ApiService: r,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return AlipayMarketingActivityDeliveryCreateResponseModel
func (a *AlipayMarketingActivityDeliveryAPIService) AlipayMarketingActivityDeliveryCreateExecute(r ApiAlipayMarketingActivityDeliveryCreateRequest) (*AlipayMarketingActivityDeliveryCreateResponseModel, *http.Response, error) {
	err := a.client.prepareConfig()
	if err != nil {
		return nil, nil, &GenericOpenAPIError{error: err.Error()}
	}
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *AlipayMarketingActivityDeliveryCreateResponseModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AlipayMarketingActivityDeliveryAPIService.AlipayMarketingActivityDeliveryCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/alipay/marketing/delivery"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.alipayMarketingActivityDeliveryCreateModel

	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	// Add signing logic
	err = a.signRequest(req)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	// Add verification logic
	err = a.verifyResponse(localVarHTTPResponse, localVarBody)
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v AlipayMarketingActivityDeliveryCreateDefaultResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAlipayMarketingActivityDeliveryQueryRequest struct {
	ctx                                       context.Context
	ApiService                                *AlipayMarketingActivityDeliveryAPIService
	deliveryId                                string
	alipayMarketingActivityDeliveryQueryModel *AlipayMarketingActivityDeliveryQueryModel
}

func (r ApiAlipayMarketingActivityDeliveryQueryRequest) AlipayMarketingActivityDeliveryQueryModel(alipayMarketingActivityDeliveryQueryModel AlipayMarketingActivityDeliveryQueryModel) ApiAlipayMarketingActivityDeliveryQueryRequest {
	r.alipayMarketingActivityDeliveryQueryModel = &alipayMarketingActivityDeliveryQueryModel
	return r
}

func (r ApiAlipayMarketingActivityDeliveryQueryRequest) Execute() (*AlipayMarketingActivityDeliveryQueryResponseModel, *http.Response, error) {
	return r.ApiService.AlipayMarketingActivityDeliveryQueryExecute(r)
}

/*
AlipayMarketingActivityDeliveryQuery 查询推广计划

查询推广计划详情信息。

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param deliveryId 推广计划id
	@return ApiAlipayMarketingActivityDeliveryQueryRequest
*/
func (r *AlipayMarketingActivityDeliveryAPIService) AlipayMarketingActivityDeliveryQuery(ctx context.Context, deliveryId string) ApiAlipayMarketingActivityDeliveryQueryRequest {
	return ApiAlipayMarketingActivityDeliveryQueryRequest{
		ApiService: r,
		ctx:        ctx,
		deliveryId: deliveryId,
	}
}

// Execute executes the request
//
//	@return AlipayMarketingActivityDeliveryQueryResponseModel
func (a *AlipayMarketingActivityDeliveryAPIService) AlipayMarketingActivityDeliveryQueryExecute(r ApiAlipayMarketingActivityDeliveryQueryRequest) (*AlipayMarketingActivityDeliveryQueryResponseModel, *http.Response, error) {
	err := a.client.prepareConfig()
	if err != nil {
		return nil, nil, &GenericOpenAPIError{error: err.Error()}
	}
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *AlipayMarketingActivityDeliveryQueryResponseModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AlipayMarketingActivityDeliveryAPIService.AlipayMarketingActivityDeliveryQuery")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/alipay/marketing/delivery/{delivery_id}/query"
	localVarPath = strings.Replace(localVarPath, "{"+"delivery_id"+"}", url.PathEscape(parameterValueToString(r.deliveryId, "deliveryId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.alipayMarketingActivityDeliveryQueryModel

	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	// Add signing logic
	err = a.signRequest(req)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	// Add verification logic
	err = a.verifyResponse(localVarHTTPResponse, localVarBody)
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v AlipayMarketingActivityDeliveryQueryDefaultResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAlipayMarketingActivityDeliveryStopRequest struct {
	ctx                                      context.Context
	ApiService                               *AlipayMarketingActivityDeliveryAPIService
	deliveryId                               string
	alipayMarketingActivityDeliveryStopModel *AlipayMarketingActivityDeliveryStopModel
}

func (r ApiAlipayMarketingActivityDeliveryStopRequest) AlipayMarketingActivityDeliveryStopModel(alipayMarketingActivityDeliveryStopModel AlipayMarketingActivityDeliveryStopModel) ApiAlipayMarketingActivityDeliveryStopRequest {
	r.alipayMarketingActivityDeliveryStopModel = &alipayMarketingActivityDeliveryStopModel
	return r
}

func (r ApiAlipayMarketingActivityDeliveryStopRequest) Execute() (*AlipayMarketingActivityDeliveryStopResponseModel, *http.Response, error) {
	return r.ApiService.AlipayMarketingActivityDeliveryStopExecute(r)
}

/*
AlipayMarketingActivityDeliveryStop 停止推广计划

停止推广计划。
注意：停止推广操作成功到推广内容停止生效，可能存在几分钟的延迟。

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param deliveryId 推广计划id
	@return ApiAlipayMarketingActivityDeliveryStopRequest
*/
func (r *AlipayMarketingActivityDeliveryAPIService) AlipayMarketingActivityDeliveryStop(ctx context.Context, deliveryId string) ApiAlipayMarketingActivityDeliveryStopRequest {
	return ApiAlipayMarketingActivityDeliveryStopRequest{
		ApiService: r,
		ctx:        ctx,
		deliveryId: deliveryId,
	}
}

// Execute executes the request
//
//	@return AlipayMarketingActivityDeliveryStopResponseModel
func (a *AlipayMarketingActivityDeliveryAPIService) AlipayMarketingActivityDeliveryStopExecute(r ApiAlipayMarketingActivityDeliveryStopRequest) (*AlipayMarketingActivityDeliveryStopResponseModel, *http.Response, error) {
	err := a.client.prepareConfig()
	if err != nil {
		return nil, nil, &GenericOpenAPIError{error: err.Error()}
	}
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *AlipayMarketingActivityDeliveryStopResponseModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AlipayMarketingActivityDeliveryAPIService.AlipayMarketingActivityDeliveryStop")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/alipay/marketing/delivery/{delivery_id}/stop"
	localVarPath = strings.Replace(localVarPath, "{"+"delivery_id"+"}", url.PathEscape(parameterValueToString(r.deliveryId, "deliveryId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.alipayMarketingActivityDeliveryStopModel

	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	// Add signing logic
	err = a.signRequest(req)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	// Add verification logic
	err = a.verifyResponse(localVarHTTPResponse, localVarBody)
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v AlipayMarketingActivityDeliveryStopDefaultResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

func (a *AlipayMarketingActivityDeliveryAPIService) signRequest(req *http.Request) error {
	appID := a.client.cfg.AppID
	appCertSN := a.client.cfg.AppCertSN
	nonce := generateUUID()
	timestamp := strconv.FormatInt(time.Now().UnixNano()/1e6, 10)

	authString := fmt.Sprintf("app_id=%s", appID)
	if appCertSN != "" {
		authString += fmt.Sprintf(",app_cert_sn=%s", appCertSN)
	}
	authString += fmt.Sprintf(",nonce=%s,timestamp=%s", nonce, timestamp)

	httpMethod := req.Method
	httpRequestUri := req.URL.Path
	if req.URL.RawQuery != "" {
		httpRequestUri += "?" + req.URL.RawQuery
	}

	var httpRequestBody string
	if req.Body != nil {
		bodyBytes, err := io.ReadAll(req.Body)
		if err != nil {
			return err
		}
		httpRequestBody = string(bodyBytes)
		req.Body = io.NopCloser(bytes.NewBuffer(bodyBytes))
	}

	content := authString + "\n" +
		httpMethod + "\n" +
		httpRequestUri + "\n" +
		httpRequestBody + "\n"

	if appAuthToken := req.Header.Get("alipay-app-auth-token"); appAuthToken != "" {
		content += appAuthToken + "\n"
	}

	signature, err := signWithRSA(content, a.client.cfg.privateKey)
	if err != nil {
		return err
	}

	req.Header.Set("Authorization", fmt.Sprintf("ALIPAY-SHA256withRSA %s,sign=%s", authString, signature))
	return nil
}

func (a *AlipayMarketingActivityDeliveryAPIService) verifyResponse(resp *http.Response, body []byte) error {
	timestamp := resp.Header.Get("alipay-timestamp")
	nonce := resp.Header.Get("alipay-nonce")
	sign := resp.Header.Get("alipay-signature")

	content := timestamp + "\n" +
		nonce + "\n" +
		string(body) + "\n"

	return verifyWithRSA(content, sign, a.client.cfg.publicKey)
}
