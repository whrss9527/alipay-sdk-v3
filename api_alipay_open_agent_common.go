/*
支付宝开放平台API

支付宝开放平台v3协议文档

API version: 2024-07-05
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alipay

import (
	"bytes"
	"context"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"os"
	"strconv"
	"time"
)

// AlipayOpenAgentCommonAPIService AlipayOpenAgentCommonAPI service
type AlipayOpenAgentCommonAPIService service

type ApiAlipayOpenAgentCommonSignRequest struct {
	ctx                    context.Context
	ApiService             *AlipayOpenAgentCommonAPIService
	appAuthPic             *os.File
	appDemo                *os.File
	appHomeScreenshot      *os.File
	appItemScreenshot      *os.File
	appPayScreenshot       *os.File
	businessLicenseAuthPic *os.File
	businessLicensePic     *os.File
	data                   *AlipayOpenAgentCommonSignModel
	h5ExtraPic             *os.File
	h5HomeScreenshot       *os.File
	h5ItemScreenshot       *os.File
	h5PayScreenshot        *os.File
	h5SitesLoa             *os.File
	miniAppScreenshot      *os.File
	shopScenePic           *os.File
	shopSignBoardPic       *os.File
	specialLicensePic      *os.File
	webHomeScreenshot      *os.File
	webItemScreenshot      *os.File
	webPayScreenshot       *os.File
	webSitesLoa            *os.File
}

func (r ApiAlipayOpenAgentCommonSignRequest) AppAuthPic(appAuthPic *os.File) ApiAlipayOpenAgentCommonSignRequest {
	r.appAuthPic = appAuthPic
	return r
}

func (r ApiAlipayOpenAgentCommonSignRequest) AppDemo(appDemo *os.File) ApiAlipayOpenAgentCommonSignRequest {
	r.appDemo = appDemo
	return r
}

func (r ApiAlipayOpenAgentCommonSignRequest) AppHomeScreenshot(appHomeScreenshot *os.File) ApiAlipayOpenAgentCommonSignRequest {
	r.appHomeScreenshot = appHomeScreenshot
	return r
}

func (r ApiAlipayOpenAgentCommonSignRequest) AppItemScreenshot(appItemScreenshot *os.File) ApiAlipayOpenAgentCommonSignRequest {
	r.appItemScreenshot = appItemScreenshot
	return r
}

func (r ApiAlipayOpenAgentCommonSignRequest) AppPayScreenshot(appPayScreenshot *os.File) ApiAlipayOpenAgentCommonSignRequest {
	r.appPayScreenshot = appPayScreenshot
	return r
}

func (r ApiAlipayOpenAgentCommonSignRequest) BusinessLicenseAuthPic(businessLicenseAuthPic *os.File) ApiAlipayOpenAgentCommonSignRequest {
	r.businessLicenseAuthPic = businessLicenseAuthPic
	return r
}

func (r ApiAlipayOpenAgentCommonSignRequest) BusinessLicensePic(businessLicensePic *os.File) ApiAlipayOpenAgentCommonSignRequest {
	r.businessLicensePic = businessLicensePic
	return r
}

func (r ApiAlipayOpenAgentCommonSignRequest) Data(data AlipayOpenAgentCommonSignModel) ApiAlipayOpenAgentCommonSignRequest {
	r.data = &data
	return r
}

func (r ApiAlipayOpenAgentCommonSignRequest) H5ExtraPic(h5ExtraPic *os.File) ApiAlipayOpenAgentCommonSignRequest {
	r.h5ExtraPic = h5ExtraPic
	return r
}

func (r ApiAlipayOpenAgentCommonSignRequest) H5HomeScreenshot(h5HomeScreenshot *os.File) ApiAlipayOpenAgentCommonSignRequest {
	r.h5HomeScreenshot = h5HomeScreenshot
	return r
}

func (r ApiAlipayOpenAgentCommonSignRequest) H5ItemScreenshot(h5ItemScreenshot *os.File) ApiAlipayOpenAgentCommonSignRequest {
	r.h5ItemScreenshot = h5ItemScreenshot
	return r
}

func (r ApiAlipayOpenAgentCommonSignRequest) H5PayScreenshot(h5PayScreenshot *os.File) ApiAlipayOpenAgentCommonSignRequest {
	r.h5PayScreenshot = h5PayScreenshot
	return r
}

func (r ApiAlipayOpenAgentCommonSignRequest) H5SitesLoa(h5SitesLoa *os.File) ApiAlipayOpenAgentCommonSignRequest {
	r.h5SitesLoa = h5SitesLoa
	return r
}

func (r ApiAlipayOpenAgentCommonSignRequest) MiniAppScreenshot(miniAppScreenshot *os.File) ApiAlipayOpenAgentCommonSignRequest {
	r.miniAppScreenshot = miniAppScreenshot
	return r
}

func (r ApiAlipayOpenAgentCommonSignRequest) ShopScenePic(shopScenePic *os.File) ApiAlipayOpenAgentCommonSignRequest {
	r.shopScenePic = shopScenePic
	return r
}

func (r ApiAlipayOpenAgentCommonSignRequest) ShopSignBoardPic(shopSignBoardPic *os.File) ApiAlipayOpenAgentCommonSignRequest {
	r.shopSignBoardPic = shopSignBoardPic
	return r
}

func (r ApiAlipayOpenAgentCommonSignRequest) SpecialLicensePic(specialLicensePic *os.File) ApiAlipayOpenAgentCommonSignRequest {
	r.specialLicensePic = specialLicensePic
	return r
}

func (r ApiAlipayOpenAgentCommonSignRequest) WebHomeScreenshot(webHomeScreenshot *os.File) ApiAlipayOpenAgentCommonSignRequest {
	r.webHomeScreenshot = webHomeScreenshot
	return r
}

func (r ApiAlipayOpenAgentCommonSignRequest) WebItemScreenshot(webItemScreenshot *os.File) ApiAlipayOpenAgentCommonSignRequest {
	r.webItemScreenshot = webItemScreenshot
	return r
}

func (r ApiAlipayOpenAgentCommonSignRequest) WebPayScreenshot(webPayScreenshot *os.File) ApiAlipayOpenAgentCommonSignRequest {
	r.webPayScreenshot = webPayScreenshot
	return r
}

func (r ApiAlipayOpenAgentCommonSignRequest) WebSitesLoa(webSitesLoa *os.File) ApiAlipayOpenAgentCommonSignRequest {
	r.webSitesLoa = webSitesLoa
	return r
}

func (r ApiAlipayOpenAgentCommonSignRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.AlipayOpenAgentCommonSignExecute(r)
}

/*
AlipayOpenAgentCommonSign 代签约产品通用接口

三方应用代理签约产品，需要配合开启事务接口使用

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiAlipayOpenAgentCommonSignRequest
*/
func (r *AlipayOpenAgentCommonAPIService) AlipayOpenAgentCommonSign(ctx context.Context) ApiAlipayOpenAgentCommonSignRequest {
	return ApiAlipayOpenAgentCommonSignRequest{
		ApiService: r,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return map[string]interface{}
func (a *AlipayOpenAgentCommonAPIService) AlipayOpenAgentCommonSignExecute(r ApiAlipayOpenAgentCommonSignRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AlipayOpenAgentCommonAPIService.AlipayOpenAgentCommonSign")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/alipay/open/agent/common/sign"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	var appAuthPicLocalVarFormFileName string
	var appAuthPicLocalVarFileName string
	var appAuthPicLocalVarFileBytes []byte

	appAuthPicLocalVarFormFileName = "app_auth_pic"
	appAuthPicLocalVarFile := r.appAuthPic

	if appAuthPicLocalVarFile != nil {
		fbs, _ := io.ReadAll(appAuthPicLocalVarFile)

		appAuthPicLocalVarFileBytes = fbs
		appAuthPicLocalVarFileName = appAuthPicLocalVarFile.Name()
		appAuthPicLocalVarFile.Close()
		formFiles = append(formFiles, formFile{fileBytes: appAuthPicLocalVarFileBytes, fileName: appAuthPicLocalVarFileName, formFileName: appAuthPicLocalVarFormFileName})
	}
	var appDemoLocalVarFormFileName string
	var appDemoLocalVarFileName string
	var appDemoLocalVarFileBytes []byte

	appDemoLocalVarFormFileName = "app_demo"
	appDemoLocalVarFile := r.appDemo

	if appDemoLocalVarFile != nil {
		fbs, _ := io.ReadAll(appDemoLocalVarFile)

		appDemoLocalVarFileBytes = fbs
		appDemoLocalVarFileName = appDemoLocalVarFile.Name()
		appDemoLocalVarFile.Close()
		formFiles = append(formFiles, formFile{fileBytes: appDemoLocalVarFileBytes, fileName: appDemoLocalVarFileName, formFileName: appDemoLocalVarFormFileName})
	}
	var appHomeScreenshotLocalVarFormFileName string
	var appHomeScreenshotLocalVarFileName string
	var appHomeScreenshotLocalVarFileBytes []byte

	appHomeScreenshotLocalVarFormFileName = "app_home_screenshot"
	appHomeScreenshotLocalVarFile := r.appHomeScreenshot

	if appHomeScreenshotLocalVarFile != nil {
		fbs, _ := io.ReadAll(appHomeScreenshotLocalVarFile)

		appHomeScreenshotLocalVarFileBytes = fbs
		appHomeScreenshotLocalVarFileName = appHomeScreenshotLocalVarFile.Name()
		appHomeScreenshotLocalVarFile.Close()
		formFiles = append(formFiles, formFile{fileBytes: appHomeScreenshotLocalVarFileBytes, fileName: appHomeScreenshotLocalVarFileName, formFileName: appHomeScreenshotLocalVarFormFileName})
	}
	var appItemScreenshotLocalVarFormFileName string
	var appItemScreenshotLocalVarFileName string
	var appItemScreenshotLocalVarFileBytes []byte

	appItemScreenshotLocalVarFormFileName = "app_item_screenshot"
	appItemScreenshotLocalVarFile := r.appItemScreenshot

	if appItemScreenshotLocalVarFile != nil {
		fbs, _ := io.ReadAll(appItemScreenshotLocalVarFile)

		appItemScreenshotLocalVarFileBytes = fbs
		appItemScreenshotLocalVarFileName = appItemScreenshotLocalVarFile.Name()
		appItemScreenshotLocalVarFile.Close()
		formFiles = append(formFiles, formFile{fileBytes: appItemScreenshotLocalVarFileBytes, fileName: appItemScreenshotLocalVarFileName, formFileName: appItemScreenshotLocalVarFormFileName})
	}
	var appPayScreenshotLocalVarFormFileName string
	var appPayScreenshotLocalVarFileName string
	var appPayScreenshotLocalVarFileBytes []byte

	appPayScreenshotLocalVarFormFileName = "app_pay_screenshot"
	appPayScreenshotLocalVarFile := r.appPayScreenshot

	if appPayScreenshotLocalVarFile != nil {
		fbs, _ := io.ReadAll(appPayScreenshotLocalVarFile)

		appPayScreenshotLocalVarFileBytes = fbs
		appPayScreenshotLocalVarFileName = appPayScreenshotLocalVarFile.Name()
		appPayScreenshotLocalVarFile.Close()
		formFiles = append(formFiles, formFile{fileBytes: appPayScreenshotLocalVarFileBytes, fileName: appPayScreenshotLocalVarFileName, formFileName: appPayScreenshotLocalVarFormFileName})
	}
	var businessLicenseAuthPicLocalVarFormFileName string
	var businessLicenseAuthPicLocalVarFileName string
	var businessLicenseAuthPicLocalVarFileBytes []byte

	businessLicenseAuthPicLocalVarFormFileName = "business_license_auth_pic"
	businessLicenseAuthPicLocalVarFile := r.businessLicenseAuthPic

	if businessLicenseAuthPicLocalVarFile != nil {
		fbs, _ := io.ReadAll(businessLicenseAuthPicLocalVarFile)

		businessLicenseAuthPicLocalVarFileBytes = fbs
		businessLicenseAuthPicLocalVarFileName = businessLicenseAuthPicLocalVarFile.Name()
		businessLicenseAuthPicLocalVarFile.Close()
		formFiles = append(formFiles, formFile{fileBytes: businessLicenseAuthPicLocalVarFileBytes, fileName: businessLicenseAuthPicLocalVarFileName, formFileName: businessLicenseAuthPicLocalVarFormFileName})
	}
	var businessLicensePicLocalVarFormFileName string
	var businessLicensePicLocalVarFileName string
	var businessLicensePicLocalVarFileBytes []byte

	businessLicensePicLocalVarFormFileName = "business_license_pic"
	businessLicensePicLocalVarFile := r.businessLicensePic

	if businessLicensePicLocalVarFile != nil {
		fbs, _ := io.ReadAll(businessLicensePicLocalVarFile)

		businessLicensePicLocalVarFileBytes = fbs
		businessLicensePicLocalVarFileName = businessLicensePicLocalVarFile.Name()
		businessLicensePicLocalVarFile.Close()
		formFiles = append(formFiles, formFile{fileBytes: businessLicensePicLocalVarFileBytes, fileName: businessLicensePicLocalVarFileName, formFileName: businessLicensePicLocalVarFormFileName})
	}
	if r.data != nil {
		paramJson, err := parameterToJson(*r.data)
		if err != nil {
			return localVarReturnValue, nil, err
		}
		localVarFormParams.Add("data", paramJson)
	}
	var h5ExtraPicLocalVarFormFileName string
	var h5ExtraPicLocalVarFileName string
	var h5ExtraPicLocalVarFileBytes []byte

	h5ExtraPicLocalVarFormFileName = "h_5_extra_pic"
	h5ExtraPicLocalVarFile := r.h5ExtraPic

	if h5ExtraPicLocalVarFile != nil {
		fbs, _ := io.ReadAll(h5ExtraPicLocalVarFile)

		h5ExtraPicLocalVarFileBytes = fbs
		h5ExtraPicLocalVarFileName = h5ExtraPicLocalVarFile.Name()
		h5ExtraPicLocalVarFile.Close()
		formFiles = append(formFiles, formFile{fileBytes: h5ExtraPicLocalVarFileBytes, fileName: h5ExtraPicLocalVarFileName, formFileName: h5ExtraPicLocalVarFormFileName})
	}
	var h5HomeScreenshotLocalVarFormFileName string
	var h5HomeScreenshotLocalVarFileName string
	var h5HomeScreenshotLocalVarFileBytes []byte

	h5HomeScreenshotLocalVarFormFileName = "h_5_home_screenshot"
	h5HomeScreenshotLocalVarFile := r.h5HomeScreenshot

	if h5HomeScreenshotLocalVarFile != nil {
		fbs, _ := io.ReadAll(h5HomeScreenshotLocalVarFile)

		h5HomeScreenshotLocalVarFileBytes = fbs
		h5HomeScreenshotLocalVarFileName = h5HomeScreenshotLocalVarFile.Name()
		h5HomeScreenshotLocalVarFile.Close()
		formFiles = append(formFiles, formFile{fileBytes: h5HomeScreenshotLocalVarFileBytes, fileName: h5HomeScreenshotLocalVarFileName, formFileName: h5HomeScreenshotLocalVarFormFileName})
	}
	var h5ItemScreenshotLocalVarFormFileName string
	var h5ItemScreenshotLocalVarFileName string
	var h5ItemScreenshotLocalVarFileBytes []byte

	h5ItemScreenshotLocalVarFormFileName = "h_5_item_screenshot"
	h5ItemScreenshotLocalVarFile := r.h5ItemScreenshot

	if h5ItemScreenshotLocalVarFile != nil {
		fbs, _ := io.ReadAll(h5ItemScreenshotLocalVarFile)

		h5ItemScreenshotLocalVarFileBytes = fbs
		h5ItemScreenshotLocalVarFileName = h5ItemScreenshotLocalVarFile.Name()
		h5ItemScreenshotLocalVarFile.Close()
		formFiles = append(formFiles, formFile{fileBytes: h5ItemScreenshotLocalVarFileBytes, fileName: h5ItemScreenshotLocalVarFileName, formFileName: h5ItemScreenshotLocalVarFormFileName})
	}
	var h5PayScreenshotLocalVarFormFileName string
	var h5PayScreenshotLocalVarFileName string
	var h5PayScreenshotLocalVarFileBytes []byte

	h5PayScreenshotLocalVarFormFileName = "h_5_pay_screenshot"
	h5PayScreenshotLocalVarFile := r.h5PayScreenshot

	if h5PayScreenshotLocalVarFile != nil {
		fbs, _ := io.ReadAll(h5PayScreenshotLocalVarFile)

		h5PayScreenshotLocalVarFileBytes = fbs
		h5PayScreenshotLocalVarFileName = h5PayScreenshotLocalVarFile.Name()
		h5PayScreenshotLocalVarFile.Close()
		formFiles = append(formFiles, formFile{fileBytes: h5PayScreenshotLocalVarFileBytes, fileName: h5PayScreenshotLocalVarFileName, formFileName: h5PayScreenshotLocalVarFormFileName})
	}
	var h5SitesLoaLocalVarFormFileName string
	var h5SitesLoaLocalVarFileName string
	var h5SitesLoaLocalVarFileBytes []byte

	h5SitesLoaLocalVarFormFileName = "h_5_sites_loa"
	h5SitesLoaLocalVarFile := r.h5SitesLoa

	if h5SitesLoaLocalVarFile != nil {
		fbs, _ := io.ReadAll(h5SitesLoaLocalVarFile)

		h5SitesLoaLocalVarFileBytes = fbs
		h5SitesLoaLocalVarFileName = h5SitesLoaLocalVarFile.Name()
		h5SitesLoaLocalVarFile.Close()
		formFiles = append(formFiles, formFile{fileBytes: h5SitesLoaLocalVarFileBytes, fileName: h5SitesLoaLocalVarFileName, formFileName: h5SitesLoaLocalVarFormFileName})
	}
	var miniAppScreenshotLocalVarFormFileName string
	var miniAppScreenshotLocalVarFileName string
	var miniAppScreenshotLocalVarFileBytes []byte

	miniAppScreenshotLocalVarFormFileName = "mini_app_screenshot"
	miniAppScreenshotLocalVarFile := r.miniAppScreenshot

	if miniAppScreenshotLocalVarFile != nil {
		fbs, _ := io.ReadAll(miniAppScreenshotLocalVarFile)

		miniAppScreenshotLocalVarFileBytes = fbs
		miniAppScreenshotLocalVarFileName = miniAppScreenshotLocalVarFile.Name()
		miniAppScreenshotLocalVarFile.Close()
		formFiles = append(formFiles, formFile{fileBytes: miniAppScreenshotLocalVarFileBytes, fileName: miniAppScreenshotLocalVarFileName, formFileName: miniAppScreenshotLocalVarFormFileName})
	}
	var shopScenePicLocalVarFormFileName string
	var shopScenePicLocalVarFileName string
	var shopScenePicLocalVarFileBytes []byte

	shopScenePicLocalVarFormFileName = "shop_scene_pic"
	shopScenePicLocalVarFile := r.shopScenePic

	if shopScenePicLocalVarFile != nil {
		fbs, _ := io.ReadAll(shopScenePicLocalVarFile)

		shopScenePicLocalVarFileBytes = fbs
		shopScenePicLocalVarFileName = shopScenePicLocalVarFile.Name()
		shopScenePicLocalVarFile.Close()
		formFiles = append(formFiles, formFile{fileBytes: shopScenePicLocalVarFileBytes, fileName: shopScenePicLocalVarFileName, formFileName: shopScenePicLocalVarFormFileName})
	}
	var shopSignBoardPicLocalVarFormFileName string
	var shopSignBoardPicLocalVarFileName string
	var shopSignBoardPicLocalVarFileBytes []byte

	shopSignBoardPicLocalVarFormFileName = "shop_sign_board_pic"
	shopSignBoardPicLocalVarFile := r.shopSignBoardPic

	if shopSignBoardPicLocalVarFile != nil {
		fbs, _ := io.ReadAll(shopSignBoardPicLocalVarFile)

		shopSignBoardPicLocalVarFileBytes = fbs
		shopSignBoardPicLocalVarFileName = shopSignBoardPicLocalVarFile.Name()
		shopSignBoardPicLocalVarFile.Close()
		formFiles = append(formFiles, formFile{fileBytes: shopSignBoardPicLocalVarFileBytes, fileName: shopSignBoardPicLocalVarFileName, formFileName: shopSignBoardPicLocalVarFormFileName})
	}
	var specialLicensePicLocalVarFormFileName string
	var specialLicensePicLocalVarFileName string
	var specialLicensePicLocalVarFileBytes []byte

	specialLicensePicLocalVarFormFileName = "special_license_pic"
	specialLicensePicLocalVarFile := r.specialLicensePic

	if specialLicensePicLocalVarFile != nil {
		fbs, _ := io.ReadAll(specialLicensePicLocalVarFile)

		specialLicensePicLocalVarFileBytes = fbs
		specialLicensePicLocalVarFileName = specialLicensePicLocalVarFile.Name()
		specialLicensePicLocalVarFile.Close()
		formFiles = append(formFiles, formFile{fileBytes: specialLicensePicLocalVarFileBytes, fileName: specialLicensePicLocalVarFileName, formFileName: specialLicensePicLocalVarFormFileName})
	}
	var webHomeScreenshotLocalVarFormFileName string
	var webHomeScreenshotLocalVarFileName string
	var webHomeScreenshotLocalVarFileBytes []byte

	webHomeScreenshotLocalVarFormFileName = "web_home_screenshot"
	webHomeScreenshotLocalVarFile := r.webHomeScreenshot

	if webHomeScreenshotLocalVarFile != nil {
		fbs, _ := io.ReadAll(webHomeScreenshotLocalVarFile)

		webHomeScreenshotLocalVarFileBytes = fbs
		webHomeScreenshotLocalVarFileName = webHomeScreenshotLocalVarFile.Name()
		webHomeScreenshotLocalVarFile.Close()
		formFiles = append(formFiles, formFile{fileBytes: webHomeScreenshotLocalVarFileBytes, fileName: webHomeScreenshotLocalVarFileName, formFileName: webHomeScreenshotLocalVarFormFileName})
	}
	var webItemScreenshotLocalVarFormFileName string
	var webItemScreenshotLocalVarFileName string
	var webItemScreenshotLocalVarFileBytes []byte

	webItemScreenshotLocalVarFormFileName = "web_item_screenshot"
	webItemScreenshotLocalVarFile := r.webItemScreenshot

	if webItemScreenshotLocalVarFile != nil {
		fbs, _ := io.ReadAll(webItemScreenshotLocalVarFile)

		webItemScreenshotLocalVarFileBytes = fbs
		webItemScreenshotLocalVarFileName = webItemScreenshotLocalVarFile.Name()
		webItemScreenshotLocalVarFile.Close()
		formFiles = append(formFiles, formFile{fileBytes: webItemScreenshotLocalVarFileBytes, fileName: webItemScreenshotLocalVarFileName, formFileName: webItemScreenshotLocalVarFormFileName})
	}
	var webPayScreenshotLocalVarFormFileName string
	var webPayScreenshotLocalVarFileName string
	var webPayScreenshotLocalVarFileBytes []byte

	webPayScreenshotLocalVarFormFileName = "web_pay_screenshot"
	webPayScreenshotLocalVarFile := r.webPayScreenshot

	if webPayScreenshotLocalVarFile != nil {
		fbs, _ := io.ReadAll(webPayScreenshotLocalVarFile)

		webPayScreenshotLocalVarFileBytes = fbs
		webPayScreenshotLocalVarFileName = webPayScreenshotLocalVarFile.Name()
		webPayScreenshotLocalVarFile.Close()
		formFiles = append(formFiles, formFile{fileBytes: webPayScreenshotLocalVarFileBytes, fileName: webPayScreenshotLocalVarFileName, formFileName: webPayScreenshotLocalVarFormFileName})
	}
	var webSitesLoaLocalVarFormFileName string
	var webSitesLoaLocalVarFileName string
	var webSitesLoaLocalVarFileBytes []byte

	webSitesLoaLocalVarFormFileName = "web_sites_loa"
	webSitesLoaLocalVarFile := r.webSitesLoa

	if webSitesLoaLocalVarFile != nil {
		fbs, _ := io.ReadAll(webSitesLoaLocalVarFile)

		webSitesLoaLocalVarFileBytes = fbs
		webSitesLoaLocalVarFileName = webSitesLoaLocalVarFile.Name()
		webSitesLoaLocalVarFile.Close()
		formFiles = append(formFiles, formFile{fileBytes: webSitesLoaLocalVarFileBytes, fileName: webSitesLoaLocalVarFileName, formFileName: webSitesLoaLocalVarFormFileName})
	}

	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	// Add signing logic
	err = a.signRequest(req)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	// Add verification logic
	err = a.verifyResponse(localVarHTTPResponse, localVarBody)
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v AlipayOpenAgentCommonSignDefaultResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

func (a *AlipayOpenAgentCommonAPIService) signRequest(req *http.Request) error {
	appID := a.client.cfg.AppID
	appCertSN := a.client.cfg.AppCertSN
	privateKey := a.client.cfg.PrivateKey

	nonce := generateUUID()
	timestamp := strconv.FormatInt(time.Now().UnixNano()/1e6, 10)

	authString := fmt.Sprintf("app_id=%s", appID)
	if appCertSN != "" {
		authString += fmt.Sprintf(",app_cert_sn=%s", appCertSN)
	}
	authString += fmt.Sprintf(",nonce=%s,timestamp=%s", nonce, timestamp)

	httpMethod := req.Method
	httpRequestUri := req.URL.Path
	if req.URL.RawQuery != "" {
		httpRequestUri += "?" + req.URL.RawQuery
	}

	var httpRequestBody string
	if req.Body != nil {
		bodyBytes, err := io.ReadAll(req.Body)
		if err != nil {
			return err
		}
		httpRequestBody = string(bodyBytes)
		req.Body = io.NopCloser(bytes.NewBuffer(bodyBytes))
	}

	content := authString + "\n" +
		httpMethod + "\n" +
		httpRequestUri + "\n" +
		httpRequestBody + "\n"

	if appAuthToken := req.Header.Get("alipay-app-auth-token"); appAuthToken != "" {
		content += appAuthToken + "\n"
	}

	signature, err := signWithRSA(content, privateKey)
	if err != nil {
		return err
	}

	req.Header.Set("Authorization", fmt.Sprintf("ALIPAY-SHA256withRSA %s,sign=%s", authString, signature))
	return nil
}

func (a *AlipayOpenAgentCommonAPIService) verifyResponse(resp *http.Response, body []byte) error {
	timestamp := resp.Header.Get("alipay-timestamp")
	nonce := resp.Header.Get("alipay-nonce")
	sign := resp.Header.Get("alipay-signature")

	content := timestamp + "\n" +
		nonce + "\n" +
		string(body) + "\n"

	publicKey := a.client.cfg.PublicKey

	return verifyWithRSA(content, sign, publicKey)
}
