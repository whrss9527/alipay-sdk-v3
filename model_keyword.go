/*
支付宝开放平台API

支付宝开放平台v3协议文档

API version: 2024-07-05
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Keyword type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Keyword{}

// Keyword struct for Keyword
type Keyword struct {
	// 当前文字颜色
	Color *string `json:"color,omitempty"`
	// 模板中占位符的值
	Value *string `json:"value,omitempty"`
}

// NewKeyword instantiates a new Keyword object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKeyword() *Keyword {
	this := Keyword{}
	return &this
}

// NewKeywordWithDefaults instantiates a new Keyword object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKeywordWithDefaults() *Keyword {
	this := Keyword{}
	return &this
}

// GetColor returns the Color field value if set, zero value otherwise.
func (o *Keyword) GetColor() string {
	if o == nil || IsNil(o.Color) {
		var ret string
		return ret
	}
	return *o.Color
}

// GetColorOk returns a tuple with the Color field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Keyword) GetColorOk() (*string, bool) {
	if o == nil || IsNil(o.Color) {
		return nil, false
	}
	return o.Color, true
}

// HasColor returns a boolean if a field has been set.
func (o *Keyword) HasColor() bool {
	if o != nil && !IsNil(o.Color) {
		return true
	}

	return false
}

// SetColor gets a reference to the given string and assigns it to the Color field.
func (o *Keyword) SetColor(v string) {
	o.Color = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *Keyword) GetValue() string {
	if o == nil || IsNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Keyword) GetValueOk() (*string, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *Keyword) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *Keyword) SetValue(v string) {
	o.Value = &v
}

func (o Keyword) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Keyword) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Color) {
		toSerialize["color"] = o.Color
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	return toSerialize, nil
}

type NullableKeyword struct {
	value *Keyword
	isSet bool
}

func (v NullableKeyword) Get() *Keyword {
	return v.value
}

func (v *NullableKeyword) Set(val *Keyword) {
	v.value = val
	v.isSet = true
}

func (v NullableKeyword) IsSet() bool {
	return v.isSet
}

func (v *NullableKeyword) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKeyword(val *Keyword) *NullableKeyword {
	return &NullableKeyword{value: val, isSet: true}
}

func (v NullableKeyword) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKeyword) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


