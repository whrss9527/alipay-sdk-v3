/*
支付宝开放平台API

支付宝开放平台v3协议文档

API version: 2024-07-05
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alipay

import (
	"encoding/json"
)

// checks if the AgreementDetail type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AgreementDetail{}

// AgreementDetail struct for AgreementDetail
type AgreementDetail struct {
	// 协议号
	AgreementNo *string `json:"agreement_no,omitempty"`
	// 协议状态
	Status *string `json:"status,omitempty"`
}

// NewAgreementDetail instantiates a new AgreementDetail object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAgreementDetail() *AgreementDetail {
	this := AgreementDetail{}
	return &this
}

// NewAgreementDetailWithDefaults instantiates a new AgreementDetail object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAgreementDetailWithDefaults() *AgreementDetail {
	this := AgreementDetail{}
	return &this
}

// GetAgreementNo returns the AgreementNo field value if set, zero value otherwise.
func (o *AgreementDetail) GetAgreementNo() string {
	if o == nil || IsNil(o.AgreementNo) {
		var ret string
		return ret
	}
	return *o.AgreementNo
}

// GetAgreementNoOk returns a tuple with the AgreementNo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AgreementDetail) GetAgreementNoOk() (*string, bool) {
	if o == nil || IsNil(o.AgreementNo) {
		return nil, false
	}
	return o.AgreementNo, true
}

// HasAgreementNo returns a boolean if a field has been set.
func (o *AgreementDetail) HasAgreementNo() bool {
	if o != nil && !IsNil(o.AgreementNo) {
		return true
	}

	return false
}

// SetAgreementNo gets a reference to the given string and assigns it to the AgreementNo field.
func (o *AgreementDetail) SetAgreementNo(v string) {
	o.AgreementNo = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *AgreementDetail) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AgreementDetail) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *AgreementDetail) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *AgreementDetail) SetStatus(v string) {
	o.Status = &v
}

func (o AgreementDetail) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AgreementDetail) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AgreementNo) {
		toSerialize["agreement_no"] = o.AgreementNo
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	return toSerialize, nil
}

type NullableAgreementDetail struct {
	value *AgreementDetail
	isSet bool
}

func (v NullableAgreementDetail) Get() *AgreementDetail {
	return v.value
}

func (v *NullableAgreementDetail) Set(val *AgreementDetail) {
	v.value = val
	v.isSet = true
}

func (v NullableAgreementDetail) IsSet() bool {
	return v.isSet
}

func (v *NullableAgreementDetail) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAgreementDetail(val *AgreementDetail) *NullableAgreementDetail {
	return &NullableAgreementDetail{value: val, isSet: true}
}

func (v NullableAgreementDetail) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAgreementDetail) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
