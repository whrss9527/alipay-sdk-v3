/*
支付宝开放平台API

支付宝开放平台v3协议文档

API version: 2024-07-05
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alipay

import (
	"encoding/json"
)

// checks if the SkuModifyInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SkuModifyInfo{}

// SkuModifyInfo struct for SkuModifyInfo
type SkuModifyInfo struct {
	// 库存
	Inventory *int32 `json:"inventory,omitempty"`
	// SKU素材列表（会和SKU已存在素材做差异化比较后做增删改操作）
	MaterialList []MaterialModifyInfo `json:"material_list,omitempty"`
	// 标价，单位分
	OriginalPrice *int32 `json:"original_price,omitempty"`
	// 售价，单位分
	Price *int32 `json:"price,omitempty"`
	// SKU属性列表（覆盖SKU已存在属性）
	PropertyList []ItemSkuPropertyInfo `json:"property_list,omitempty"`
	// SKU ID（传空表示新增对应SKU）
	SkuId *string `json:"sku_id,omitempty"`
}

// NewSkuModifyInfo instantiates a new SkuModifyInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSkuModifyInfo() *SkuModifyInfo {
	this := SkuModifyInfo{}
	return &this
}

// NewSkuModifyInfoWithDefaults instantiates a new SkuModifyInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSkuModifyInfoWithDefaults() *SkuModifyInfo {
	this := SkuModifyInfo{}
	return &this
}

// GetInventory returns the Inventory field value if set, zero value otherwise.
func (o *SkuModifyInfo) GetInventory() int32 {
	if o == nil || IsNil(o.Inventory) {
		var ret int32
		return ret
	}
	return *o.Inventory
}

// GetInventoryOk returns a tuple with the Inventory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkuModifyInfo) GetInventoryOk() (*int32, bool) {
	if o == nil || IsNil(o.Inventory) {
		return nil, false
	}
	return o.Inventory, true
}

// HasInventory returns a boolean if a field has been set.
func (o *SkuModifyInfo) HasInventory() bool {
	if o != nil && !IsNil(o.Inventory) {
		return true
	}

	return false
}

// SetInventory gets a reference to the given int32 and assigns it to the Inventory field.
func (o *SkuModifyInfo) SetInventory(v int32) {
	o.Inventory = &v
}

// GetMaterialList returns the MaterialList field value if set, zero value otherwise.
func (o *SkuModifyInfo) GetMaterialList() []MaterialModifyInfo {
	if o == nil || IsNil(o.MaterialList) {
		var ret []MaterialModifyInfo
		return ret
	}
	return o.MaterialList
}

// GetMaterialListOk returns a tuple with the MaterialList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkuModifyInfo) GetMaterialListOk() ([]MaterialModifyInfo, bool) {
	if o == nil || IsNil(o.MaterialList) {
		return nil, false
	}
	return o.MaterialList, true
}

// HasMaterialList returns a boolean if a field has been set.
func (o *SkuModifyInfo) HasMaterialList() bool {
	if o != nil && !IsNil(o.MaterialList) {
		return true
	}

	return false
}

// SetMaterialList gets a reference to the given []MaterialModifyInfo and assigns it to the MaterialList field.
func (o *SkuModifyInfo) SetMaterialList(v []MaterialModifyInfo) {
	o.MaterialList = v
}

// GetOriginalPrice returns the OriginalPrice field value if set, zero value otherwise.
func (o *SkuModifyInfo) GetOriginalPrice() int32 {
	if o == nil || IsNil(o.OriginalPrice) {
		var ret int32
		return ret
	}
	return *o.OriginalPrice
}

// GetOriginalPriceOk returns a tuple with the OriginalPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkuModifyInfo) GetOriginalPriceOk() (*int32, bool) {
	if o == nil || IsNil(o.OriginalPrice) {
		return nil, false
	}
	return o.OriginalPrice, true
}

// HasOriginalPrice returns a boolean if a field has been set.
func (o *SkuModifyInfo) HasOriginalPrice() bool {
	if o != nil && !IsNil(o.OriginalPrice) {
		return true
	}

	return false
}

// SetOriginalPrice gets a reference to the given int32 and assigns it to the OriginalPrice field.
func (o *SkuModifyInfo) SetOriginalPrice(v int32) {
	o.OriginalPrice = &v
}

// GetPrice returns the Price field value if set, zero value otherwise.
func (o *SkuModifyInfo) GetPrice() int32 {
	if o == nil || IsNil(o.Price) {
		var ret int32
		return ret
	}
	return *o.Price
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkuModifyInfo) GetPriceOk() (*int32, bool) {
	if o == nil || IsNil(o.Price) {
		return nil, false
	}
	return o.Price, true
}

// HasPrice returns a boolean if a field has been set.
func (o *SkuModifyInfo) HasPrice() bool {
	if o != nil && !IsNil(o.Price) {
		return true
	}

	return false
}

// SetPrice gets a reference to the given int32 and assigns it to the Price field.
func (o *SkuModifyInfo) SetPrice(v int32) {
	o.Price = &v
}

// GetPropertyList returns the PropertyList field value if set, zero value otherwise.
func (o *SkuModifyInfo) GetPropertyList() []ItemSkuPropertyInfo {
	if o == nil || IsNil(o.PropertyList) {
		var ret []ItemSkuPropertyInfo
		return ret
	}
	return o.PropertyList
}

// GetPropertyListOk returns a tuple with the PropertyList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkuModifyInfo) GetPropertyListOk() ([]ItemSkuPropertyInfo, bool) {
	if o == nil || IsNil(o.PropertyList) {
		return nil, false
	}
	return o.PropertyList, true
}

// HasPropertyList returns a boolean if a field has been set.
func (o *SkuModifyInfo) HasPropertyList() bool {
	if o != nil && !IsNil(o.PropertyList) {
		return true
	}

	return false
}

// SetPropertyList gets a reference to the given []ItemSkuPropertyInfo and assigns it to the PropertyList field.
func (o *SkuModifyInfo) SetPropertyList(v []ItemSkuPropertyInfo) {
	o.PropertyList = v
}

// GetSkuId returns the SkuId field value if set, zero value otherwise.
func (o *SkuModifyInfo) GetSkuId() string {
	if o == nil || IsNil(o.SkuId) {
		var ret string
		return ret
	}
	return *o.SkuId
}

// GetSkuIdOk returns a tuple with the SkuId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkuModifyInfo) GetSkuIdOk() (*string, bool) {
	if o == nil || IsNil(o.SkuId) {
		return nil, false
	}
	return o.SkuId, true
}

// HasSkuId returns a boolean if a field has been set.
func (o *SkuModifyInfo) HasSkuId() bool {
	if o != nil && !IsNil(o.SkuId) {
		return true
	}

	return false
}

// SetSkuId gets a reference to the given string and assigns it to the SkuId field.
func (o *SkuModifyInfo) SetSkuId(v string) {
	o.SkuId = &v
}

func (o SkuModifyInfo) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SkuModifyInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Inventory) {
		toSerialize["inventory"] = o.Inventory
	}
	if !IsNil(o.MaterialList) {
		toSerialize["material_list"] = o.MaterialList
	}
	if !IsNil(o.OriginalPrice) {
		toSerialize["original_price"] = o.OriginalPrice
	}
	if !IsNil(o.Price) {
		toSerialize["price"] = o.Price
	}
	if !IsNil(o.PropertyList) {
		toSerialize["property_list"] = o.PropertyList
	}
	if !IsNil(o.SkuId) {
		toSerialize["sku_id"] = o.SkuId
	}
	return toSerialize, nil
}

type NullableSkuModifyInfo struct {
	value *SkuModifyInfo
	isSet bool
}

func (v NullableSkuModifyInfo) Get() *SkuModifyInfo {
	return v.value
}

func (v *NullableSkuModifyInfo) Set(val *SkuModifyInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableSkuModifyInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableSkuModifyInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSkuModifyInfo(val *SkuModifyInfo) *NullableSkuModifyInfo {
	return &NullableSkuModifyInfo{value: val, isSet: true}
}

func (v NullableSkuModifyInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSkuModifyInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
