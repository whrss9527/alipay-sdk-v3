/*
支付宝开放平台API

支付宝开放平台v3协议文档

API version: 2024-07-05
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ExpenseCtrlConsumeInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExpenseCtrlConsumeInfo{}

// ExpenseCtrlConsumeInfo struct for ExpenseCtrlConsumeInfo
type ExpenseCtrlConsumeInfo struct {
	ExpenseConsumeInfo *ExpenseConsumeInfo `json:"expense_consume_info,omitempty"`
	// 关联凑票账单列表（开票限额，多次消费后合并开票）
	RelatedEnterpriseConsumeList []ExpenseConsumeInfo `json:"related_enterprise_consume_list,omitempty"`
	// 关联发票凭证对象
	RelatedEnterpriseInvoiceList []ExpenseInvoiceInfo `json:"related_enterprise_invoice_list,omitempty"`
}

// NewExpenseCtrlConsumeInfo instantiates a new ExpenseCtrlConsumeInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExpenseCtrlConsumeInfo() *ExpenseCtrlConsumeInfo {
	this := ExpenseCtrlConsumeInfo{}
	return &this
}

// NewExpenseCtrlConsumeInfoWithDefaults instantiates a new ExpenseCtrlConsumeInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExpenseCtrlConsumeInfoWithDefaults() *ExpenseCtrlConsumeInfo {
	this := ExpenseCtrlConsumeInfo{}
	return &this
}

// GetExpenseConsumeInfo returns the ExpenseConsumeInfo field value if set, zero value otherwise.
func (o *ExpenseCtrlConsumeInfo) GetExpenseConsumeInfo() ExpenseConsumeInfo {
	if o == nil || IsNil(o.ExpenseConsumeInfo) {
		var ret ExpenseConsumeInfo
		return ret
	}
	return *o.ExpenseConsumeInfo
}

// GetExpenseConsumeInfoOk returns a tuple with the ExpenseConsumeInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExpenseCtrlConsumeInfo) GetExpenseConsumeInfoOk() (*ExpenseConsumeInfo, bool) {
	if o == nil || IsNil(o.ExpenseConsumeInfo) {
		return nil, false
	}
	return o.ExpenseConsumeInfo, true
}

// HasExpenseConsumeInfo returns a boolean if a field has been set.
func (o *ExpenseCtrlConsumeInfo) HasExpenseConsumeInfo() bool {
	if o != nil && !IsNil(o.ExpenseConsumeInfo) {
		return true
	}

	return false
}

// SetExpenseConsumeInfo gets a reference to the given ExpenseConsumeInfo and assigns it to the ExpenseConsumeInfo field.
func (o *ExpenseCtrlConsumeInfo) SetExpenseConsumeInfo(v ExpenseConsumeInfo) {
	o.ExpenseConsumeInfo = &v
}

// GetRelatedEnterpriseConsumeList returns the RelatedEnterpriseConsumeList field value if set, zero value otherwise.
func (o *ExpenseCtrlConsumeInfo) GetRelatedEnterpriseConsumeList() []ExpenseConsumeInfo {
	if o == nil || IsNil(o.RelatedEnterpriseConsumeList) {
		var ret []ExpenseConsumeInfo
		return ret
	}
	return o.RelatedEnterpriseConsumeList
}

// GetRelatedEnterpriseConsumeListOk returns a tuple with the RelatedEnterpriseConsumeList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExpenseCtrlConsumeInfo) GetRelatedEnterpriseConsumeListOk() ([]ExpenseConsumeInfo, bool) {
	if o == nil || IsNil(o.RelatedEnterpriseConsumeList) {
		return nil, false
	}
	return o.RelatedEnterpriseConsumeList, true
}

// HasRelatedEnterpriseConsumeList returns a boolean if a field has been set.
func (o *ExpenseCtrlConsumeInfo) HasRelatedEnterpriseConsumeList() bool {
	if o != nil && !IsNil(o.RelatedEnterpriseConsumeList) {
		return true
	}

	return false
}

// SetRelatedEnterpriseConsumeList gets a reference to the given []ExpenseConsumeInfo and assigns it to the RelatedEnterpriseConsumeList field.
func (o *ExpenseCtrlConsumeInfo) SetRelatedEnterpriseConsumeList(v []ExpenseConsumeInfo) {
	o.RelatedEnterpriseConsumeList = v
}

// GetRelatedEnterpriseInvoiceList returns the RelatedEnterpriseInvoiceList field value if set, zero value otherwise.
func (o *ExpenseCtrlConsumeInfo) GetRelatedEnterpriseInvoiceList() []ExpenseInvoiceInfo {
	if o == nil || IsNil(o.RelatedEnterpriseInvoiceList) {
		var ret []ExpenseInvoiceInfo
		return ret
	}
	return o.RelatedEnterpriseInvoiceList
}

// GetRelatedEnterpriseInvoiceListOk returns a tuple with the RelatedEnterpriseInvoiceList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExpenseCtrlConsumeInfo) GetRelatedEnterpriseInvoiceListOk() ([]ExpenseInvoiceInfo, bool) {
	if o == nil || IsNil(o.RelatedEnterpriseInvoiceList) {
		return nil, false
	}
	return o.RelatedEnterpriseInvoiceList, true
}

// HasRelatedEnterpriseInvoiceList returns a boolean if a field has been set.
func (o *ExpenseCtrlConsumeInfo) HasRelatedEnterpriseInvoiceList() bool {
	if o != nil && !IsNil(o.RelatedEnterpriseInvoiceList) {
		return true
	}

	return false
}

// SetRelatedEnterpriseInvoiceList gets a reference to the given []ExpenseInvoiceInfo and assigns it to the RelatedEnterpriseInvoiceList field.
func (o *ExpenseCtrlConsumeInfo) SetRelatedEnterpriseInvoiceList(v []ExpenseInvoiceInfo) {
	o.RelatedEnterpriseInvoiceList = v
}

func (o ExpenseCtrlConsumeInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExpenseCtrlConsumeInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ExpenseConsumeInfo) {
		toSerialize["expense_consume_info"] = o.ExpenseConsumeInfo
	}
	if !IsNil(o.RelatedEnterpriseConsumeList) {
		toSerialize["related_enterprise_consume_list"] = o.RelatedEnterpriseConsumeList
	}
	if !IsNil(o.RelatedEnterpriseInvoiceList) {
		toSerialize["related_enterprise_invoice_list"] = o.RelatedEnterpriseInvoiceList
	}
	return toSerialize, nil
}

type NullableExpenseCtrlConsumeInfo struct {
	value *ExpenseCtrlConsumeInfo
	isSet bool
}

func (v NullableExpenseCtrlConsumeInfo) Get() *ExpenseCtrlConsumeInfo {
	return v.value
}

func (v *NullableExpenseCtrlConsumeInfo) Set(val *ExpenseCtrlConsumeInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableExpenseCtrlConsumeInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableExpenseCtrlConsumeInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExpenseCtrlConsumeInfo(val *ExpenseCtrlConsumeInfo) *NullableExpenseCtrlConsumeInfo {
	return &NullableExpenseCtrlConsumeInfo{value: val, isSet: true}
}

func (v NullableExpenseCtrlConsumeInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExpenseCtrlConsumeInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


