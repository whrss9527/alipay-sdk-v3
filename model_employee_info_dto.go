/*
支付宝开放平台API

支付宝开放平台v3协议文档

API version: 2024-07-05
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alipay

import (
	"encoding/json"
)

// checks if the EmployeeInfoDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EmployeeInfoDTO{}

// EmployeeInfoDTO struct for EmployeeInfoDTO
type EmployeeInfoDTO struct {
	// 是否激活
	Activate *string `json:"activate,omitempty"`
	// 员工所属部门列表
	DepartmentList []EmployeeDepartmentDTO `json:"department_list,omitempty"`
	// 员工邮箱
	Email *string `json:"email,omitempty"`
	// 证件号
	EmployeeCertNo *string `json:"employee_cert_no,omitempty"`
	// 证件类型
	EmployeeCertType *string `json:"employee_cert_type,omitempty"`
	// 员工id
	EmployeeId *string `json:"employee_id,omitempty"`
	// 员工姓名
	EmployeeName *string `json:"employee_name,omitempty"`
	// 员工编号/工号
	EmployeeNo *string `json:"employee_no,omitempty"`
	// 加密证件号（证件号转大写后使用SHA256加密），搭配证件号使用
	EncryptCertNo *string `json:"encrypt_cert_no,omitempty"`
	// 加密手机号（使用SHA256进行加密）
	EncryptMobile *string `json:"encrypt_mobile,omitempty"`
	// 创建时间
	GmtCreate *string `json:"gmt_create,omitempty"`
	// 变更时间
	GmtModified *string `json:"gmt_modified,omitempty"`
	// 员工是否人脸在库
	IotFaceStatus *string `json:"iot_face_status,omitempty"`
	// IOT开通刷脸支持唯一操作流水号，此处透出用于外部服务商通过该unique_id便捷调用IOT侧接口
	IotUniqueId *string `json:"iot_unique_id,omitempty"`
	// 员工在企业人脸库的人脸唯一标识
	IotVid *string `json:"iot_vid,omitempty"`
	// 手机号码
	Mobile *string `json:"mobile,omitempty"`
	// 用户ID（绑定支付宝账号的uid）
	OpenId *string `json:"open_id,omitempty"`
	// 个性化信息 <a href='https://opendocs.alipay.com/pre-open/0ceh47?pathHash=14fac87c'>详见文档</a>
	Profiles *string `json:"profiles,omitempty"`
	// 角色列表
	RoleList []string `json:"role_list,omitempty"`
	// 用户ID（绑定支付宝账号的uid）
	UserId *string `json:"user_id,omitempty"`
}

// NewEmployeeInfoDTO instantiates a new EmployeeInfoDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEmployeeInfoDTO() *EmployeeInfoDTO {
	this := EmployeeInfoDTO{}
	return &this
}

// NewEmployeeInfoDTOWithDefaults instantiates a new EmployeeInfoDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEmployeeInfoDTOWithDefaults() *EmployeeInfoDTO {
	this := EmployeeInfoDTO{}
	return &this
}

// GetActivate returns the Activate field value if set, zero value otherwise.
func (o *EmployeeInfoDTO) GetActivate() string {
	if o == nil || IsNil(o.Activate) {
		var ret string
		return ret
	}
	return *o.Activate
}

// GetActivateOk returns a tuple with the Activate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmployeeInfoDTO) GetActivateOk() (*string, bool) {
	if o == nil || IsNil(o.Activate) {
		return nil, false
	}
	return o.Activate, true
}

// HasActivate returns a boolean if a field has been set.
func (o *EmployeeInfoDTO) HasActivate() bool {
	if o != nil && !IsNil(o.Activate) {
		return true
	}

	return false
}

// SetActivate gets a reference to the given string and assigns it to the Activate field.
func (o *EmployeeInfoDTO) SetActivate(v string) {
	o.Activate = &v
}

// GetDepartmentList returns the DepartmentList field value if set, zero value otherwise.
func (o *EmployeeInfoDTO) GetDepartmentList() []EmployeeDepartmentDTO {
	if o == nil || IsNil(o.DepartmentList) {
		var ret []EmployeeDepartmentDTO
		return ret
	}
	return o.DepartmentList
}

// GetDepartmentListOk returns a tuple with the DepartmentList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmployeeInfoDTO) GetDepartmentListOk() ([]EmployeeDepartmentDTO, bool) {
	if o == nil || IsNil(o.DepartmentList) {
		return nil, false
	}
	return o.DepartmentList, true
}

// HasDepartmentList returns a boolean if a field has been set.
func (o *EmployeeInfoDTO) HasDepartmentList() bool {
	if o != nil && !IsNil(o.DepartmentList) {
		return true
	}

	return false
}

// SetDepartmentList gets a reference to the given []EmployeeDepartmentDTO and assigns it to the DepartmentList field.
func (o *EmployeeInfoDTO) SetDepartmentList(v []EmployeeDepartmentDTO) {
	o.DepartmentList = v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *EmployeeInfoDTO) GetEmail() string {
	if o == nil || IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmployeeInfoDTO) GetEmailOk() (*string, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *EmployeeInfoDTO) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *EmployeeInfoDTO) SetEmail(v string) {
	o.Email = &v
}

// GetEmployeeCertNo returns the EmployeeCertNo field value if set, zero value otherwise.
func (o *EmployeeInfoDTO) GetEmployeeCertNo() string {
	if o == nil || IsNil(o.EmployeeCertNo) {
		var ret string
		return ret
	}
	return *o.EmployeeCertNo
}

// GetEmployeeCertNoOk returns a tuple with the EmployeeCertNo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmployeeInfoDTO) GetEmployeeCertNoOk() (*string, bool) {
	if o == nil || IsNil(o.EmployeeCertNo) {
		return nil, false
	}
	return o.EmployeeCertNo, true
}

// HasEmployeeCertNo returns a boolean if a field has been set.
func (o *EmployeeInfoDTO) HasEmployeeCertNo() bool {
	if o != nil && !IsNil(o.EmployeeCertNo) {
		return true
	}

	return false
}

// SetEmployeeCertNo gets a reference to the given string and assigns it to the EmployeeCertNo field.
func (o *EmployeeInfoDTO) SetEmployeeCertNo(v string) {
	o.EmployeeCertNo = &v
}

// GetEmployeeCertType returns the EmployeeCertType field value if set, zero value otherwise.
func (o *EmployeeInfoDTO) GetEmployeeCertType() string {
	if o == nil || IsNil(o.EmployeeCertType) {
		var ret string
		return ret
	}
	return *o.EmployeeCertType
}

// GetEmployeeCertTypeOk returns a tuple with the EmployeeCertType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmployeeInfoDTO) GetEmployeeCertTypeOk() (*string, bool) {
	if o == nil || IsNil(o.EmployeeCertType) {
		return nil, false
	}
	return o.EmployeeCertType, true
}

// HasEmployeeCertType returns a boolean if a field has been set.
func (o *EmployeeInfoDTO) HasEmployeeCertType() bool {
	if o != nil && !IsNil(o.EmployeeCertType) {
		return true
	}

	return false
}

// SetEmployeeCertType gets a reference to the given string and assigns it to the EmployeeCertType field.
func (o *EmployeeInfoDTO) SetEmployeeCertType(v string) {
	o.EmployeeCertType = &v
}

// GetEmployeeId returns the EmployeeId field value if set, zero value otherwise.
func (o *EmployeeInfoDTO) GetEmployeeId() string {
	if o == nil || IsNil(o.EmployeeId) {
		var ret string
		return ret
	}
	return *o.EmployeeId
}

// GetEmployeeIdOk returns a tuple with the EmployeeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmployeeInfoDTO) GetEmployeeIdOk() (*string, bool) {
	if o == nil || IsNil(o.EmployeeId) {
		return nil, false
	}
	return o.EmployeeId, true
}

// HasEmployeeId returns a boolean if a field has been set.
func (o *EmployeeInfoDTO) HasEmployeeId() bool {
	if o != nil && !IsNil(o.EmployeeId) {
		return true
	}

	return false
}

// SetEmployeeId gets a reference to the given string and assigns it to the EmployeeId field.
func (o *EmployeeInfoDTO) SetEmployeeId(v string) {
	o.EmployeeId = &v
}

// GetEmployeeName returns the EmployeeName field value if set, zero value otherwise.
func (o *EmployeeInfoDTO) GetEmployeeName() string {
	if o == nil || IsNil(o.EmployeeName) {
		var ret string
		return ret
	}
	return *o.EmployeeName
}

// GetEmployeeNameOk returns a tuple with the EmployeeName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmployeeInfoDTO) GetEmployeeNameOk() (*string, bool) {
	if o == nil || IsNil(o.EmployeeName) {
		return nil, false
	}
	return o.EmployeeName, true
}

// HasEmployeeName returns a boolean if a field has been set.
func (o *EmployeeInfoDTO) HasEmployeeName() bool {
	if o != nil && !IsNil(o.EmployeeName) {
		return true
	}

	return false
}

// SetEmployeeName gets a reference to the given string and assigns it to the EmployeeName field.
func (o *EmployeeInfoDTO) SetEmployeeName(v string) {
	o.EmployeeName = &v
}

// GetEmployeeNo returns the EmployeeNo field value if set, zero value otherwise.
func (o *EmployeeInfoDTO) GetEmployeeNo() string {
	if o == nil || IsNil(o.EmployeeNo) {
		var ret string
		return ret
	}
	return *o.EmployeeNo
}

// GetEmployeeNoOk returns a tuple with the EmployeeNo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmployeeInfoDTO) GetEmployeeNoOk() (*string, bool) {
	if o == nil || IsNil(o.EmployeeNo) {
		return nil, false
	}
	return o.EmployeeNo, true
}

// HasEmployeeNo returns a boolean if a field has been set.
func (o *EmployeeInfoDTO) HasEmployeeNo() bool {
	if o != nil && !IsNil(o.EmployeeNo) {
		return true
	}

	return false
}

// SetEmployeeNo gets a reference to the given string and assigns it to the EmployeeNo field.
func (o *EmployeeInfoDTO) SetEmployeeNo(v string) {
	o.EmployeeNo = &v
}

// GetEncryptCertNo returns the EncryptCertNo field value if set, zero value otherwise.
func (o *EmployeeInfoDTO) GetEncryptCertNo() string {
	if o == nil || IsNil(o.EncryptCertNo) {
		var ret string
		return ret
	}
	return *o.EncryptCertNo
}

// GetEncryptCertNoOk returns a tuple with the EncryptCertNo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmployeeInfoDTO) GetEncryptCertNoOk() (*string, bool) {
	if o == nil || IsNil(o.EncryptCertNo) {
		return nil, false
	}
	return o.EncryptCertNo, true
}

// HasEncryptCertNo returns a boolean if a field has been set.
func (o *EmployeeInfoDTO) HasEncryptCertNo() bool {
	if o != nil && !IsNil(o.EncryptCertNo) {
		return true
	}

	return false
}

// SetEncryptCertNo gets a reference to the given string and assigns it to the EncryptCertNo field.
func (o *EmployeeInfoDTO) SetEncryptCertNo(v string) {
	o.EncryptCertNo = &v
}

// GetEncryptMobile returns the EncryptMobile field value if set, zero value otherwise.
func (o *EmployeeInfoDTO) GetEncryptMobile() string {
	if o == nil || IsNil(o.EncryptMobile) {
		var ret string
		return ret
	}
	return *o.EncryptMobile
}

// GetEncryptMobileOk returns a tuple with the EncryptMobile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmployeeInfoDTO) GetEncryptMobileOk() (*string, bool) {
	if o == nil || IsNil(o.EncryptMobile) {
		return nil, false
	}
	return o.EncryptMobile, true
}

// HasEncryptMobile returns a boolean if a field has been set.
func (o *EmployeeInfoDTO) HasEncryptMobile() bool {
	if o != nil && !IsNil(o.EncryptMobile) {
		return true
	}

	return false
}

// SetEncryptMobile gets a reference to the given string and assigns it to the EncryptMobile field.
func (o *EmployeeInfoDTO) SetEncryptMobile(v string) {
	o.EncryptMobile = &v
}

// GetGmtCreate returns the GmtCreate field value if set, zero value otherwise.
func (o *EmployeeInfoDTO) GetGmtCreate() string {
	if o == nil || IsNil(o.GmtCreate) {
		var ret string
		return ret
	}
	return *o.GmtCreate
}

// GetGmtCreateOk returns a tuple with the GmtCreate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmployeeInfoDTO) GetGmtCreateOk() (*string, bool) {
	if o == nil || IsNil(o.GmtCreate) {
		return nil, false
	}
	return o.GmtCreate, true
}

// HasGmtCreate returns a boolean if a field has been set.
func (o *EmployeeInfoDTO) HasGmtCreate() bool {
	if o != nil && !IsNil(o.GmtCreate) {
		return true
	}

	return false
}

// SetGmtCreate gets a reference to the given string and assigns it to the GmtCreate field.
func (o *EmployeeInfoDTO) SetGmtCreate(v string) {
	o.GmtCreate = &v
}

// GetGmtModified returns the GmtModified field value if set, zero value otherwise.
func (o *EmployeeInfoDTO) GetGmtModified() string {
	if o == nil || IsNil(o.GmtModified) {
		var ret string
		return ret
	}
	return *o.GmtModified
}

// GetGmtModifiedOk returns a tuple with the GmtModified field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmployeeInfoDTO) GetGmtModifiedOk() (*string, bool) {
	if o == nil || IsNil(o.GmtModified) {
		return nil, false
	}
	return o.GmtModified, true
}

// HasGmtModified returns a boolean if a field has been set.
func (o *EmployeeInfoDTO) HasGmtModified() bool {
	if o != nil && !IsNil(o.GmtModified) {
		return true
	}

	return false
}

// SetGmtModified gets a reference to the given string and assigns it to the GmtModified field.
func (o *EmployeeInfoDTO) SetGmtModified(v string) {
	o.GmtModified = &v
}

// GetIotFaceStatus returns the IotFaceStatus field value if set, zero value otherwise.
func (o *EmployeeInfoDTO) GetIotFaceStatus() string {
	if o == nil || IsNil(o.IotFaceStatus) {
		var ret string
		return ret
	}
	return *o.IotFaceStatus
}

// GetIotFaceStatusOk returns a tuple with the IotFaceStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmployeeInfoDTO) GetIotFaceStatusOk() (*string, bool) {
	if o == nil || IsNil(o.IotFaceStatus) {
		return nil, false
	}
	return o.IotFaceStatus, true
}

// HasIotFaceStatus returns a boolean if a field has been set.
func (o *EmployeeInfoDTO) HasIotFaceStatus() bool {
	if o != nil && !IsNil(o.IotFaceStatus) {
		return true
	}

	return false
}

// SetIotFaceStatus gets a reference to the given string and assigns it to the IotFaceStatus field.
func (o *EmployeeInfoDTO) SetIotFaceStatus(v string) {
	o.IotFaceStatus = &v
}

// GetIotUniqueId returns the IotUniqueId field value if set, zero value otherwise.
func (o *EmployeeInfoDTO) GetIotUniqueId() string {
	if o == nil || IsNil(o.IotUniqueId) {
		var ret string
		return ret
	}
	return *o.IotUniqueId
}

// GetIotUniqueIdOk returns a tuple with the IotUniqueId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmployeeInfoDTO) GetIotUniqueIdOk() (*string, bool) {
	if o == nil || IsNil(o.IotUniqueId) {
		return nil, false
	}
	return o.IotUniqueId, true
}

// HasIotUniqueId returns a boolean if a field has been set.
func (o *EmployeeInfoDTO) HasIotUniqueId() bool {
	if o != nil && !IsNil(o.IotUniqueId) {
		return true
	}

	return false
}

// SetIotUniqueId gets a reference to the given string and assigns it to the IotUniqueId field.
func (o *EmployeeInfoDTO) SetIotUniqueId(v string) {
	o.IotUniqueId = &v
}

// GetIotVid returns the IotVid field value if set, zero value otherwise.
func (o *EmployeeInfoDTO) GetIotVid() string {
	if o == nil || IsNil(o.IotVid) {
		var ret string
		return ret
	}
	return *o.IotVid
}

// GetIotVidOk returns a tuple with the IotVid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmployeeInfoDTO) GetIotVidOk() (*string, bool) {
	if o == nil || IsNil(o.IotVid) {
		return nil, false
	}
	return o.IotVid, true
}

// HasIotVid returns a boolean if a field has been set.
func (o *EmployeeInfoDTO) HasIotVid() bool {
	if o != nil && !IsNil(o.IotVid) {
		return true
	}

	return false
}

// SetIotVid gets a reference to the given string and assigns it to the IotVid field.
func (o *EmployeeInfoDTO) SetIotVid(v string) {
	o.IotVid = &v
}

// GetMobile returns the Mobile field value if set, zero value otherwise.
func (o *EmployeeInfoDTO) GetMobile() string {
	if o == nil || IsNil(o.Mobile) {
		var ret string
		return ret
	}
	return *o.Mobile
}

// GetMobileOk returns a tuple with the Mobile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmployeeInfoDTO) GetMobileOk() (*string, bool) {
	if o == nil || IsNil(o.Mobile) {
		return nil, false
	}
	return o.Mobile, true
}

// HasMobile returns a boolean if a field has been set.
func (o *EmployeeInfoDTO) HasMobile() bool {
	if o != nil && !IsNil(o.Mobile) {
		return true
	}

	return false
}

// SetMobile gets a reference to the given string and assigns it to the Mobile field.
func (o *EmployeeInfoDTO) SetMobile(v string) {
	o.Mobile = &v
}

// GetOpenId returns the OpenId field value if set, zero value otherwise.
func (o *EmployeeInfoDTO) GetOpenId() string {
	if o == nil || IsNil(o.OpenId) {
		var ret string
		return ret
	}
	return *o.OpenId
}

// GetOpenIdOk returns a tuple with the OpenId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmployeeInfoDTO) GetOpenIdOk() (*string, bool) {
	if o == nil || IsNil(o.OpenId) {
		return nil, false
	}
	return o.OpenId, true
}

// HasOpenId returns a boolean if a field has been set.
func (o *EmployeeInfoDTO) HasOpenId() bool {
	if o != nil && !IsNil(o.OpenId) {
		return true
	}

	return false
}

// SetOpenId gets a reference to the given string and assigns it to the OpenId field.
func (o *EmployeeInfoDTO) SetOpenId(v string) {
	o.OpenId = &v
}

// GetProfiles returns the Profiles field value if set, zero value otherwise.
func (o *EmployeeInfoDTO) GetProfiles() string {
	if o == nil || IsNil(o.Profiles) {
		var ret string
		return ret
	}
	return *o.Profiles
}

// GetProfilesOk returns a tuple with the Profiles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmployeeInfoDTO) GetProfilesOk() (*string, bool) {
	if o == nil || IsNil(o.Profiles) {
		return nil, false
	}
	return o.Profiles, true
}

// HasProfiles returns a boolean if a field has been set.
func (o *EmployeeInfoDTO) HasProfiles() bool {
	if o != nil && !IsNil(o.Profiles) {
		return true
	}

	return false
}

// SetProfiles gets a reference to the given string and assigns it to the Profiles field.
func (o *EmployeeInfoDTO) SetProfiles(v string) {
	o.Profiles = &v
}

// GetRoleList returns the RoleList field value if set, zero value otherwise.
func (o *EmployeeInfoDTO) GetRoleList() []string {
	if o == nil || IsNil(o.RoleList) {
		var ret []string
		return ret
	}
	return o.RoleList
}

// GetRoleListOk returns a tuple with the RoleList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmployeeInfoDTO) GetRoleListOk() ([]string, bool) {
	if o == nil || IsNil(o.RoleList) {
		return nil, false
	}
	return o.RoleList, true
}

// HasRoleList returns a boolean if a field has been set.
func (o *EmployeeInfoDTO) HasRoleList() bool {
	if o != nil && !IsNil(o.RoleList) {
		return true
	}

	return false
}

// SetRoleList gets a reference to the given []string and assigns it to the RoleList field.
func (o *EmployeeInfoDTO) SetRoleList(v []string) {
	o.RoleList = v
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *EmployeeInfoDTO) GetUserId() string {
	if o == nil || IsNil(o.UserId) {
		var ret string
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmployeeInfoDTO) GetUserIdOk() (*string, bool) {
	if o == nil || IsNil(o.UserId) {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *EmployeeInfoDTO) HasUserId() bool {
	if o != nil && !IsNil(o.UserId) {
		return true
	}

	return false
}

// SetUserId gets a reference to the given string and assigns it to the UserId field.
func (o *EmployeeInfoDTO) SetUserId(v string) {
	o.UserId = &v
}

func (o EmployeeInfoDTO) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EmployeeInfoDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Activate) {
		toSerialize["activate"] = o.Activate
	}
	if !IsNil(o.DepartmentList) {
		toSerialize["department_list"] = o.DepartmentList
	}
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	if !IsNil(o.EmployeeCertNo) {
		toSerialize["employee_cert_no"] = o.EmployeeCertNo
	}
	if !IsNil(o.EmployeeCertType) {
		toSerialize["employee_cert_type"] = o.EmployeeCertType
	}
	if !IsNil(o.EmployeeId) {
		toSerialize["employee_id"] = o.EmployeeId
	}
	if !IsNil(o.EmployeeName) {
		toSerialize["employee_name"] = o.EmployeeName
	}
	if !IsNil(o.EmployeeNo) {
		toSerialize["employee_no"] = o.EmployeeNo
	}
	if !IsNil(o.EncryptCertNo) {
		toSerialize["encrypt_cert_no"] = o.EncryptCertNo
	}
	if !IsNil(o.EncryptMobile) {
		toSerialize["encrypt_mobile"] = o.EncryptMobile
	}
	if !IsNil(o.GmtCreate) {
		toSerialize["gmt_create"] = o.GmtCreate
	}
	if !IsNil(o.GmtModified) {
		toSerialize["gmt_modified"] = o.GmtModified
	}
	if !IsNil(o.IotFaceStatus) {
		toSerialize["iot_face_status"] = o.IotFaceStatus
	}
	if !IsNil(o.IotUniqueId) {
		toSerialize["iot_unique_id"] = o.IotUniqueId
	}
	if !IsNil(o.IotVid) {
		toSerialize["iot_vid"] = o.IotVid
	}
	if !IsNil(o.Mobile) {
		toSerialize["mobile"] = o.Mobile
	}
	if !IsNil(o.OpenId) {
		toSerialize["open_id"] = o.OpenId
	}
	if !IsNil(o.Profiles) {
		toSerialize["profiles"] = o.Profiles
	}
	if !IsNil(o.RoleList) {
		toSerialize["role_list"] = o.RoleList
	}
	if !IsNil(o.UserId) {
		toSerialize["user_id"] = o.UserId
	}
	return toSerialize, nil
}

type NullableEmployeeInfoDTO struct {
	value *EmployeeInfoDTO
	isSet bool
}

func (v NullableEmployeeInfoDTO) Get() *EmployeeInfoDTO {
	return v.value
}

func (v *NullableEmployeeInfoDTO) Set(val *EmployeeInfoDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableEmployeeInfoDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableEmployeeInfoDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmployeeInfoDTO(val *EmployeeInfoDTO) *NullableEmployeeInfoDTO {
	return &NullableEmployeeInfoDTO{value: val, isSet: true}
}

func (v NullableEmployeeInfoDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmployeeInfoDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
