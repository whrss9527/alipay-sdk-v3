/*
支付宝开放平台API

支付宝开放平台v3协议文档

API version: 2024-07-05
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alipay

import (
	"bytes"
	"context"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"os"
	"strconv"
	"time"
)

// AlipayOpenMiniVersionAuditAPIService AlipayOpenMiniVersionAuditAPI service
type AlipayOpenMiniVersionAuditAPIService service

type ApiAlipayOpenMiniVersionAuditApplyRequest struct {
	ctx                     context.Context
	ApiService              *AlipayOpenMiniVersionAuditAPIService
	appLogo                 *os.File
	data                    *AlipayOpenMiniVersionAuditApplyModel
	fifthLicensePic         *os.File
	fifthScreenShot         *os.File
	firstLicensePic         *os.File
	firstScreenShot         *os.File
	firstSpecialLicensePic  *os.File
	fourthLicensePic        *os.File
	fourthScreenShot        *os.File
	outDoorPic              *os.File
	secondLicensePic        *os.File
	secondScreenShot        *os.File
	secondSpecialLicensePic *os.File
	testFileName            *os.File
	thirdLicensePic         *os.File
	thirdScreenShot         *os.File
	thirdSpecialLicensePic  *os.File
}

func (r ApiAlipayOpenMiniVersionAuditApplyRequest) AppLogo(appLogo *os.File) ApiAlipayOpenMiniVersionAuditApplyRequest {
	r.appLogo = appLogo
	return r
}

func (r ApiAlipayOpenMiniVersionAuditApplyRequest) Data(data AlipayOpenMiniVersionAuditApplyModel) ApiAlipayOpenMiniVersionAuditApplyRequest {
	r.data = &data
	return r
}

func (r ApiAlipayOpenMiniVersionAuditApplyRequest) FifthLicensePic(fifthLicensePic *os.File) ApiAlipayOpenMiniVersionAuditApplyRequest {
	r.fifthLicensePic = fifthLicensePic
	return r
}

func (r ApiAlipayOpenMiniVersionAuditApplyRequest) FifthScreenShot(fifthScreenShot *os.File) ApiAlipayOpenMiniVersionAuditApplyRequest {
	r.fifthScreenShot = fifthScreenShot
	return r
}

func (r ApiAlipayOpenMiniVersionAuditApplyRequest) FirstLicensePic(firstLicensePic *os.File) ApiAlipayOpenMiniVersionAuditApplyRequest {
	r.firstLicensePic = firstLicensePic
	return r
}

func (r ApiAlipayOpenMiniVersionAuditApplyRequest) FirstScreenShot(firstScreenShot *os.File) ApiAlipayOpenMiniVersionAuditApplyRequest {
	r.firstScreenShot = firstScreenShot
	return r
}

func (r ApiAlipayOpenMiniVersionAuditApplyRequest) FirstSpecialLicensePic(firstSpecialLicensePic *os.File) ApiAlipayOpenMiniVersionAuditApplyRequest {
	r.firstSpecialLicensePic = firstSpecialLicensePic
	return r
}

func (r ApiAlipayOpenMiniVersionAuditApplyRequest) FourthLicensePic(fourthLicensePic *os.File) ApiAlipayOpenMiniVersionAuditApplyRequest {
	r.fourthLicensePic = fourthLicensePic
	return r
}

func (r ApiAlipayOpenMiniVersionAuditApplyRequest) FourthScreenShot(fourthScreenShot *os.File) ApiAlipayOpenMiniVersionAuditApplyRequest {
	r.fourthScreenShot = fourthScreenShot
	return r
}

func (r ApiAlipayOpenMiniVersionAuditApplyRequest) OutDoorPic(outDoorPic *os.File) ApiAlipayOpenMiniVersionAuditApplyRequest {
	r.outDoorPic = outDoorPic
	return r
}

func (r ApiAlipayOpenMiniVersionAuditApplyRequest) SecondLicensePic(secondLicensePic *os.File) ApiAlipayOpenMiniVersionAuditApplyRequest {
	r.secondLicensePic = secondLicensePic
	return r
}

func (r ApiAlipayOpenMiniVersionAuditApplyRequest) SecondScreenShot(secondScreenShot *os.File) ApiAlipayOpenMiniVersionAuditApplyRequest {
	r.secondScreenShot = secondScreenShot
	return r
}

func (r ApiAlipayOpenMiniVersionAuditApplyRequest) SecondSpecialLicensePic(secondSpecialLicensePic *os.File) ApiAlipayOpenMiniVersionAuditApplyRequest {
	r.secondSpecialLicensePic = secondSpecialLicensePic
	return r
}

func (r ApiAlipayOpenMiniVersionAuditApplyRequest) TestFileName(testFileName *os.File) ApiAlipayOpenMiniVersionAuditApplyRequest {
	r.testFileName = testFileName
	return r
}

func (r ApiAlipayOpenMiniVersionAuditApplyRequest) ThirdLicensePic(thirdLicensePic *os.File) ApiAlipayOpenMiniVersionAuditApplyRequest {
	r.thirdLicensePic = thirdLicensePic
	return r
}

func (r ApiAlipayOpenMiniVersionAuditApplyRequest) ThirdScreenShot(thirdScreenShot *os.File) ApiAlipayOpenMiniVersionAuditApplyRequest {
	r.thirdScreenShot = thirdScreenShot
	return r
}

func (r ApiAlipayOpenMiniVersionAuditApplyRequest) ThirdSpecialLicensePic(thirdSpecialLicensePic *os.File) ApiAlipayOpenMiniVersionAuditApplyRequest {
	r.thirdSpecialLicensePic = thirdSpecialLicensePic
	return r
}

func (r ApiAlipayOpenMiniVersionAuditApplyRequest) Execute() (*AlipayOpenMiniVersionAuditApplyResponseModel, *http.Response, error) {
	return r.ApiService.AlipayOpenMiniVersionAuditApplyExecute(r)
}

/*
AlipayOpenMiniVersionAuditApply 小程序提交审核

小程序提交审核。
1、本接口中关于小程序基础信息的一些字段例如小程序名称、小程序logo、客服电话等，这些信息如果你前期已经设置过，平台将会在你本次调用接口的时候，将上一次设置的信息自动填入，所以允许你本次调用时不传入。如果你前期还未设置过这些信息，则本次调用是需要必传的。具体的字段要求详见每个字段的描述。你可以用<a href="https://opendocs.alipay.com/apis/05ujoy" target="_blank">alipay.open.mini.version.detail.query</a>接口查询小程序信息之前是否已经设置。
2、小程序版本信息例如小程序版本号、小程序版本描述，这些信息是需要你每次调用接口必传的。
3、本接口涉及到“审核流程拆分”、“审核加急”、“自动上架”的功能，具体功能详见接口字段audit_rule、speed_up、auto_online描述。
4、普通模板构建的商家小程序限 5个小程序/模板/日，可以升级为标准版，标准版没有数量限制。

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiAlipayOpenMiniVersionAuditApplyRequest
*/
func (r *AlipayOpenMiniVersionAuditAPIService) AlipayOpenMiniVersionAuditApply(ctx context.Context) ApiAlipayOpenMiniVersionAuditApplyRequest {
	return ApiAlipayOpenMiniVersionAuditApplyRequest{
		ApiService: r,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return AlipayOpenMiniVersionAuditApplyResponseModel
func (a *AlipayOpenMiniVersionAuditAPIService) AlipayOpenMiniVersionAuditApplyExecute(r ApiAlipayOpenMiniVersionAuditApplyRequest) (*AlipayOpenMiniVersionAuditApplyResponseModel, *http.Response, error) {
	err := a.client.prepareConfig()
	if err != nil {
		return nil, nil, &GenericOpenAPIError{error: err.Error()}
	}
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *AlipayOpenMiniVersionAuditApplyResponseModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AlipayOpenMiniVersionAuditAPIService.AlipayOpenMiniVersionAuditApply")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/alipay/open/mini/version/audit/apply"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	var appLogoLocalVarFormFileName string
	var appLogoLocalVarFileName string
	var appLogoLocalVarFileBytes []byte

	appLogoLocalVarFormFileName = "app_logo"
	appLogoLocalVarFile := r.appLogo

	if appLogoLocalVarFile != nil {
		fbs, _ := io.ReadAll(appLogoLocalVarFile)

		appLogoLocalVarFileBytes = fbs
		appLogoLocalVarFileName = appLogoLocalVarFile.Name()
		appLogoLocalVarFile.Close()
		formFiles = append(formFiles, formFile{fileBytes: appLogoLocalVarFileBytes, fileName: appLogoLocalVarFileName, formFileName: appLogoLocalVarFormFileName})
	}
	if r.data != nil {
		paramJson, err := parameterToJson(*r.data)
		if err != nil {
			return localVarReturnValue, nil, err
		}
		localVarFormParams.Add("data", paramJson)
	}
	var fifthLicensePicLocalVarFormFileName string
	var fifthLicensePicLocalVarFileName string
	var fifthLicensePicLocalVarFileBytes []byte

	fifthLicensePicLocalVarFormFileName = "fifth_license_pic"
	fifthLicensePicLocalVarFile := r.fifthLicensePic

	if fifthLicensePicLocalVarFile != nil {
		fbs, _ := io.ReadAll(fifthLicensePicLocalVarFile)

		fifthLicensePicLocalVarFileBytes = fbs
		fifthLicensePicLocalVarFileName = fifthLicensePicLocalVarFile.Name()
		fifthLicensePicLocalVarFile.Close()
		formFiles = append(formFiles, formFile{fileBytes: fifthLicensePicLocalVarFileBytes, fileName: fifthLicensePicLocalVarFileName, formFileName: fifthLicensePicLocalVarFormFileName})
	}
	var fifthScreenShotLocalVarFormFileName string
	var fifthScreenShotLocalVarFileName string
	var fifthScreenShotLocalVarFileBytes []byte

	fifthScreenShotLocalVarFormFileName = "fifth_screen_shot"
	fifthScreenShotLocalVarFile := r.fifthScreenShot

	if fifthScreenShotLocalVarFile != nil {
		fbs, _ := io.ReadAll(fifthScreenShotLocalVarFile)

		fifthScreenShotLocalVarFileBytes = fbs
		fifthScreenShotLocalVarFileName = fifthScreenShotLocalVarFile.Name()
		fifthScreenShotLocalVarFile.Close()
		formFiles = append(formFiles, formFile{fileBytes: fifthScreenShotLocalVarFileBytes, fileName: fifthScreenShotLocalVarFileName, formFileName: fifthScreenShotLocalVarFormFileName})
	}
	var firstLicensePicLocalVarFormFileName string
	var firstLicensePicLocalVarFileName string
	var firstLicensePicLocalVarFileBytes []byte

	firstLicensePicLocalVarFormFileName = "first_license_pic"
	firstLicensePicLocalVarFile := r.firstLicensePic

	if firstLicensePicLocalVarFile != nil {
		fbs, _ := io.ReadAll(firstLicensePicLocalVarFile)

		firstLicensePicLocalVarFileBytes = fbs
		firstLicensePicLocalVarFileName = firstLicensePicLocalVarFile.Name()
		firstLicensePicLocalVarFile.Close()
		formFiles = append(formFiles, formFile{fileBytes: firstLicensePicLocalVarFileBytes, fileName: firstLicensePicLocalVarFileName, formFileName: firstLicensePicLocalVarFormFileName})
	}
	var firstScreenShotLocalVarFormFileName string
	var firstScreenShotLocalVarFileName string
	var firstScreenShotLocalVarFileBytes []byte

	firstScreenShotLocalVarFormFileName = "first_screen_shot"
	firstScreenShotLocalVarFile := r.firstScreenShot

	if firstScreenShotLocalVarFile != nil {
		fbs, _ := io.ReadAll(firstScreenShotLocalVarFile)

		firstScreenShotLocalVarFileBytes = fbs
		firstScreenShotLocalVarFileName = firstScreenShotLocalVarFile.Name()
		firstScreenShotLocalVarFile.Close()
		formFiles = append(formFiles, formFile{fileBytes: firstScreenShotLocalVarFileBytes, fileName: firstScreenShotLocalVarFileName, formFileName: firstScreenShotLocalVarFormFileName})
	}
	var firstSpecialLicensePicLocalVarFormFileName string
	var firstSpecialLicensePicLocalVarFileName string
	var firstSpecialLicensePicLocalVarFileBytes []byte

	firstSpecialLicensePicLocalVarFormFileName = "first_special_license_pic"
	firstSpecialLicensePicLocalVarFile := r.firstSpecialLicensePic

	if firstSpecialLicensePicLocalVarFile != nil {
		fbs, _ := io.ReadAll(firstSpecialLicensePicLocalVarFile)

		firstSpecialLicensePicLocalVarFileBytes = fbs
		firstSpecialLicensePicLocalVarFileName = firstSpecialLicensePicLocalVarFile.Name()
		firstSpecialLicensePicLocalVarFile.Close()
		formFiles = append(formFiles, formFile{fileBytes: firstSpecialLicensePicLocalVarFileBytes, fileName: firstSpecialLicensePicLocalVarFileName, formFileName: firstSpecialLicensePicLocalVarFormFileName})
	}
	var fourthLicensePicLocalVarFormFileName string
	var fourthLicensePicLocalVarFileName string
	var fourthLicensePicLocalVarFileBytes []byte

	fourthLicensePicLocalVarFormFileName = "fourth_license_pic"
	fourthLicensePicLocalVarFile := r.fourthLicensePic

	if fourthLicensePicLocalVarFile != nil {
		fbs, _ := io.ReadAll(fourthLicensePicLocalVarFile)

		fourthLicensePicLocalVarFileBytes = fbs
		fourthLicensePicLocalVarFileName = fourthLicensePicLocalVarFile.Name()
		fourthLicensePicLocalVarFile.Close()
		formFiles = append(formFiles, formFile{fileBytes: fourthLicensePicLocalVarFileBytes, fileName: fourthLicensePicLocalVarFileName, formFileName: fourthLicensePicLocalVarFormFileName})
	}
	var fourthScreenShotLocalVarFormFileName string
	var fourthScreenShotLocalVarFileName string
	var fourthScreenShotLocalVarFileBytes []byte

	fourthScreenShotLocalVarFormFileName = "fourth_screen_shot"
	fourthScreenShotLocalVarFile := r.fourthScreenShot

	if fourthScreenShotLocalVarFile != nil {
		fbs, _ := io.ReadAll(fourthScreenShotLocalVarFile)

		fourthScreenShotLocalVarFileBytes = fbs
		fourthScreenShotLocalVarFileName = fourthScreenShotLocalVarFile.Name()
		fourthScreenShotLocalVarFile.Close()
		formFiles = append(formFiles, formFile{fileBytes: fourthScreenShotLocalVarFileBytes, fileName: fourthScreenShotLocalVarFileName, formFileName: fourthScreenShotLocalVarFormFileName})
	}
	var outDoorPicLocalVarFormFileName string
	var outDoorPicLocalVarFileName string
	var outDoorPicLocalVarFileBytes []byte

	outDoorPicLocalVarFormFileName = "out_door_pic"
	outDoorPicLocalVarFile := r.outDoorPic

	if outDoorPicLocalVarFile != nil {
		fbs, _ := io.ReadAll(outDoorPicLocalVarFile)

		outDoorPicLocalVarFileBytes = fbs
		outDoorPicLocalVarFileName = outDoorPicLocalVarFile.Name()
		outDoorPicLocalVarFile.Close()
		formFiles = append(formFiles, formFile{fileBytes: outDoorPicLocalVarFileBytes, fileName: outDoorPicLocalVarFileName, formFileName: outDoorPicLocalVarFormFileName})
	}
	var secondLicensePicLocalVarFormFileName string
	var secondLicensePicLocalVarFileName string
	var secondLicensePicLocalVarFileBytes []byte

	secondLicensePicLocalVarFormFileName = "second_license_pic"
	secondLicensePicLocalVarFile := r.secondLicensePic

	if secondLicensePicLocalVarFile != nil {
		fbs, _ := io.ReadAll(secondLicensePicLocalVarFile)

		secondLicensePicLocalVarFileBytes = fbs
		secondLicensePicLocalVarFileName = secondLicensePicLocalVarFile.Name()
		secondLicensePicLocalVarFile.Close()
		formFiles = append(formFiles, formFile{fileBytes: secondLicensePicLocalVarFileBytes, fileName: secondLicensePicLocalVarFileName, formFileName: secondLicensePicLocalVarFormFileName})
	}
	var secondScreenShotLocalVarFormFileName string
	var secondScreenShotLocalVarFileName string
	var secondScreenShotLocalVarFileBytes []byte

	secondScreenShotLocalVarFormFileName = "second_screen_shot"
	secondScreenShotLocalVarFile := r.secondScreenShot

	if secondScreenShotLocalVarFile != nil {
		fbs, _ := io.ReadAll(secondScreenShotLocalVarFile)

		secondScreenShotLocalVarFileBytes = fbs
		secondScreenShotLocalVarFileName = secondScreenShotLocalVarFile.Name()
		secondScreenShotLocalVarFile.Close()
		formFiles = append(formFiles, formFile{fileBytes: secondScreenShotLocalVarFileBytes, fileName: secondScreenShotLocalVarFileName, formFileName: secondScreenShotLocalVarFormFileName})
	}
	var secondSpecialLicensePicLocalVarFormFileName string
	var secondSpecialLicensePicLocalVarFileName string
	var secondSpecialLicensePicLocalVarFileBytes []byte

	secondSpecialLicensePicLocalVarFormFileName = "second_special_license_pic"
	secondSpecialLicensePicLocalVarFile := r.secondSpecialLicensePic

	if secondSpecialLicensePicLocalVarFile != nil {
		fbs, _ := io.ReadAll(secondSpecialLicensePicLocalVarFile)

		secondSpecialLicensePicLocalVarFileBytes = fbs
		secondSpecialLicensePicLocalVarFileName = secondSpecialLicensePicLocalVarFile.Name()
		secondSpecialLicensePicLocalVarFile.Close()
		formFiles = append(formFiles, formFile{fileBytes: secondSpecialLicensePicLocalVarFileBytes, fileName: secondSpecialLicensePicLocalVarFileName, formFileName: secondSpecialLicensePicLocalVarFormFileName})
	}
	var testFileNameLocalVarFormFileName string
	var testFileNameLocalVarFileName string
	var testFileNameLocalVarFileBytes []byte

	testFileNameLocalVarFormFileName = "test_file_name"
	testFileNameLocalVarFile := r.testFileName

	if testFileNameLocalVarFile != nil {
		fbs, _ := io.ReadAll(testFileNameLocalVarFile)

		testFileNameLocalVarFileBytes = fbs
		testFileNameLocalVarFileName = testFileNameLocalVarFile.Name()
		testFileNameLocalVarFile.Close()
		formFiles = append(formFiles, formFile{fileBytes: testFileNameLocalVarFileBytes, fileName: testFileNameLocalVarFileName, formFileName: testFileNameLocalVarFormFileName})
	}
	var thirdLicensePicLocalVarFormFileName string
	var thirdLicensePicLocalVarFileName string
	var thirdLicensePicLocalVarFileBytes []byte

	thirdLicensePicLocalVarFormFileName = "third_license_pic"
	thirdLicensePicLocalVarFile := r.thirdLicensePic

	if thirdLicensePicLocalVarFile != nil {
		fbs, _ := io.ReadAll(thirdLicensePicLocalVarFile)

		thirdLicensePicLocalVarFileBytes = fbs
		thirdLicensePicLocalVarFileName = thirdLicensePicLocalVarFile.Name()
		thirdLicensePicLocalVarFile.Close()
		formFiles = append(formFiles, formFile{fileBytes: thirdLicensePicLocalVarFileBytes, fileName: thirdLicensePicLocalVarFileName, formFileName: thirdLicensePicLocalVarFormFileName})
	}
	var thirdScreenShotLocalVarFormFileName string
	var thirdScreenShotLocalVarFileName string
	var thirdScreenShotLocalVarFileBytes []byte

	thirdScreenShotLocalVarFormFileName = "third_screen_shot"
	thirdScreenShotLocalVarFile := r.thirdScreenShot

	if thirdScreenShotLocalVarFile != nil {
		fbs, _ := io.ReadAll(thirdScreenShotLocalVarFile)

		thirdScreenShotLocalVarFileBytes = fbs
		thirdScreenShotLocalVarFileName = thirdScreenShotLocalVarFile.Name()
		thirdScreenShotLocalVarFile.Close()
		formFiles = append(formFiles, formFile{fileBytes: thirdScreenShotLocalVarFileBytes, fileName: thirdScreenShotLocalVarFileName, formFileName: thirdScreenShotLocalVarFormFileName})
	}
	var thirdSpecialLicensePicLocalVarFormFileName string
	var thirdSpecialLicensePicLocalVarFileName string
	var thirdSpecialLicensePicLocalVarFileBytes []byte

	thirdSpecialLicensePicLocalVarFormFileName = "third_special_license_pic"
	thirdSpecialLicensePicLocalVarFile := r.thirdSpecialLicensePic

	if thirdSpecialLicensePicLocalVarFile != nil {
		fbs, _ := io.ReadAll(thirdSpecialLicensePicLocalVarFile)

		thirdSpecialLicensePicLocalVarFileBytes = fbs
		thirdSpecialLicensePicLocalVarFileName = thirdSpecialLicensePicLocalVarFile.Name()
		thirdSpecialLicensePicLocalVarFile.Close()
		formFiles = append(formFiles, formFile{fileBytes: thirdSpecialLicensePicLocalVarFileBytes, fileName: thirdSpecialLicensePicLocalVarFileName, formFileName: thirdSpecialLicensePicLocalVarFormFileName})
	}

	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	// Add signing logic
	err = a.signRequest(req)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	// Add verification logic
	err = a.verifyResponse(localVarHTTPResponse, localVarBody)
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v AlipayOpenMiniVersionAuditApplyDefaultResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAlipayOpenMiniVersionAuditCancelRequest struct {
	ctx                                   context.Context
	ApiService                            *AlipayOpenMiniVersionAuditAPIService
	alipayOpenMiniVersionAuditCancelModel *AlipayOpenMiniVersionAuditCancelModel
}

func (r ApiAlipayOpenMiniVersionAuditCancelRequest) AlipayOpenMiniVersionAuditCancelModel(alipayOpenMiniVersionAuditCancelModel AlipayOpenMiniVersionAuditCancelModel) ApiAlipayOpenMiniVersionAuditCancelRequest {
	r.alipayOpenMiniVersionAuditCancelModel = &alipayOpenMiniVersionAuditCancelModel
	return r
}

func (r ApiAlipayOpenMiniVersionAuditCancelRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.AlipayOpenMiniVersionAuditCancelExecute(r)
}

/*
AlipayOpenMiniVersionAuditCancel 小程序撤销审核

三方实例化小程序撤销审核

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiAlipayOpenMiniVersionAuditCancelRequest
*/
func (r *AlipayOpenMiniVersionAuditAPIService) AlipayOpenMiniVersionAuditCancel(ctx context.Context) ApiAlipayOpenMiniVersionAuditCancelRequest {
	return ApiAlipayOpenMiniVersionAuditCancelRequest{
		ApiService: r,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return map[string]interface{}
func (a *AlipayOpenMiniVersionAuditAPIService) AlipayOpenMiniVersionAuditCancelExecute(r ApiAlipayOpenMiniVersionAuditCancelRequest) (map[string]interface{}, *http.Response, error) {
	err := a.client.prepareConfig()
	if err != nil {
		return nil, nil, &GenericOpenAPIError{error: err.Error()}
	}
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AlipayOpenMiniVersionAuditAPIService.AlipayOpenMiniVersionAuditCancel")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/alipay/open/mini/version/audit/cancel"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.alipayOpenMiniVersionAuditCancelModel

	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	// Add signing logic
	err = a.signRequest(req)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	// Add verification logic
	err = a.verifyResponse(localVarHTTPResponse, localVarBody)
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v AlipayOpenMiniVersionAuditCancelDefaultResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

func (a *AlipayOpenMiniVersionAuditAPIService) signRequest(req *http.Request) error {
	appID := a.client.cfg.AppID
	appCertSN := a.client.cfg.AppCertSN
	nonce := generateUUID()
	timestamp := strconv.FormatInt(time.Now().UnixNano()/1e6, 10)

	authString := fmt.Sprintf("app_id=%s", appID)
	if appCertSN != "" {
		authString += fmt.Sprintf(",app_cert_sn=%s", appCertSN)
	}
	authString += fmt.Sprintf(",nonce=%s,timestamp=%s", nonce, timestamp)

	httpMethod := req.Method
	httpRequestUri := req.URL.Path
	if req.URL.RawQuery != "" {
		httpRequestUri += "?" + req.URL.RawQuery
	}

	var httpRequestBody string
	if req.Body != nil {
		bodyBytes, err := io.ReadAll(req.Body)
		if err != nil {
			return err
		}
		httpRequestBody = string(bodyBytes)
		req.Body = io.NopCloser(bytes.NewBuffer(bodyBytes))
	}

	content := authString + "\n" +
		httpMethod + "\n" +
		httpRequestUri + "\n" +
		httpRequestBody + "\n"

	if appAuthToken := req.Header.Get("alipay-app-auth-token"); appAuthToken != "" {
		content += appAuthToken + "\n"
	}

	signature, err := signWithRSA(content, a.client.cfg.privateKey)
	if err != nil {
		return err
	}

	req.Header.Set("Authorization", fmt.Sprintf("ALIPAY-SHA256withRSA %s,sign=%s", authString, signature))
	return nil
}

func (a *AlipayOpenMiniVersionAuditAPIService) verifyResponse(resp *http.Response, body []byte) error {
	timestamp := resp.Header.Get("alipay-timestamp")
	nonce := resp.Header.Get("alipay-nonce")
	sign := resp.Header.Get("alipay-signature")

	content := timestamp + "\n" +
		nonce + "\n" +
		string(body) + "\n"

	return verifyWithRSA(content, sign, a.client.cfg.publicKey)
}
