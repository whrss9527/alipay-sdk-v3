/*
支付宝开放平台API

支付宝开放平台v3协议文档

API version: 2024-07-05
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alipay

import (
	"encoding/json"
)

// checks if the AmountTypeData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AmountTypeData{}

// AmountTypeData struct for AmountTypeData
type AmountTypeData struct {
	// 累计类型为金额类型的累计名称。为必传入参。
	Name *string `json:"name,omitempty"`
	// 优惠信息。为List类型，支持传入多笔优惠，大部分场景传入一笔。包含：优惠名称，优惠类型，优惠金额（单位元）。 字段必传场景： 1.当累计模式为【交易绑定模式】时，为必传入参。 2.当累计模式为【交易解耦模式】，同时需要累计优惠信息时，为必传入参。
	OutDiscountInfos []ZMGoOutDiscountInfo `json:"out_discount_infos,omitempty"`
	TradeInfo        *ZMGoTradeInfo        `json:"trade_info,omitempty"`
}

// NewAmountTypeData instantiates a new AmountTypeData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAmountTypeData() *AmountTypeData {
	this := AmountTypeData{}
	return &this
}

// NewAmountTypeDataWithDefaults instantiates a new AmountTypeData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAmountTypeDataWithDefaults() *AmountTypeData {
	this := AmountTypeData{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *AmountTypeData) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AmountTypeData) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *AmountTypeData) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *AmountTypeData) SetName(v string) {
	o.Name = &v
}

// GetOutDiscountInfos returns the OutDiscountInfos field value if set, zero value otherwise.
func (o *AmountTypeData) GetOutDiscountInfos() []ZMGoOutDiscountInfo {
	if o == nil || IsNil(o.OutDiscountInfos) {
		var ret []ZMGoOutDiscountInfo
		return ret
	}
	return o.OutDiscountInfos
}

// GetOutDiscountInfosOk returns a tuple with the OutDiscountInfos field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AmountTypeData) GetOutDiscountInfosOk() ([]ZMGoOutDiscountInfo, bool) {
	if o == nil || IsNil(o.OutDiscountInfos) {
		return nil, false
	}
	return o.OutDiscountInfos, true
}

// HasOutDiscountInfos returns a boolean if a field has been set.
func (o *AmountTypeData) HasOutDiscountInfos() bool {
	if o != nil && !IsNil(o.OutDiscountInfos) {
		return true
	}

	return false
}

// SetOutDiscountInfos gets a reference to the given []ZMGoOutDiscountInfo and assigns it to the OutDiscountInfos field.
func (o *AmountTypeData) SetOutDiscountInfos(v []ZMGoOutDiscountInfo) {
	o.OutDiscountInfos = v
}

// GetTradeInfo returns the TradeInfo field value if set, zero value otherwise.
func (o *AmountTypeData) GetTradeInfo() ZMGoTradeInfo {
	if o == nil || IsNil(o.TradeInfo) {
		var ret ZMGoTradeInfo
		return ret
	}
	return *o.TradeInfo
}

// GetTradeInfoOk returns a tuple with the TradeInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AmountTypeData) GetTradeInfoOk() (*ZMGoTradeInfo, bool) {
	if o == nil || IsNil(o.TradeInfo) {
		return nil, false
	}
	return o.TradeInfo, true
}

// HasTradeInfo returns a boolean if a field has been set.
func (o *AmountTypeData) HasTradeInfo() bool {
	if o != nil && !IsNil(o.TradeInfo) {
		return true
	}

	return false
}

// SetTradeInfo gets a reference to the given ZMGoTradeInfo and assigns it to the TradeInfo field.
func (o *AmountTypeData) SetTradeInfo(v ZMGoTradeInfo) {
	o.TradeInfo = &v
}

func (o AmountTypeData) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AmountTypeData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.OutDiscountInfos) {
		toSerialize["out_discount_infos"] = o.OutDiscountInfos
	}
	if !IsNil(o.TradeInfo) {
		toSerialize["trade_info"] = o.TradeInfo
	}
	return toSerialize, nil
}

type NullableAmountTypeData struct {
	value *AmountTypeData
	isSet bool
}

func (v NullableAmountTypeData) Get() *AmountTypeData {
	return v.value
}

func (v *NullableAmountTypeData) Set(val *AmountTypeData) {
	v.value = val
	v.isSet = true
}

func (v NullableAmountTypeData) IsSet() bool {
	return v.isSet
}

func (v *NullableAmountTypeData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAmountTypeData(val *AmountTypeData) *NullableAmountTypeData {
	return &NullableAmountTypeData{value: val, isSet: true}
}

func (v NullableAmountTypeData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAmountTypeData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
