/*
支付宝开放平台API

支付宝开放平台v3协议文档

API version: 2024-07-05
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alipay

import (
	"encoding/json"
)

// checks if the TreeInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TreeInfo{}

// TreeInfo struct for TreeInfo
type TreeInfo struct {
	// 类目树ID
	Id *int32 `json:"id,omitempty"`
	// 知识库对应的类目树名称，与treeId不可同时为空
	InstanceCode *string `json:"instance_code,omitempty"`
	// 类目名称
	Name *string `json:"name,omitempty"`
}

// NewTreeInfo instantiates a new TreeInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTreeInfo() *TreeInfo {
	this := TreeInfo{}
	return &this
}

// NewTreeInfoWithDefaults instantiates a new TreeInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTreeInfoWithDefaults() *TreeInfo {
	this := TreeInfo{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *TreeInfo) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TreeInfo) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *TreeInfo) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *TreeInfo) SetId(v int32) {
	o.Id = &v
}

// GetInstanceCode returns the InstanceCode field value if set, zero value otherwise.
func (o *TreeInfo) GetInstanceCode() string {
	if o == nil || IsNil(o.InstanceCode) {
		var ret string
		return ret
	}
	return *o.InstanceCode
}

// GetInstanceCodeOk returns a tuple with the InstanceCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TreeInfo) GetInstanceCodeOk() (*string, bool) {
	if o == nil || IsNil(o.InstanceCode) {
		return nil, false
	}
	return o.InstanceCode, true
}

// HasInstanceCode returns a boolean if a field has been set.
func (o *TreeInfo) HasInstanceCode() bool {
	if o != nil && !IsNil(o.InstanceCode) {
		return true
	}

	return false
}

// SetInstanceCode gets a reference to the given string and assigns it to the InstanceCode field.
func (o *TreeInfo) SetInstanceCode(v string) {
	o.InstanceCode = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *TreeInfo) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TreeInfo) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *TreeInfo) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *TreeInfo) SetName(v string) {
	o.Name = &v
}

func (o TreeInfo) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TreeInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.InstanceCode) {
		toSerialize["instance_code"] = o.InstanceCode
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	return toSerialize, nil
}

type NullableTreeInfo struct {
	value *TreeInfo
	isSet bool
}

func (v NullableTreeInfo) Get() *TreeInfo {
	return v.value
}

func (v *NullableTreeInfo) Set(val *TreeInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableTreeInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableTreeInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTreeInfo(val *TreeInfo) *NullableTreeInfo {
	return &NullableTreeInfo{value: val, isSet: true}
}

func (v NullableTreeInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTreeInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
