/*
支付宝开放平台API

支付宝开放平台v3协议文档

API version: 2024-07-05
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the RoyaltyEntity type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RoyaltyEntity{}

// RoyaltyEntity struct for RoyaltyEntity
type RoyaltyEntity struct {
	// 分账接收方账号。 当分账方类型是userId时，本参数为用户的支付宝账号对应的支付宝唯一用户号，以2088开头的纯16位数字； 当分账方类型是loginName时，本参数为用户的支付宝登录号；当分账方类型是openId时，本参数传递支付宝openId信息。
	Account *string `json:"account,omitempty"`
	// 分账接收方openId，本参数为分账接收方在该应用（AppId）下的唯一用户标识，仅用于分账关系查询接口出参。
	AccountOpenId *string `json:"account_open_id,omitempty"`
	// 作为查询返回结果：分账收款方绑定时的支付宝登录号。分账关系绑定（alipay.trade.royalty.relation.bind）时，通过type为loginName绑定传入的支付宝登录号，若使用userId绑定则不返回。
	BindLoginName *string `json:"bind_login_name,omitempty"`
	// 作为查询返回结果：当前userId对应的支付宝登录号。当login_name与bind_login_name不相等时，表明该支付宝账户发生了登录号变更。
	LoginName *string `json:"login_name,omitempty"`
	// 分账关系描述
	Memo *string `json:"memo,omitempty"`
	// 分账接收方真实姓名。 绑定分账关系时： 当分账方类型是userId时，本参数可以不传，若上传则进行校验不上传不会校验。 当分账方类型是loginName时，本参数必传。 解绑分账关系时：作为请求参数可不填，分账关系查询时不作为返回结果返回
	Name *string `json:"name,omitempty"`
	// 分账接收方方类型。
	Type *string `json:"type,omitempty"`
}

// NewRoyaltyEntity instantiates a new RoyaltyEntity object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRoyaltyEntity() *RoyaltyEntity {
	this := RoyaltyEntity{}
	return &this
}

// NewRoyaltyEntityWithDefaults instantiates a new RoyaltyEntity object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRoyaltyEntityWithDefaults() *RoyaltyEntity {
	this := RoyaltyEntity{}
	return &this
}

// GetAccount returns the Account field value if set, zero value otherwise.
func (o *RoyaltyEntity) GetAccount() string {
	if o == nil || IsNil(o.Account) {
		var ret string
		return ret
	}
	return *o.Account
}

// GetAccountOk returns a tuple with the Account field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoyaltyEntity) GetAccountOk() (*string, bool) {
	if o == nil || IsNil(o.Account) {
		return nil, false
	}
	return o.Account, true
}

// HasAccount returns a boolean if a field has been set.
func (o *RoyaltyEntity) HasAccount() bool {
	if o != nil && !IsNil(o.Account) {
		return true
	}

	return false
}

// SetAccount gets a reference to the given string and assigns it to the Account field.
func (o *RoyaltyEntity) SetAccount(v string) {
	o.Account = &v
}

// GetAccountOpenId returns the AccountOpenId field value if set, zero value otherwise.
func (o *RoyaltyEntity) GetAccountOpenId() string {
	if o == nil || IsNil(o.AccountOpenId) {
		var ret string
		return ret
	}
	return *o.AccountOpenId
}

// GetAccountOpenIdOk returns a tuple with the AccountOpenId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoyaltyEntity) GetAccountOpenIdOk() (*string, bool) {
	if o == nil || IsNil(o.AccountOpenId) {
		return nil, false
	}
	return o.AccountOpenId, true
}

// HasAccountOpenId returns a boolean if a field has been set.
func (o *RoyaltyEntity) HasAccountOpenId() bool {
	if o != nil && !IsNil(o.AccountOpenId) {
		return true
	}

	return false
}

// SetAccountOpenId gets a reference to the given string and assigns it to the AccountOpenId field.
func (o *RoyaltyEntity) SetAccountOpenId(v string) {
	o.AccountOpenId = &v
}

// GetBindLoginName returns the BindLoginName field value if set, zero value otherwise.
func (o *RoyaltyEntity) GetBindLoginName() string {
	if o == nil || IsNil(o.BindLoginName) {
		var ret string
		return ret
	}
	return *o.BindLoginName
}

// GetBindLoginNameOk returns a tuple with the BindLoginName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoyaltyEntity) GetBindLoginNameOk() (*string, bool) {
	if o == nil || IsNil(o.BindLoginName) {
		return nil, false
	}
	return o.BindLoginName, true
}

// HasBindLoginName returns a boolean if a field has been set.
func (o *RoyaltyEntity) HasBindLoginName() bool {
	if o != nil && !IsNil(o.BindLoginName) {
		return true
	}

	return false
}

// SetBindLoginName gets a reference to the given string and assigns it to the BindLoginName field.
func (o *RoyaltyEntity) SetBindLoginName(v string) {
	o.BindLoginName = &v
}

// GetLoginName returns the LoginName field value if set, zero value otherwise.
func (o *RoyaltyEntity) GetLoginName() string {
	if o == nil || IsNil(o.LoginName) {
		var ret string
		return ret
	}
	return *o.LoginName
}

// GetLoginNameOk returns a tuple with the LoginName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoyaltyEntity) GetLoginNameOk() (*string, bool) {
	if o == nil || IsNil(o.LoginName) {
		return nil, false
	}
	return o.LoginName, true
}

// HasLoginName returns a boolean if a field has been set.
func (o *RoyaltyEntity) HasLoginName() bool {
	if o != nil && !IsNil(o.LoginName) {
		return true
	}

	return false
}

// SetLoginName gets a reference to the given string and assigns it to the LoginName field.
func (o *RoyaltyEntity) SetLoginName(v string) {
	o.LoginName = &v
}

// GetMemo returns the Memo field value if set, zero value otherwise.
func (o *RoyaltyEntity) GetMemo() string {
	if o == nil || IsNil(o.Memo) {
		var ret string
		return ret
	}
	return *o.Memo
}

// GetMemoOk returns a tuple with the Memo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoyaltyEntity) GetMemoOk() (*string, bool) {
	if o == nil || IsNil(o.Memo) {
		return nil, false
	}
	return o.Memo, true
}

// HasMemo returns a boolean if a field has been set.
func (o *RoyaltyEntity) HasMemo() bool {
	if o != nil && !IsNil(o.Memo) {
		return true
	}

	return false
}

// SetMemo gets a reference to the given string and assigns it to the Memo field.
func (o *RoyaltyEntity) SetMemo(v string) {
	o.Memo = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *RoyaltyEntity) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoyaltyEntity) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *RoyaltyEntity) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *RoyaltyEntity) SetName(v string) {
	o.Name = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *RoyaltyEntity) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoyaltyEntity) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *RoyaltyEntity) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *RoyaltyEntity) SetType(v string) {
	o.Type = &v
}

func (o RoyaltyEntity) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RoyaltyEntity) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Account) {
		toSerialize["account"] = o.Account
	}
	if !IsNil(o.AccountOpenId) {
		toSerialize["account_open_id"] = o.AccountOpenId
	}
	if !IsNil(o.BindLoginName) {
		toSerialize["bind_login_name"] = o.BindLoginName
	}
	if !IsNil(o.LoginName) {
		toSerialize["login_name"] = o.LoginName
	}
	if !IsNil(o.Memo) {
		toSerialize["memo"] = o.Memo
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableRoyaltyEntity struct {
	value *RoyaltyEntity
	isSet bool
}

func (v NullableRoyaltyEntity) Get() *RoyaltyEntity {
	return v.value
}

func (v *NullableRoyaltyEntity) Set(val *RoyaltyEntity) {
	v.value = val
	v.isSet = true
}

func (v NullableRoyaltyEntity) IsSet() bool {
	return v.isSet
}

func (v *NullableRoyaltyEntity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoyaltyEntity(val *RoyaltyEntity) *NullableRoyaltyEntity {
	return &NullableRoyaltyEntity{value: val, isSet: true}
}

func (v NullableRoyaltyEntity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoyaltyEntity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


