/*
支付宝开放平台API

支付宝开放平台v3协议文档

API version: 2024-07-05
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the SettleConfirmExtendParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SettleConfirmExtendParams{}

// SettleConfirmExtendParams struct for SettleConfirmExtendParams
type SettleConfirmExtendParams struct {
	// 是否进行资金冻结，用于后续分账，true表示冻结，false或不传表示不冻结
	RoyaltyFreeze *string `json:"royalty_freeze,omitempty"`
}

// NewSettleConfirmExtendParams instantiates a new SettleConfirmExtendParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSettleConfirmExtendParams() *SettleConfirmExtendParams {
	this := SettleConfirmExtendParams{}
	return &this
}

// NewSettleConfirmExtendParamsWithDefaults instantiates a new SettleConfirmExtendParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSettleConfirmExtendParamsWithDefaults() *SettleConfirmExtendParams {
	this := SettleConfirmExtendParams{}
	return &this
}

// GetRoyaltyFreeze returns the RoyaltyFreeze field value if set, zero value otherwise.
func (o *SettleConfirmExtendParams) GetRoyaltyFreeze() string {
	if o == nil || IsNil(o.RoyaltyFreeze) {
		var ret string
		return ret
	}
	return *o.RoyaltyFreeze
}

// GetRoyaltyFreezeOk returns a tuple with the RoyaltyFreeze field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SettleConfirmExtendParams) GetRoyaltyFreezeOk() (*string, bool) {
	if o == nil || IsNil(o.RoyaltyFreeze) {
		return nil, false
	}
	return o.RoyaltyFreeze, true
}

// HasRoyaltyFreeze returns a boolean if a field has been set.
func (o *SettleConfirmExtendParams) HasRoyaltyFreeze() bool {
	if o != nil && !IsNil(o.RoyaltyFreeze) {
		return true
	}

	return false
}

// SetRoyaltyFreeze gets a reference to the given string and assigns it to the RoyaltyFreeze field.
func (o *SettleConfirmExtendParams) SetRoyaltyFreeze(v string) {
	o.RoyaltyFreeze = &v
}

func (o SettleConfirmExtendParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SettleConfirmExtendParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RoyaltyFreeze) {
		toSerialize["royalty_freeze"] = o.RoyaltyFreeze
	}
	return toSerialize, nil
}

type NullableSettleConfirmExtendParams struct {
	value *SettleConfirmExtendParams
	isSet bool
}

func (v NullableSettleConfirmExtendParams) Get() *SettleConfirmExtendParams {
	return v.value
}

func (v *NullableSettleConfirmExtendParams) Set(val *SettleConfirmExtendParams) {
	v.value = val
	v.isSet = true
}

func (v NullableSettleConfirmExtendParams) IsSet() bool {
	return v.isSet
}

func (v *NullableSettleConfirmExtendParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSettleConfirmExtendParams(val *SettleConfirmExtendParams) *NullableSettleConfirmExtendParams {
	return &NullableSettleConfirmExtendParams{value: val, isSet: true}
}

func (v NullableSettleConfirmExtendParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSettleConfirmExtendParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


