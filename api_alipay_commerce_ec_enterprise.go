/*
支付宝开放平台API

支付宝开放平台v3协议文档

API version: 2024-07-05
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strconv"
	"time"
)


// AlipayCommerceEcEnterpriseAPIService AlipayCommerceEcEnterpriseAPI service
type AlipayCommerceEcEnterpriseAPIService service

type ApiAlipayCommerceEcEnterpriseCreateRequest struct {
	ctx context.Context
	ApiService *AlipayCommerceEcEnterpriseAPIService
	alipayCommerceEcEnterpriseCreateModel *AlipayCommerceEcEnterpriseCreateModel
}

func (r ApiAlipayCommerceEcEnterpriseCreateRequest) AlipayCommerceEcEnterpriseCreateModel(alipayCommerceEcEnterpriseCreateModel AlipayCommerceEcEnterpriseCreateModel) ApiAlipayCommerceEcEnterpriseCreateRequest {
	r.alipayCommerceEcEnterpriseCreateModel = &alipayCommerceEcEnterpriseCreateModel
	return r
}

func (r ApiAlipayCommerceEcEnterpriseCreateRequest) Execute() (*AlipayCommerceEcEnterpriseCreateResponseModel, *http.Response, error) {
	return r.ApiService.AlipayCommerceEcEnterpriseCreateExecute(r)
}

/*
AlipayCommerceEcEnterpriseCreate 企业入驻

企业入驻，并返回签约链接

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAlipayCommerceEcEnterpriseCreateRequest
*/
func (r *AlipayCommerceEcEnterpriseAPIService) AlipayCommerceEcEnterpriseCreate(ctx context.Context) ApiAlipayCommerceEcEnterpriseCreateRequest {
	return ApiAlipayCommerceEcEnterpriseCreateRequest{
		ApiService: r,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AlipayCommerceEcEnterpriseCreateResponseModel
func (a *AlipayCommerceEcEnterpriseAPIService) AlipayCommerceEcEnterpriseCreateExecute(r ApiAlipayCommerceEcEnterpriseCreateRequest) (*AlipayCommerceEcEnterpriseCreateResponseModel, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AlipayCommerceEcEnterpriseCreateResponseModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AlipayCommerceEcEnterpriseAPIService.AlipayCommerceEcEnterpriseCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/alipay/commerce/ec/enterprise/create"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}



	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.alipayCommerceEcEnterpriseCreateModel

	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	// Add signing logic
	err = a.signRequest(req)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	// Add verification logic
	err = a.verifyResponse(localVarHTTPResponse, localVarBody)
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v AlipayCommerceEcEnterpriseCreateDefaultResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}


type ApiAlipayCommerceEcEnterpriseDeleteRequest struct {
	ctx context.Context
	ApiService *AlipayCommerceEcEnterpriseAPIService
	alipayCommerceEcEnterpriseDeleteModel *AlipayCommerceEcEnterpriseDeleteModel
}

func (r ApiAlipayCommerceEcEnterpriseDeleteRequest) AlipayCommerceEcEnterpriseDeleteModel(alipayCommerceEcEnterpriseDeleteModel AlipayCommerceEcEnterpriseDeleteModel) ApiAlipayCommerceEcEnterpriseDeleteRequest {
	r.alipayCommerceEcEnterpriseDeleteModel = &alipayCommerceEcEnterpriseDeleteModel
	return r
}

func (r ApiAlipayCommerceEcEnterpriseDeleteRequest) Execute() (*AlipayCommerceEcEnterpriseDeleteResponseModel, *http.Response, error) {
	return r.ApiService.AlipayCommerceEcEnterpriseDeleteExecute(r)
}

/*
AlipayCommerceEcEnterpriseDelete 企业注销

企业注销，清理企业数据

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAlipayCommerceEcEnterpriseDeleteRequest
*/
func (r *AlipayCommerceEcEnterpriseAPIService) AlipayCommerceEcEnterpriseDelete(ctx context.Context) ApiAlipayCommerceEcEnterpriseDeleteRequest {
	return ApiAlipayCommerceEcEnterpriseDeleteRequest{
		ApiService: r,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AlipayCommerceEcEnterpriseDeleteResponseModel
func (a *AlipayCommerceEcEnterpriseAPIService) AlipayCommerceEcEnterpriseDeleteExecute(r ApiAlipayCommerceEcEnterpriseDeleteRequest) (*AlipayCommerceEcEnterpriseDeleteResponseModel, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AlipayCommerceEcEnterpriseDeleteResponseModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AlipayCommerceEcEnterpriseAPIService.AlipayCommerceEcEnterpriseDelete")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/alipay/commerce/ec/enterprise/delete"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}



	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.alipayCommerceEcEnterpriseDeleteModel

	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	// Add signing logic
	err = a.signRequest(req)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	// Add verification logic
	err = a.verifyResponse(localVarHTTPResponse, localVarBody)
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v AlipayCommerceEcEnterpriseDeleteDefaultResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}


type ApiAlipayCommerceEcEnterpriseUnsignRequest struct {
	ctx context.Context
	ApiService *AlipayCommerceEcEnterpriseAPIService
	enterpriseId *string
	accountId *string
	agreementNo *string
}

// 通过企业码2.0签约接口签约，只填写企业id，无需填写共同账户id和授权签约协议号。
func (r ApiAlipayCommerceEcEnterpriseUnsignRequest) EnterpriseId(enterpriseId string) ApiAlipayCommerceEcEnterpriseUnsignRequest {
	r.enterpriseId = &enterpriseId
	return r
}

// 通过企业码1.0接口签约的共同账户，和agreement_no搭配使用。
func (r ApiAlipayCommerceEcEnterpriseUnsignRequest) AccountId(accountId string) ApiAlipayCommerceEcEnterpriseUnsignRequest {
	r.accountId = &accountId
	return r
}

// 可通过签约消息获取。配合共同账户id使用，当填写企业共同账户id时，此字段必填。
func (r ApiAlipayCommerceEcEnterpriseUnsignRequest) AgreementNo(agreementNo string) ApiAlipayCommerceEcEnterpriseUnsignRequest {
	r.agreementNo = &agreementNo
	return r
}

func (r ApiAlipayCommerceEcEnterpriseUnsignRequest) Execute() (*AlipayCommerceEcEnterpriseUnsignResponseModel, *http.Response, error) {
	return r.ApiService.AlipayCommerceEcEnterpriseUnsignExecute(r)
}

/*
AlipayCommerceEcEnterpriseUnsign 企业解约

企业解约，获取解约链接，点击链接跳转到解约页面，进行解约协议

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAlipayCommerceEcEnterpriseUnsignRequest
*/
func (r *AlipayCommerceEcEnterpriseAPIService) AlipayCommerceEcEnterpriseUnsign(ctx context.Context) ApiAlipayCommerceEcEnterpriseUnsignRequest {
	return ApiAlipayCommerceEcEnterpriseUnsignRequest{
		ApiService: r,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AlipayCommerceEcEnterpriseUnsignResponseModel
func (a *AlipayCommerceEcEnterpriseAPIService) AlipayCommerceEcEnterpriseUnsignExecute(r ApiAlipayCommerceEcEnterpriseUnsignRequest) (*AlipayCommerceEcEnterpriseUnsignResponseModel, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AlipayCommerceEcEnterpriseUnsignResponseModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AlipayCommerceEcEnterpriseAPIService.AlipayCommerceEcEnterpriseUnsign")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/alipay/commerce/ec/enterprise/unsignurl"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}


	if r.enterpriseId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enterprise_id", r.enterpriseId, "form", "")
	}
	if r.accountId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "account_id", r.accountId, "form", "")
	}
	if r.agreementNo != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "agreement_no", r.agreementNo, "form", "")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	// Add signing logic
	err = a.signRequest(req)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	// Add verification logic
	err = a.verifyResponse(localVarHTTPResponse, localVarBody)
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v AlipayCommerceEcEnterpriseUnsignDefaultResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}


func (a *AlipayCommerceEcEnterpriseAPIService) signRequest(req *http.Request) error {
	appID := a.client.cfg.AppID
	appCertSN := a.client.cfg.AppCertSN
	privateKey := a.client.cfg.PrivateKey

	nonce := generateUUID()
	timestamp := strconv.FormatInt(time.Now().UnixNano()/1e6, 10)

	authString := fmt.Sprintf("app_id=%s", appID)
	if appCertSN != "" {
		authString += fmt.Sprintf(",app_cert_sn=%s", appCertSN)
	}
	authString += fmt.Sprintf(",nonce=%s,timestamp=%s", nonce, timestamp)

	httpMethod := req.Method
	httpRequestUri := req.URL.Path
	if req.URL.RawQuery != "" {
		httpRequestUri += "?" + req.URL.RawQuery
	}

	var httpRequestBody string
	if req.Body != nil {
		bodyBytes, err := io.ReadAll(req.Body)
		if err != nil {
			return err
		}
		httpRequestBody = string(bodyBytes)
		req.Body = io.NopCloser(bytes.NewBuffer(bodyBytes))
	}

	content := authString + "\n" +
		httpMethod + "\n" +
		httpRequestUri + "\n" +
		httpRequestBody + "\n"

	if appAuthToken := req.Header.Get("alipay-app-auth-token"); appAuthToken != "" {
		content += appAuthToken + "\n"
	}

	signature, err := signWithRSA(content, privateKey)
	if err != nil {
		return err
	}

	req.Header.Set("Authorization", fmt.Sprintf("ALIPAY-SHA256withRSA %s,sign=%s", authString, signature))
	return nil
}

func (a *AlipayCommerceEcEnterpriseAPIService) verifyResponse(resp *http.Response, body []byte) error {
	timestamp := resp.Header.Get("alipay-timestamp")
	nonce := resp.Header.Get("alipay-nonce")
	sign := resp.Header.Get("alipay-signature")

	content := timestamp + "\n" +
		nonce + "\n" +
		string(body) + "\n"

	publicKey := a.client.cfg.PublicKey

	return verifyWithRSA(content, sign, publicKey)
}


