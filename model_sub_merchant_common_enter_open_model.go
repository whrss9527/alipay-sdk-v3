/*
支付宝开放平台API

支付宝开放平台v3协议文档

API version: 2024-07-05
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alipay

import (
	"encoding/json"
)

// checks if the SubMerchantCommonEnterOpenModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SubMerchantCommonEnterOpenModel{}

// SubMerchantCommonEnterOpenModel struct for SubMerchantCommonEnterOpenModel
type SubMerchantCommonEnterOpenModel struct {
	// 扩展字段，为json字符串格式；入驻支付即开票的产品该字段必填，用户白名单，由此字段传入；支付即开票商户配置维度，如果不传默认为SMID_MODE，目前仅支持SMID_MODE和PID_MODE
	ExtendFields *string `json:"extend_fields,omitempty"`
	// 商户门店入驻的产品码,STANDARD_INVOICE:扫码开票，INVOICE_RETURN:企业自建-发票回传，INVOICE_EXPENSE:发票报销，PAYMENT_OPEN:支付即开票，PAY_FEE_OPEN:缴费后开票。
	ProductCode *string `json:"product_code,omitempty"`
	// 商户门店所属的服务方简称。
	SShortName *string `json:"s_short_name,omitempty"`
}

// NewSubMerchantCommonEnterOpenModel instantiates a new SubMerchantCommonEnterOpenModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubMerchantCommonEnterOpenModel() *SubMerchantCommonEnterOpenModel {
	this := SubMerchantCommonEnterOpenModel{}
	return &this
}

// NewSubMerchantCommonEnterOpenModelWithDefaults instantiates a new SubMerchantCommonEnterOpenModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubMerchantCommonEnterOpenModelWithDefaults() *SubMerchantCommonEnterOpenModel {
	this := SubMerchantCommonEnterOpenModel{}
	return &this
}

// GetExtendFields returns the ExtendFields field value if set, zero value otherwise.
func (o *SubMerchantCommonEnterOpenModel) GetExtendFields() string {
	if o == nil || IsNil(o.ExtendFields) {
		var ret string
		return ret
	}
	return *o.ExtendFields
}

// GetExtendFieldsOk returns a tuple with the ExtendFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubMerchantCommonEnterOpenModel) GetExtendFieldsOk() (*string, bool) {
	if o == nil || IsNil(o.ExtendFields) {
		return nil, false
	}
	return o.ExtendFields, true
}

// HasExtendFields returns a boolean if a field has been set.
func (o *SubMerchantCommonEnterOpenModel) HasExtendFields() bool {
	if o != nil && !IsNil(o.ExtendFields) {
		return true
	}

	return false
}

// SetExtendFields gets a reference to the given string and assigns it to the ExtendFields field.
func (o *SubMerchantCommonEnterOpenModel) SetExtendFields(v string) {
	o.ExtendFields = &v
}

// GetProductCode returns the ProductCode field value if set, zero value otherwise.
func (o *SubMerchantCommonEnterOpenModel) GetProductCode() string {
	if o == nil || IsNil(o.ProductCode) {
		var ret string
		return ret
	}
	return *o.ProductCode
}

// GetProductCodeOk returns a tuple with the ProductCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubMerchantCommonEnterOpenModel) GetProductCodeOk() (*string, bool) {
	if o == nil || IsNil(o.ProductCode) {
		return nil, false
	}
	return o.ProductCode, true
}

// HasProductCode returns a boolean if a field has been set.
func (o *SubMerchantCommonEnterOpenModel) HasProductCode() bool {
	if o != nil && !IsNil(o.ProductCode) {
		return true
	}

	return false
}

// SetProductCode gets a reference to the given string and assigns it to the ProductCode field.
func (o *SubMerchantCommonEnterOpenModel) SetProductCode(v string) {
	o.ProductCode = &v
}

// GetSShortName returns the SShortName field value if set, zero value otherwise.
func (o *SubMerchantCommonEnterOpenModel) GetSShortName() string {
	if o == nil || IsNil(o.SShortName) {
		var ret string
		return ret
	}
	return *o.SShortName
}

// GetSShortNameOk returns a tuple with the SShortName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubMerchantCommonEnterOpenModel) GetSShortNameOk() (*string, bool) {
	if o == nil || IsNil(o.SShortName) {
		return nil, false
	}
	return o.SShortName, true
}

// HasSShortName returns a boolean if a field has been set.
func (o *SubMerchantCommonEnterOpenModel) HasSShortName() bool {
	if o != nil && !IsNil(o.SShortName) {
		return true
	}

	return false
}

// SetSShortName gets a reference to the given string and assigns it to the SShortName field.
func (o *SubMerchantCommonEnterOpenModel) SetSShortName(v string) {
	o.SShortName = &v
}

func (o SubMerchantCommonEnterOpenModel) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SubMerchantCommonEnterOpenModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ExtendFields) {
		toSerialize["extend_fields"] = o.ExtendFields
	}
	if !IsNil(o.ProductCode) {
		toSerialize["product_code"] = o.ProductCode
	}
	if !IsNil(o.SShortName) {
		toSerialize["s_short_name"] = o.SShortName
	}
	return toSerialize, nil
}

type NullableSubMerchantCommonEnterOpenModel struct {
	value *SubMerchantCommonEnterOpenModel
	isSet bool
}

func (v NullableSubMerchantCommonEnterOpenModel) Get() *SubMerchantCommonEnterOpenModel {
	return v.value
}

func (v *NullableSubMerchantCommonEnterOpenModel) Set(val *SubMerchantCommonEnterOpenModel) {
	v.value = val
	v.isSet = true
}

func (v NullableSubMerchantCommonEnterOpenModel) IsSet() bool {
	return v.isSet
}

func (v *NullableSubMerchantCommonEnterOpenModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubMerchantCommonEnterOpenModel(val *SubMerchantCommonEnterOpenModel) *NullableSubMerchantCommonEnterOpenModel {
	return &NullableSubMerchantCommonEnterOpenModel{value: val, isSet: true}
}

func (v NullableSubMerchantCommonEnterOpenModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubMerchantCommonEnterOpenModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
