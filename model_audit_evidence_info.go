/*
支付宝开放平台API

支付宝开放平台v3协议文档

API version: 2024-07-05
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the AuditEvidenceInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AuditEvidenceInfo{}

// AuditEvidenceInfo struct for AuditEvidenceInfo
type AuditEvidenceInfo struct {
	// 文件类型。包括.jpg .png .jpeg .pdf等
	FileType *string `json:"file_type,omitempty"`
	// 文件url
	Url *string `json:"url,omitempty"`
}

// NewAuditEvidenceInfo instantiates a new AuditEvidenceInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuditEvidenceInfo() *AuditEvidenceInfo {
	this := AuditEvidenceInfo{}
	return &this
}

// NewAuditEvidenceInfoWithDefaults instantiates a new AuditEvidenceInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuditEvidenceInfoWithDefaults() *AuditEvidenceInfo {
	this := AuditEvidenceInfo{}
	return &this
}

// GetFileType returns the FileType field value if set, zero value otherwise.
func (o *AuditEvidenceInfo) GetFileType() string {
	if o == nil || IsNil(o.FileType) {
		var ret string
		return ret
	}
	return *o.FileType
}

// GetFileTypeOk returns a tuple with the FileType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditEvidenceInfo) GetFileTypeOk() (*string, bool) {
	if o == nil || IsNil(o.FileType) {
		return nil, false
	}
	return o.FileType, true
}

// HasFileType returns a boolean if a field has been set.
func (o *AuditEvidenceInfo) HasFileType() bool {
	if o != nil && !IsNil(o.FileType) {
		return true
	}

	return false
}

// SetFileType gets a reference to the given string and assigns it to the FileType field.
func (o *AuditEvidenceInfo) SetFileType(v string) {
	o.FileType = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *AuditEvidenceInfo) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditEvidenceInfo) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *AuditEvidenceInfo) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *AuditEvidenceInfo) SetUrl(v string) {
	o.Url = &v
}

func (o AuditEvidenceInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AuditEvidenceInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FileType) {
		toSerialize["file_type"] = o.FileType
	}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	return toSerialize, nil
}

type NullableAuditEvidenceInfo struct {
	value *AuditEvidenceInfo
	isSet bool
}

func (v NullableAuditEvidenceInfo) Get() *AuditEvidenceInfo {
	return v.value
}

func (v *NullableAuditEvidenceInfo) Set(val *AuditEvidenceInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableAuditEvidenceInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableAuditEvidenceInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuditEvidenceInfo(val *AuditEvidenceInfo) *NullableAuditEvidenceInfo {
	return &NullableAuditEvidenceInfo{value: val, isSet: true}
}

func (v NullableAuditEvidenceInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuditEvidenceInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


