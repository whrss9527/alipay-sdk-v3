/*
支付宝开放平台API

支付宝开放平台v3协议文档

API version: 2024-07-05
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alipay

import (
	"bytes"
	"context"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strconv"
	"time"
)

// AlipayOpenMiniInnerappServiceAPIService AlipayOpenMiniInnerappServiceAPI service
type AlipayOpenMiniInnerappServiceAPIService service

type ApiAlipayOpenMiniInnerappServicePublishRequest struct {
	ctx                                       context.Context
	ApiService                                *AlipayOpenMiniInnerappServiceAPIService
	alipayOpenMiniInnerappServicePublishModel *AlipayOpenMiniInnerappServicePublishModel
}

func (r ApiAlipayOpenMiniInnerappServicePublishRequest) AlipayOpenMiniInnerappServicePublishModel(alipayOpenMiniInnerappServicePublishModel AlipayOpenMiniInnerappServicePublishModel) ApiAlipayOpenMiniInnerappServicePublishRequest {
	r.alipayOpenMiniInnerappServicePublishModel = &alipayOpenMiniInnerappServicePublishModel
	return r
}

func (r ApiAlipayOpenMiniInnerappServicePublishRequest) Execute() (*AlipayOpenMiniInnerappServicePublishResponseModel, *http.Response, error) {
	return r.ApiService.AlipayOpenMiniInnerappServicePublishExecute(r)
}

/*
AlipayOpenMiniInnerappServicePublish 小程序模板发布服务市场

小程序提供一套针对一二方场景的开发者提供一套统一的内部能力开放体系，定向输出赋能

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiAlipayOpenMiniInnerappServicePublishRequest
*/
func (r *AlipayOpenMiniInnerappServiceAPIService) AlipayOpenMiniInnerappServicePublish(ctx context.Context) ApiAlipayOpenMiniInnerappServicePublishRequest {
	return ApiAlipayOpenMiniInnerappServicePublishRequest{
		ApiService: r,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return AlipayOpenMiniInnerappServicePublishResponseModel
func (a *AlipayOpenMiniInnerappServiceAPIService) AlipayOpenMiniInnerappServicePublishExecute(r ApiAlipayOpenMiniInnerappServicePublishRequest) (*AlipayOpenMiniInnerappServicePublishResponseModel, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *AlipayOpenMiniInnerappServicePublishResponseModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AlipayOpenMiniInnerappServiceAPIService.AlipayOpenMiniInnerappServicePublish")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/alipay/open/mini/innerapp/service/publish"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.alipayOpenMiniInnerappServicePublishModel

	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	// Add signing logic
	err = a.signRequest(req)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	// Add verification logic
	err = a.verifyResponse(localVarHTTPResponse, localVarBody)
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v AlipayOpenMiniInnerappServicePublishDefaultResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAlipayOpenMiniInnerappServiceQueryRequest struct {
	ctx            context.Context
	ApiService     *AlipayOpenMiniInnerappServiceAPIService
	miniAppId      *string
	appSubType     *string
	showType       *string
	keyword        *string
	pageNum        *string
	pageSize       *string
	appOrigin      *string
	includeOffline *bool
}

// 插件id或模板id
func (r ApiAlipayOpenMiniInnerappServiceQueryRequest) MiniAppId(miniAppId string) ApiAlipayOpenMiniInnerappServiceQueryRequest {
	r.miniAppId = &miniAppId
	return r
}

// 小程序应用子类型
func (r ApiAlipayOpenMiniInnerappServiceQueryRequest) AppSubType(appSubType string) ApiAlipayOpenMiniInnerappServiceQueryRequest {
	r.appSubType = &appSubType
	return r
}

// 是否在服务市场透出，SHOW展示、HIDE隐藏
func (r ApiAlipayOpenMiniInnerappServiceQueryRequest) ShowType(showType string) ApiAlipayOpenMiniInnerappServiceQueryRequest {
	r.showType = &showType
	return r
}

// 关键词
func (r ApiAlipayOpenMiniInnerappServiceQueryRequest) Keyword(keyword string) ApiAlipayOpenMiniInnerappServiceQueryRequest {
	r.keyword = &keyword
	return r
}

// 页码，默认第一页
func (r ApiAlipayOpenMiniInnerappServiceQueryRequest) PageNum(pageNum string) ApiAlipayOpenMiniInnerappServiceQueryRequest {
	r.pageNum = &pageNum
	return r
}

// 分页数，默认每页10个
func (r ApiAlipayOpenMiniInnerappServiceQueryRequest) PageSize(pageSize string) ApiAlipayOpenMiniInnerappServiceQueryRequest {
	r.pageSize = &pageSize
	return r
}

// 业务来源，新接入方需要向支付宝申请专用来源，否则不予接入。https://yuque.antfin-inc.com/tinyapp-all/qddncu/bidushixiang
func (r ApiAlipayOpenMiniInnerappServiceQueryRequest) AppOrigin(appOrigin string) ApiAlipayOpenMiniInnerappServiceQueryRequest {
	r.appOrigin = &appOrigin
	return r
}

// 是否需要展示offline状态插件，不传默认为false（不展示）
func (r ApiAlipayOpenMiniInnerappServiceQueryRequest) IncludeOffline(includeOffline bool) ApiAlipayOpenMiniInnerappServiceQueryRequest {
	r.includeOffline = &includeOffline
	return r
}

func (r ApiAlipayOpenMiniInnerappServiceQueryRequest) Execute() (*AlipayOpenMiniInnerappServiceQueryResponseModel, *http.Response, error) {
	return r.ApiService.AlipayOpenMiniInnerappServiceQueryExecute(r)
}

/*
AlipayOpenMiniInnerappServiceQuery 小程序服务市场搜索

小程序服务市场搜索，包括搜索模板和插件

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiAlipayOpenMiniInnerappServiceQueryRequest
*/
func (r *AlipayOpenMiniInnerappServiceAPIService) AlipayOpenMiniInnerappServiceQuery(ctx context.Context) ApiAlipayOpenMiniInnerappServiceQueryRequest {
	return ApiAlipayOpenMiniInnerappServiceQueryRequest{
		ApiService: r,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return AlipayOpenMiniInnerappServiceQueryResponseModel
func (a *AlipayOpenMiniInnerappServiceAPIService) AlipayOpenMiniInnerappServiceQueryExecute(r ApiAlipayOpenMiniInnerappServiceQueryRequest) (*AlipayOpenMiniInnerappServiceQueryResponseModel, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *AlipayOpenMiniInnerappServiceQueryResponseModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AlipayOpenMiniInnerappServiceAPIService.AlipayOpenMiniInnerappServiceQuery")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/alipay/open/mini/innerapp/service/query"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.miniAppId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "mini_app_id", r.miniAppId, "form", "")
	}
	if r.appSubType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "app_sub_type", r.appSubType, "form", "")
	}
	if r.showType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "show_type", r.showType, "form", "")
	}
	if r.keyword != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "keyword", r.keyword, "form", "")
	}
	if r.pageNum != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page_num", r.pageNum, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page_size", r.pageSize, "form", "")
	}
	if r.appOrigin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "app_origin", r.appOrigin, "form", "")
	}
	if r.includeOffline != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include_offline", r.includeOffline, "form", "")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	// Add signing logic
	err = a.signRequest(req)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	// Add verification logic
	err = a.verifyResponse(localVarHTTPResponse, localVarBody)
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v AlipayOpenMiniInnerappServiceQueryDefaultResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

func (a *AlipayOpenMiniInnerappServiceAPIService) signRequest(req *http.Request) error {
	appID := a.client.cfg.AppID
	appCertSN := a.client.cfg.AppCertSN
	privateKey := a.client.cfg.PrivateKey

	nonce := generateUUID()
	timestamp := strconv.FormatInt(time.Now().UnixNano()/1e6, 10)

	authString := fmt.Sprintf("app_id=%s", appID)
	if appCertSN != "" {
		authString += fmt.Sprintf(",app_cert_sn=%s", appCertSN)
	}
	authString += fmt.Sprintf(",nonce=%s,timestamp=%s", nonce, timestamp)

	httpMethod := req.Method
	httpRequestUri := req.URL.Path
	if req.URL.RawQuery != "" {
		httpRequestUri += "?" + req.URL.RawQuery
	}

	var httpRequestBody string
	if req.Body != nil {
		bodyBytes, err := io.ReadAll(req.Body)
		if err != nil {
			return err
		}
		httpRequestBody = string(bodyBytes)
		req.Body = io.NopCloser(bytes.NewBuffer(bodyBytes))
	}

	content := authString + "\n" +
		httpMethod + "\n" +
		httpRequestUri + "\n" +
		httpRequestBody + "\n"

	if appAuthToken := req.Header.Get("alipay-app-auth-token"); appAuthToken != "" {
		content += appAuthToken + "\n"
	}

	signature, err := signWithRSA(content, privateKey)
	if err != nil {
		return err
	}

	req.Header.Set("Authorization", fmt.Sprintf("ALIPAY-SHA256withRSA %s,sign=%s", authString, signature))
	return nil
}

func (a *AlipayOpenMiniInnerappServiceAPIService) verifyResponse(resp *http.Response, body []byte) error {
	timestamp := resp.Header.Get("alipay-timestamp")
	nonce := resp.Header.Get("alipay-nonce")
	sign := resp.Header.Get("alipay-signature")

	content := timestamp + "\n" +
		nonce + "\n" +
		string(body) + "\n"

	publicKey := a.client.cfg.PublicKey

	return verifyWithRSA(content, sign, publicKey)
}
