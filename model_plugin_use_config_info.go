/*
支付宝开放平台API

支付宝开放平台v3协议文档

API version: 2024-07-05
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alipay

import (
	"encoding/json"
)

// checks if the PluginUseConfigInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PluginUseConfigInfo{}

// PluginUseConfigInfo struct for PluginUseConfigInfo
type PluginUseConfigInfo struct {
	// 端
	BundleId *string `json:"bundle_id,omitempty"`
	// 灰度策略
	GrayCode *string `json:"gray_code,omitempty"`
	// 插件研发版本
	PluginDevelopVersion *string `json:"plugin_develop_version,omitempty"`
	// GRAY(灰度中)/RELEASE(在线状态)
	Status *string `json:"status,omitempty"`
}

// NewPluginUseConfigInfo instantiates a new PluginUseConfigInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPluginUseConfigInfo() *PluginUseConfigInfo {
	this := PluginUseConfigInfo{}
	return &this
}

// NewPluginUseConfigInfoWithDefaults instantiates a new PluginUseConfigInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPluginUseConfigInfoWithDefaults() *PluginUseConfigInfo {
	this := PluginUseConfigInfo{}
	return &this
}

// GetBundleId returns the BundleId field value if set, zero value otherwise.
func (o *PluginUseConfigInfo) GetBundleId() string {
	if o == nil || IsNil(o.BundleId) {
		var ret string
		return ret
	}
	return *o.BundleId
}

// GetBundleIdOk returns a tuple with the BundleId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PluginUseConfigInfo) GetBundleIdOk() (*string, bool) {
	if o == nil || IsNil(o.BundleId) {
		return nil, false
	}
	return o.BundleId, true
}

// HasBundleId returns a boolean if a field has been set.
func (o *PluginUseConfigInfo) HasBundleId() bool {
	if o != nil && !IsNil(o.BundleId) {
		return true
	}

	return false
}

// SetBundleId gets a reference to the given string and assigns it to the BundleId field.
func (o *PluginUseConfigInfo) SetBundleId(v string) {
	o.BundleId = &v
}

// GetGrayCode returns the GrayCode field value if set, zero value otherwise.
func (o *PluginUseConfigInfo) GetGrayCode() string {
	if o == nil || IsNil(o.GrayCode) {
		var ret string
		return ret
	}
	return *o.GrayCode
}

// GetGrayCodeOk returns a tuple with the GrayCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PluginUseConfigInfo) GetGrayCodeOk() (*string, bool) {
	if o == nil || IsNil(o.GrayCode) {
		return nil, false
	}
	return o.GrayCode, true
}

// HasGrayCode returns a boolean if a field has been set.
func (o *PluginUseConfigInfo) HasGrayCode() bool {
	if o != nil && !IsNil(o.GrayCode) {
		return true
	}

	return false
}

// SetGrayCode gets a reference to the given string and assigns it to the GrayCode field.
func (o *PluginUseConfigInfo) SetGrayCode(v string) {
	o.GrayCode = &v
}

// GetPluginDevelopVersion returns the PluginDevelopVersion field value if set, zero value otherwise.
func (o *PluginUseConfigInfo) GetPluginDevelopVersion() string {
	if o == nil || IsNil(o.PluginDevelopVersion) {
		var ret string
		return ret
	}
	return *o.PluginDevelopVersion
}

// GetPluginDevelopVersionOk returns a tuple with the PluginDevelopVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PluginUseConfigInfo) GetPluginDevelopVersionOk() (*string, bool) {
	if o == nil || IsNil(o.PluginDevelopVersion) {
		return nil, false
	}
	return o.PluginDevelopVersion, true
}

// HasPluginDevelopVersion returns a boolean if a field has been set.
func (o *PluginUseConfigInfo) HasPluginDevelopVersion() bool {
	if o != nil && !IsNil(o.PluginDevelopVersion) {
		return true
	}

	return false
}

// SetPluginDevelopVersion gets a reference to the given string and assigns it to the PluginDevelopVersion field.
func (o *PluginUseConfigInfo) SetPluginDevelopVersion(v string) {
	o.PluginDevelopVersion = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *PluginUseConfigInfo) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PluginUseConfigInfo) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *PluginUseConfigInfo) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *PluginUseConfigInfo) SetStatus(v string) {
	o.Status = &v
}

func (o PluginUseConfigInfo) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PluginUseConfigInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BundleId) {
		toSerialize["bundle_id"] = o.BundleId
	}
	if !IsNil(o.GrayCode) {
		toSerialize["gray_code"] = o.GrayCode
	}
	if !IsNil(o.PluginDevelopVersion) {
		toSerialize["plugin_develop_version"] = o.PluginDevelopVersion
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	return toSerialize, nil
}

type NullablePluginUseConfigInfo struct {
	value *PluginUseConfigInfo
	isSet bool
}

func (v NullablePluginUseConfigInfo) Get() *PluginUseConfigInfo {
	return v.value
}

func (v *NullablePluginUseConfigInfo) Set(val *PluginUseConfigInfo) {
	v.value = val
	v.isSet = true
}

func (v NullablePluginUseConfigInfo) IsSet() bool {
	return v.isSet
}

func (v *NullablePluginUseConfigInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePluginUseConfigInfo(val *PluginUseConfigInfo) *NullablePluginUseConfigInfo {
	return &NullablePluginUseConfigInfo{value: val, isSet: true}
}

func (v NullablePluginUseConfigInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePluginUseConfigInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
