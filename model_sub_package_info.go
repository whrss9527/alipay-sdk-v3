/*
支付宝开放平台API

支付宝开放平台v3协议文档

API version: 2024-07-05
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alipay

import (
	"encoding/json"
)

// checks if the SubPackageInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SubPackageInfo{}

// SubPackageInfo struct for SubPackageInfo
type SubPackageInfo struct {
	// 构建好的结果地址
	BuildedPackageUrl *string `json:"builded_package_url,omitempty"`
	// 构建好的分包地址
	NewBuildedPackageUrl *string `json:"new_builded_package_url,omitempty"`
	// 2.0分包大小，单位字节
	NewSize *string `json:"new_size,omitempty"`
	// 分包路径
	Path *string `json:"path,omitempty"`
	// 分包大小，单位字节
	Size *string `json:"size,omitempty"`
	// 源码地址
	SourceUrl *string `json:"source_url,omitempty"`
	// 分包类型： MAIN ｜ SUB
	Type *string `json:"type,omitempty"`
}

// NewSubPackageInfo instantiates a new SubPackageInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubPackageInfo() *SubPackageInfo {
	this := SubPackageInfo{}
	return &this
}

// NewSubPackageInfoWithDefaults instantiates a new SubPackageInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubPackageInfoWithDefaults() *SubPackageInfo {
	this := SubPackageInfo{}
	return &this
}

// GetBuildedPackageUrl returns the BuildedPackageUrl field value if set, zero value otherwise.
func (o *SubPackageInfo) GetBuildedPackageUrl() string {
	if o == nil || IsNil(o.BuildedPackageUrl) {
		var ret string
		return ret
	}
	return *o.BuildedPackageUrl
}

// GetBuildedPackageUrlOk returns a tuple with the BuildedPackageUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubPackageInfo) GetBuildedPackageUrlOk() (*string, bool) {
	if o == nil || IsNil(o.BuildedPackageUrl) {
		return nil, false
	}
	return o.BuildedPackageUrl, true
}

// HasBuildedPackageUrl returns a boolean if a field has been set.
func (o *SubPackageInfo) HasBuildedPackageUrl() bool {
	if o != nil && !IsNil(o.BuildedPackageUrl) {
		return true
	}

	return false
}

// SetBuildedPackageUrl gets a reference to the given string and assigns it to the BuildedPackageUrl field.
func (o *SubPackageInfo) SetBuildedPackageUrl(v string) {
	o.BuildedPackageUrl = &v
}

// GetNewBuildedPackageUrl returns the NewBuildedPackageUrl field value if set, zero value otherwise.
func (o *SubPackageInfo) GetNewBuildedPackageUrl() string {
	if o == nil || IsNil(o.NewBuildedPackageUrl) {
		var ret string
		return ret
	}
	return *o.NewBuildedPackageUrl
}

// GetNewBuildedPackageUrlOk returns a tuple with the NewBuildedPackageUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubPackageInfo) GetNewBuildedPackageUrlOk() (*string, bool) {
	if o == nil || IsNil(o.NewBuildedPackageUrl) {
		return nil, false
	}
	return o.NewBuildedPackageUrl, true
}

// HasNewBuildedPackageUrl returns a boolean if a field has been set.
func (o *SubPackageInfo) HasNewBuildedPackageUrl() bool {
	if o != nil && !IsNil(o.NewBuildedPackageUrl) {
		return true
	}

	return false
}

// SetNewBuildedPackageUrl gets a reference to the given string and assigns it to the NewBuildedPackageUrl field.
func (o *SubPackageInfo) SetNewBuildedPackageUrl(v string) {
	o.NewBuildedPackageUrl = &v
}

// GetNewSize returns the NewSize field value if set, zero value otherwise.
func (o *SubPackageInfo) GetNewSize() string {
	if o == nil || IsNil(o.NewSize) {
		var ret string
		return ret
	}
	return *o.NewSize
}

// GetNewSizeOk returns a tuple with the NewSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubPackageInfo) GetNewSizeOk() (*string, bool) {
	if o == nil || IsNil(o.NewSize) {
		return nil, false
	}
	return o.NewSize, true
}

// HasNewSize returns a boolean if a field has been set.
func (o *SubPackageInfo) HasNewSize() bool {
	if o != nil && !IsNil(o.NewSize) {
		return true
	}

	return false
}

// SetNewSize gets a reference to the given string and assigns it to the NewSize field.
func (o *SubPackageInfo) SetNewSize(v string) {
	o.NewSize = &v
}

// GetPath returns the Path field value if set, zero value otherwise.
func (o *SubPackageInfo) GetPath() string {
	if o == nil || IsNil(o.Path) {
		var ret string
		return ret
	}
	return *o.Path
}

// GetPathOk returns a tuple with the Path field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubPackageInfo) GetPathOk() (*string, bool) {
	if o == nil || IsNil(o.Path) {
		return nil, false
	}
	return o.Path, true
}

// HasPath returns a boolean if a field has been set.
func (o *SubPackageInfo) HasPath() bool {
	if o != nil && !IsNil(o.Path) {
		return true
	}

	return false
}

// SetPath gets a reference to the given string and assigns it to the Path field.
func (o *SubPackageInfo) SetPath(v string) {
	o.Path = &v
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *SubPackageInfo) GetSize() string {
	if o == nil || IsNil(o.Size) {
		var ret string
		return ret
	}
	return *o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubPackageInfo) GetSizeOk() (*string, bool) {
	if o == nil || IsNil(o.Size) {
		return nil, false
	}
	return o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *SubPackageInfo) HasSize() bool {
	if o != nil && !IsNil(o.Size) {
		return true
	}

	return false
}

// SetSize gets a reference to the given string and assigns it to the Size field.
func (o *SubPackageInfo) SetSize(v string) {
	o.Size = &v
}

// GetSourceUrl returns the SourceUrl field value if set, zero value otherwise.
func (o *SubPackageInfo) GetSourceUrl() string {
	if o == nil || IsNil(o.SourceUrl) {
		var ret string
		return ret
	}
	return *o.SourceUrl
}

// GetSourceUrlOk returns a tuple with the SourceUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubPackageInfo) GetSourceUrlOk() (*string, bool) {
	if o == nil || IsNil(o.SourceUrl) {
		return nil, false
	}
	return o.SourceUrl, true
}

// HasSourceUrl returns a boolean if a field has been set.
func (o *SubPackageInfo) HasSourceUrl() bool {
	if o != nil && !IsNil(o.SourceUrl) {
		return true
	}

	return false
}

// SetSourceUrl gets a reference to the given string and assigns it to the SourceUrl field.
func (o *SubPackageInfo) SetSourceUrl(v string) {
	o.SourceUrl = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *SubPackageInfo) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubPackageInfo) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *SubPackageInfo) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *SubPackageInfo) SetType(v string) {
	o.Type = &v
}

func (o SubPackageInfo) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SubPackageInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BuildedPackageUrl) {
		toSerialize["builded_package_url"] = o.BuildedPackageUrl
	}
	if !IsNil(o.NewBuildedPackageUrl) {
		toSerialize["new_builded_package_url"] = o.NewBuildedPackageUrl
	}
	if !IsNil(o.NewSize) {
		toSerialize["new_size"] = o.NewSize
	}
	if !IsNil(o.Path) {
		toSerialize["path"] = o.Path
	}
	if !IsNil(o.Size) {
		toSerialize["size"] = o.Size
	}
	if !IsNil(o.SourceUrl) {
		toSerialize["source_url"] = o.SourceUrl
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableSubPackageInfo struct {
	value *SubPackageInfo
	isSet bool
}

func (v NullableSubPackageInfo) Get() *SubPackageInfo {
	return v.value
}

func (v *NullableSubPackageInfo) Set(val *SubPackageInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableSubPackageInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableSubPackageInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubPackageInfo(val *SubPackageInfo) *NullableSubPackageInfo {
	return &NullableSubPackageInfo{value: val, isSet: true}
}

func (v NullableSubPackageInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubPackageInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
