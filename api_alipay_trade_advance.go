/*
支付宝开放平台API

支付宝开放平台v3协议文档

API version: 2024-07-05
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alipay

import (
	"bytes"
	"context"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strconv"
	"time"
)

// AlipayTradeAdvanceAPIService AlipayTradeAdvanceAPI service
type AlipayTradeAdvanceAPIService service

type ApiAlipayTradeAdvanceConsultRequest struct {
	ctx                    context.Context
	ApiService             *AlipayTradeAdvanceAPIService
	alipayUserId           *string
	consultScene           *string
	industryProductCode    *string
	subMerchantId          *string
	subMerchantType        *string
	agreementNo            *string
	estimatedOrderAmount   *string
	outTradeNo             *string
	needUserRiskPrediction *string
	tradeDigest            *string
	userOutBindingPhone    *string
}

// 支付宝用户 id，2088开头的16为数字。 除单笔订单风险预评估场景(即consult_scene指定ORDER_RISK_EVALUATION)外，其他场景必选。
func (r ApiAlipayTradeAdvanceConsultRequest) AlipayUserId(alipayUserId string) ApiAlipayTradeAdvanceConsultRequest {
	r.alipayUserId = &alipayUserId
	return r
}

// 订单咨询类型，用以选择咨询的服务。不传时默认为垫资咨询，其他的场景需要按照对接的服务传入指定的值。 ORDER_RISK_EVALUATION：表示单笔订单风险预评估。
func (r ApiAlipayTradeAdvanceConsultRequest) ConsultScene(consultScene string) ApiAlipayTradeAdvanceConsultRequest {
	r.consultScene = &consultScene
	return r
}

// 行业产品信息，咨询时会从该产品对应的销售方案中获取相关垫资规则配置。
func (r ApiAlipayTradeAdvanceConsultRequest) IndustryProductCode(industryProductCode string) ApiAlipayTradeAdvanceConsultRequest {
	r.industryProductCode = &industryProductCode
	return r
}

// 子商户id
func (r ApiAlipayTradeAdvanceConsultRequest) SubMerchantId(subMerchantId string) ApiAlipayTradeAdvanceConsultRequest {
	r.subMerchantId = &subMerchantId
	return r
}

// 子商户类型
func (r ApiAlipayTradeAdvanceConsultRequest) SubMerchantType(subMerchantType string) ApiAlipayTradeAdvanceConsultRequest {
	r.subMerchantType = &subMerchantType
	return r
}

// 支付宝系统中用以唯一标识用户签约记录的编号（用户签约成功后的协议号 ） ，在进行单笔订单风险评估预咨询时必传。
func (r ApiAlipayTradeAdvanceConsultRequest) AgreementNo(agreementNo string) ApiAlipayTradeAdvanceConsultRequest {
	r.agreementNo = &agreementNo
	return r
}

// 预估订单总金额，单位为元，精确到小数点后两位，单笔订单风险预评估时使用，取值范围[0.01,100000000]。
func (r ApiAlipayTradeAdvanceConsultRequest) EstimatedOrderAmount(estimatedOrderAmount string) ApiAlipayTradeAdvanceConsultRequest {
	r.estimatedOrderAmount = &estimatedOrderAmount
	return r
}

// 商户请求时的外部订单号，在花芝场景下非空。
func (r ApiAlipayTradeAdvanceConsultRequest) OutTradeNo(outTradeNo string) ApiAlipayTradeAdvanceConsultRequest {
	r.outTradeNo = &outTradeNo
	return r
}

// 是否需要进行用户风险预测
func (r ApiAlipayTradeAdvanceConsultRequest) NeedUserRiskPrediction(needUserRiskPrediction string) ApiAlipayTradeAdvanceConsultRequest {
	r.needUserRiskPrediction = &needUserRiskPrediction
	return r
}

// 交易信息摘要，需要进行用户风险预测时可传，用于结合场景的更加精细的预测。具体信息结构服务接入前咨询约定。
func (r ApiAlipayTradeAdvanceConsultRequest) TradeDigest(tradeDigest string) ApiAlipayTradeAdvanceConsultRequest {
	r.tradeDigest = &tradeDigest
	return r
}

// 用户在外部域账号系统绑定的手机号，需要进行用户风险预测时必传，用于预测用户是否面临被二次放号的场景。使用时需要对请求加密，加密后请求在公网传输时为加密文本。详见：https://opendocs.alipay.com/open/common/104567；https://opendocs.alipay.com/isv/grefvl/getaes
func (r ApiAlipayTradeAdvanceConsultRequest) UserOutBindingPhone(userOutBindingPhone string) ApiAlipayTradeAdvanceConsultRequest {
	r.userOutBindingPhone = &userOutBindingPhone
	return r
}

func (r ApiAlipayTradeAdvanceConsultRequest) Execute() (*AlipayTradeAdvanceConsultResponseModel, *http.Response, error) {
	return r.ApiService.AlipayTradeAdvanceConsultExecute(r)
}

/*
AlipayTradeAdvanceConsult 订单咨询服务

商户通过此接口咨询，当前用户是否满足垫资服务条件 或者 针对单笔订单的风险评估进行预咨询服务。

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiAlipayTradeAdvanceConsultRequest
*/
func (r *AlipayTradeAdvanceAPIService) AlipayTradeAdvanceConsult(ctx context.Context) ApiAlipayTradeAdvanceConsultRequest {
	return ApiAlipayTradeAdvanceConsultRequest{
		ApiService: r,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return AlipayTradeAdvanceConsultResponseModel
func (a *AlipayTradeAdvanceAPIService) AlipayTradeAdvanceConsultExecute(r ApiAlipayTradeAdvanceConsultRequest) (*AlipayTradeAdvanceConsultResponseModel, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *AlipayTradeAdvanceConsultResponseModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AlipayTradeAdvanceAPIService.AlipayTradeAdvanceConsult")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/alipay/trade/advance/consult"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.alipayUserId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "alipay_user_id", r.alipayUserId, "form", "")
	}
	if r.consultScene != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "consult_scene", r.consultScene, "form", "")
	}
	if r.industryProductCode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "industry_product_code", r.industryProductCode, "form", "")
	}
	if r.subMerchantId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sub_merchant_id", r.subMerchantId, "form", "")
	}
	if r.subMerchantType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sub_merchant_type", r.subMerchantType, "form", "")
	}
	if r.agreementNo != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "agreement_no", r.agreementNo, "form", "")
	}
	if r.estimatedOrderAmount != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "estimated_order_amount", r.estimatedOrderAmount, "form", "")
	}
	if r.outTradeNo != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "out_trade_no", r.outTradeNo, "form", "")
	}
	if r.needUserRiskPrediction != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "need_user_risk_prediction", r.needUserRiskPrediction, "form", "")
	}
	if r.tradeDigest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "trade_digest", r.tradeDigest, "form", "")
	}
	if r.userOutBindingPhone != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "user_out_binding_phone", r.userOutBindingPhone, "form", "")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	// Add signing logic
	err = a.signRequest(req)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	// Add verification logic
	err = a.verifyResponse(localVarHTTPResponse, localVarBody)
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v AlipayTradeAdvanceConsultDefaultResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

func (a *AlipayTradeAdvanceAPIService) signRequest(req *http.Request) error {
	appID := a.client.cfg.AppID
	appCertSN := a.client.cfg.AppCertSN
	privateKey := a.client.cfg.PrivateKey

	nonce := generateUUID()
	timestamp := strconv.FormatInt(time.Now().UnixNano()/1e6, 10)

	authString := fmt.Sprintf("app_id=%s", appID)
	if appCertSN != "" {
		authString += fmt.Sprintf(",app_cert_sn=%s", appCertSN)
	}
	authString += fmt.Sprintf(",nonce=%s,timestamp=%s", nonce, timestamp)

	httpMethod := req.Method
	httpRequestUri := req.URL.Path
	if req.URL.RawQuery != "" {
		httpRequestUri += "?" + req.URL.RawQuery
	}

	var httpRequestBody string
	if req.Body != nil {
		bodyBytes, err := io.ReadAll(req.Body)
		if err != nil {
			return err
		}
		httpRequestBody = string(bodyBytes)
		req.Body = io.NopCloser(bytes.NewBuffer(bodyBytes))
	}

	content := authString + "\n" +
		httpMethod + "\n" +
		httpRequestUri + "\n" +
		httpRequestBody + "\n"

	if appAuthToken := req.Header.Get("alipay-app-auth-token"); appAuthToken != "" {
		content += appAuthToken + "\n"
	}

	signature, err := signWithRSA(content, privateKey)
	if err != nil {
		return err
	}

	req.Header.Set("Authorization", fmt.Sprintf("ALIPAY-SHA256withRSA %s,sign=%s", authString, signature))
	return nil
}

func (a *AlipayTradeAdvanceAPIService) verifyResponse(resp *http.Response, body []byte) error {
	timestamp := resp.Header.Get("alipay-timestamp")
	nonce := resp.Header.Get("alipay-nonce")
	sign := resp.Header.Get("alipay-signature")

	content := timestamp + "\n" +
		nonce + "\n" +
		string(body) + "\n"

	publicKey := a.client.cfg.PublicKey

	return verifyWithRSA(content, sign, publicKey)
}
