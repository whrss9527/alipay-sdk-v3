/*
支付宝开放平台API

支付宝开放平台v3协议文档

API version: 2024-07-05
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alipay

import (
	"encoding/json"
)

// checks if the ExtTemplateConf type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExtTemplateConf{}

// ExtTemplateConf struct for ExtTemplateConf
type ExtTemplateConf struct {
	// 淘宝uid
	BuyerId *string `json:"buyer_id,omitempty"`
	// 先享后买id
	XxhmInfoId *string `json:"xxhm_info_id,omitempty"`
}

// NewExtTemplateConf instantiates a new ExtTemplateConf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExtTemplateConf() *ExtTemplateConf {
	this := ExtTemplateConf{}
	return &this
}

// NewExtTemplateConfWithDefaults instantiates a new ExtTemplateConf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExtTemplateConfWithDefaults() *ExtTemplateConf {
	this := ExtTemplateConf{}
	return &this
}

// GetBuyerId returns the BuyerId field value if set, zero value otherwise.
func (o *ExtTemplateConf) GetBuyerId() string {
	if o == nil || IsNil(o.BuyerId) {
		var ret string
		return ret
	}
	return *o.BuyerId
}

// GetBuyerIdOk returns a tuple with the BuyerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtTemplateConf) GetBuyerIdOk() (*string, bool) {
	if o == nil || IsNil(o.BuyerId) {
		return nil, false
	}
	return o.BuyerId, true
}

// HasBuyerId returns a boolean if a field has been set.
func (o *ExtTemplateConf) HasBuyerId() bool {
	if o != nil && !IsNil(o.BuyerId) {
		return true
	}

	return false
}

// SetBuyerId gets a reference to the given string and assigns it to the BuyerId field.
func (o *ExtTemplateConf) SetBuyerId(v string) {
	o.BuyerId = &v
}

// GetXxhmInfoId returns the XxhmInfoId field value if set, zero value otherwise.
func (o *ExtTemplateConf) GetXxhmInfoId() string {
	if o == nil || IsNil(o.XxhmInfoId) {
		var ret string
		return ret
	}
	return *o.XxhmInfoId
}

// GetXxhmInfoIdOk returns a tuple with the XxhmInfoId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtTemplateConf) GetXxhmInfoIdOk() (*string, bool) {
	if o == nil || IsNil(o.XxhmInfoId) {
		return nil, false
	}
	return o.XxhmInfoId, true
}

// HasXxhmInfoId returns a boolean if a field has been set.
func (o *ExtTemplateConf) HasXxhmInfoId() bool {
	if o != nil && !IsNil(o.XxhmInfoId) {
		return true
	}

	return false
}

// SetXxhmInfoId gets a reference to the given string and assigns it to the XxhmInfoId field.
func (o *ExtTemplateConf) SetXxhmInfoId(v string) {
	o.XxhmInfoId = &v
}

func (o ExtTemplateConf) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExtTemplateConf) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BuyerId) {
		toSerialize["buyer_id"] = o.BuyerId
	}
	if !IsNil(o.XxhmInfoId) {
		toSerialize["xxhm_info_id"] = o.XxhmInfoId
	}
	return toSerialize, nil
}

type NullableExtTemplateConf struct {
	value *ExtTemplateConf
	isSet bool
}

func (v NullableExtTemplateConf) Get() *ExtTemplateConf {
	return v.value
}

func (v *NullableExtTemplateConf) Set(val *ExtTemplateConf) {
	v.value = val
	v.isSet = true
}

func (v NullableExtTemplateConf) IsSet() bool {
	return v.isSet
}

func (v *NullableExtTemplateConf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExtTemplateConf(val *ExtTemplateConf) *NullableExtTemplateConf {
	return &NullableExtTemplateConf{value: val, isSet: true}
}

func (v NullableExtTemplateConf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExtTemplateConf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
