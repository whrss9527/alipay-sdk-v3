/*
支付宝开放平台API

支付宝开放平台v3协议文档

API version: 2024-07-05
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alipay

import (
	"encoding/json"
)

// checks if the RefundSubFee type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RefundSubFee{}

// RefundSubFee struct for RefundSubFee
type RefundSubFee struct {
	// 实退费用。单位：元。
	RefundChargeFee *string `json:"refund_charge_fee,omitempty"`
	// 签约费率
	SwitchFeeRate *string `json:"switch_fee_rate,omitempty"`
}

// NewRefundSubFee instantiates a new RefundSubFee object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRefundSubFee() *RefundSubFee {
	this := RefundSubFee{}
	return &this
}

// NewRefundSubFeeWithDefaults instantiates a new RefundSubFee object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRefundSubFeeWithDefaults() *RefundSubFee {
	this := RefundSubFee{}
	return &this
}

// GetRefundChargeFee returns the RefundChargeFee field value if set, zero value otherwise.
func (o *RefundSubFee) GetRefundChargeFee() string {
	if o == nil || IsNil(o.RefundChargeFee) {
		var ret string
		return ret
	}
	return *o.RefundChargeFee
}

// GetRefundChargeFeeOk returns a tuple with the RefundChargeFee field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RefundSubFee) GetRefundChargeFeeOk() (*string, bool) {
	if o == nil || IsNil(o.RefundChargeFee) {
		return nil, false
	}
	return o.RefundChargeFee, true
}

// HasRefundChargeFee returns a boolean if a field has been set.
func (o *RefundSubFee) HasRefundChargeFee() bool {
	if o != nil && !IsNil(o.RefundChargeFee) {
		return true
	}

	return false
}

// SetRefundChargeFee gets a reference to the given string and assigns it to the RefundChargeFee field.
func (o *RefundSubFee) SetRefundChargeFee(v string) {
	o.RefundChargeFee = &v
}

// GetSwitchFeeRate returns the SwitchFeeRate field value if set, zero value otherwise.
func (o *RefundSubFee) GetSwitchFeeRate() string {
	if o == nil || IsNil(o.SwitchFeeRate) {
		var ret string
		return ret
	}
	return *o.SwitchFeeRate
}

// GetSwitchFeeRateOk returns a tuple with the SwitchFeeRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RefundSubFee) GetSwitchFeeRateOk() (*string, bool) {
	if o == nil || IsNil(o.SwitchFeeRate) {
		return nil, false
	}
	return o.SwitchFeeRate, true
}

// HasSwitchFeeRate returns a boolean if a field has been set.
func (o *RefundSubFee) HasSwitchFeeRate() bool {
	if o != nil && !IsNil(o.SwitchFeeRate) {
		return true
	}

	return false
}

// SetSwitchFeeRate gets a reference to the given string and assigns it to the SwitchFeeRate field.
func (o *RefundSubFee) SetSwitchFeeRate(v string) {
	o.SwitchFeeRate = &v
}

func (o RefundSubFee) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RefundSubFee) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RefundChargeFee) {
		toSerialize["refund_charge_fee"] = o.RefundChargeFee
	}
	if !IsNil(o.SwitchFeeRate) {
		toSerialize["switch_fee_rate"] = o.SwitchFeeRate
	}
	return toSerialize, nil
}

type NullableRefundSubFee struct {
	value *RefundSubFee
	isSet bool
}

func (v NullableRefundSubFee) Get() *RefundSubFee {
	return v.value
}

func (v *NullableRefundSubFee) Set(val *RefundSubFee) {
	v.value = val
	v.isSet = true
}

func (v NullableRefundSubFee) IsSet() bool {
	return v.isSet
}

func (v *NullableRefundSubFee) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRefundSubFee(val *RefundSubFee) *NullableRefundSubFee {
	return &NullableRefundSubFee{value: val, isSet: true}
}

func (v NullableRefundSubFee) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRefundSubFee) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
