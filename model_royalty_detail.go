/*
支付宝开放平台API

支付宝开放平台v3协议文档

API version: 2024-07-05
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the RoyaltyDetail type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RoyaltyDetail{}

// RoyaltyDetail struct for RoyaltyDetail
type RoyaltyDetail struct {
	// 分账金额
	Amount *string `json:"amount,omitempty"`
	// 支付宝分账明细单号，每笔分账业务执行的明细单号
	DetailId *string `json:"detail_id,omitempty"`
	// 分账失败错误码，只在分账失败时返回
	ErrorCode *string `json:"error_code,omitempty"`
	// 分账错误描述信息
	ErrorDesc *string `json:"error_desc,omitempty"`
	// 分账执行时间
	ExecuteDt *string `json:"execute_dt,omitempty"`
	// 分账操作类型。有以下几种类型： replenish(补差)、replenish_refund(退补差)、transfer(分账)、transfer_refund(退分账)
	OperationType *string `json:"operation_type,omitempty"`
	// 分账状态，SUCCESS成功，FAIL失败，PROCESSING处理中
	State *string `json:"state,omitempty"`
	// 分账转入账号，只有在operation_type为replenish_refund(退补差)，transfer(分账)才返回该字段或trans_in_open_id。trans_in_open_id为分账转入方的openId，当trans_in_open_id不为空的时候，请优先使用trans_in_open_id。
	TransIn *string `json:"trans_in,omitempty"`
	// 分账转入方的OpenId，OpenId为用户在该应用下支付宝的唯一用户标识。
	TransInOpenId *string `json:"trans_in_open_id,omitempty"`
	// 分账转入账号类型。
	TransInType *string `json:"trans_in_type,omitempty"`
	// 分账转出账号，只有在operation_type为replenish(补差),transfer_refund(退分账)类型才返回该字段或trans_out_open_id字段。trans_out_open_id字段为分账转出方的openId，当trans_out_open_id 字段不为空时，请优先使用trans_out_open_id。
	TransOut *string `json:"trans_out,omitempty"`
	// 分账转出方的OpenId，OpenId为用户在该应用下支付宝内的唯一用户标识。
	TransOutOpenId *string `json:"trans_out_open_id,omitempty"`
	// 分账转出账号类型
	TransOutType *string `json:"trans_out_type,omitempty"`
}

// NewRoyaltyDetail instantiates a new RoyaltyDetail object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRoyaltyDetail() *RoyaltyDetail {
	this := RoyaltyDetail{}
	return &this
}

// NewRoyaltyDetailWithDefaults instantiates a new RoyaltyDetail object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRoyaltyDetailWithDefaults() *RoyaltyDetail {
	this := RoyaltyDetail{}
	return &this
}

// GetAmount returns the Amount field value if set, zero value otherwise.
func (o *RoyaltyDetail) GetAmount() string {
	if o == nil || IsNil(o.Amount) {
		var ret string
		return ret
	}
	return *o.Amount
}

// GetAmountOk returns a tuple with the Amount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoyaltyDetail) GetAmountOk() (*string, bool) {
	if o == nil || IsNil(o.Amount) {
		return nil, false
	}
	return o.Amount, true
}

// HasAmount returns a boolean if a field has been set.
func (o *RoyaltyDetail) HasAmount() bool {
	if o != nil && !IsNil(o.Amount) {
		return true
	}

	return false
}

// SetAmount gets a reference to the given string and assigns it to the Amount field.
func (o *RoyaltyDetail) SetAmount(v string) {
	o.Amount = &v
}

// GetDetailId returns the DetailId field value if set, zero value otherwise.
func (o *RoyaltyDetail) GetDetailId() string {
	if o == nil || IsNil(o.DetailId) {
		var ret string
		return ret
	}
	return *o.DetailId
}

// GetDetailIdOk returns a tuple with the DetailId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoyaltyDetail) GetDetailIdOk() (*string, bool) {
	if o == nil || IsNil(o.DetailId) {
		return nil, false
	}
	return o.DetailId, true
}

// HasDetailId returns a boolean if a field has been set.
func (o *RoyaltyDetail) HasDetailId() bool {
	if o != nil && !IsNil(o.DetailId) {
		return true
	}

	return false
}

// SetDetailId gets a reference to the given string and assigns it to the DetailId field.
func (o *RoyaltyDetail) SetDetailId(v string) {
	o.DetailId = &v
}

// GetErrorCode returns the ErrorCode field value if set, zero value otherwise.
func (o *RoyaltyDetail) GetErrorCode() string {
	if o == nil || IsNil(o.ErrorCode) {
		var ret string
		return ret
	}
	return *o.ErrorCode
}

// GetErrorCodeOk returns a tuple with the ErrorCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoyaltyDetail) GetErrorCodeOk() (*string, bool) {
	if o == nil || IsNil(o.ErrorCode) {
		return nil, false
	}
	return o.ErrorCode, true
}

// HasErrorCode returns a boolean if a field has been set.
func (o *RoyaltyDetail) HasErrorCode() bool {
	if o != nil && !IsNil(o.ErrorCode) {
		return true
	}

	return false
}

// SetErrorCode gets a reference to the given string and assigns it to the ErrorCode field.
func (o *RoyaltyDetail) SetErrorCode(v string) {
	o.ErrorCode = &v
}

// GetErrorDesc returns the ErrorDesc field value if set, zero value otherwise.
func (o *RoyaltyDetail) GetErrorDesc() string {
	if o == nil || IsNil(o.ErrorDesc) {
		var ret string
		return ret
	}
	return *o.ErrorDesc
}

// GetErrorDescOk returns a tuple with the ErrorDesc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoyaltyDetail) GetErrorDescOk() (*string, bool) {
	if o == nil || IsNil(o.ErrorDesc) {
		return nil, false
	}
	return o.ErrorDesc, true
}

// HasErrorDesc returns a boolean if a field has been set.
func (o *RoyaltyDetail) HasErrorDesc() bool {
	if o != nil && !IsNil(o.ErrorDesc) {
		return true
	}

	return false
}

// SetErrorDesc gets a reference to the given string and assigns it to the ErrorDesc field.
func (o *RoyaltyDetail) SetErrorDesc(v string) {
	o.ErrorDesc = &v
}

// GetExecuteDt returns the ExecuteDt field value if set, zero value otherwise.
func (o *RoyaltyDetail) GetExecuteDt() string {
	if o == nil || IsNil(o.ExecuteDt) {
		var ret string
		return ret
	}
	return *o.ExecuteDt
}

// GetExecuteDtOk returns a tuple with the ExecuteDt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoyaltyDetail) GetExecuteDtOk() (*string, bool) {
	if o == nil || IsNil(o.ExecuteDt) {
		return nil, false
	}
	return o.ExecuteDt, true
}

// HasExecuteDt returns a boolean if a field has been set.
func (o *RoyaltyDetail) HasExecuteDt() bool {
	if o != nil && !IsNil(o.ExecuteDt) {
		return true
	}

	return false
}

// SetExecuteDt gets a reference to the given string and assigns it to the ExecuteDt field.
func (o *RoyaltyDetail) SetExecuteDt(v string) {
	o.ExecuteDt = &v
}

// GetOperationType returns the OperationType field value if set, zero value otherwise.
func (o *RoyaltyDetail) GetOperationType() string {
	if o == nil || IsNil(o.OperationType) {
		var ret string
		return ret
	}
	return *o.OperationType
}

// GetOperationTypeOk returns a tuple with the OperationType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoyaltyDetail) GetOperationTypeOk() (*string, bool) {
	if o == nil || IsNil(o.OperationType) {
		return nil, false
	}
	return o.OperationType, true
}

// HasOperationType returns a boolean if a field has been set.
func (o *RoyaltyDetail) HasOperationType() bool {
	if o != nil && !IsNil(o.OperationType) {
		return true
	}

	return false
}

// SetOperationType gets a reference to the given string and assigns it to the OperationType field.
func (o *RoyaltyDetail) SetOperationType(v string) {
	o.OperationType = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *RoyaltyDetail) GetState() string {
	if o == nil || IsNil(o.State) {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoyaltyDetail) GetStateOk() (*string, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *RoyaltyDetail) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *RoyaltyDetail) SetState(v string) {
	o.State = &v
}

// GetTransIn returns the TransIn field value if set, zero value otherwise.
func (o *RoyaltyDetail) GetTransIn() string {
	if o == nil || IsNil(o.TransIn) {
		var ret string
		return ret
	}
	return *o.TransIn
}

// GetTransInOk returns a tuple with the TransIn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoyaltyDetail) GetTransInOk() (*string, bool) {
	if o == nil || IsNil(o.TransIn) {
		return nil, false
	}
	return o.TransIn, true
}

// HasTransIn returns a boolean if a field has been set.
func (o *RoyaltyDetail) HasTransIn() bool {
	if o != nil && !IsNil(o.TransIn) {
		return true
	}

	return false
}

// SetTransIn gets a reference to the given string and assigns it to the TransIn field.
func (o *RoyaltyDetail) SetTransIn(v string) {
	o.TransIn = &v
}

// GetTransInOpenId returns the TransInOpenId field value if set, zero value otherwise.
func (o *RoyaltyDetail) GetTransInOpenId() string {
	if o == nil || IsNil(o.TransInOpenId) {
		var ret string
		return ret
	}
	return *o.TransInOpenId
}

// GetTransInOpenIdOk returns a tuple with the TransInOpenId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoyaltyDetail) GetTransInOpenIdOk() (*string, bool) {
	if o == nil || IsNil(o.TransInOpenId) {
		return nil, false
	}
	return o.TransInOpenId, true
}

// HasTransInOpenId returns a boolean if a field has been set.
func (o *RoyaltyDetail) HasTransInOpenId() bool {
	if o != nil && !IsNil(o.TransInOpenId) {
		return true
	}

	return false
}

// SetTransInOpenId gets a reference to the given string and assigns it to the TransInOpenId field.
func (o *RoyaltyDetail) SetTransInOpenId(v string) {
	o.TransInOpenId = &v
}

// GetTransInType returns the TransInType field value if set, zero value otherwise.
func (o *RoyaltyDetail) GetTransInType() string {
	if o == nil || IsNil(o.TransInType) {
		var ret string
		return ret
	}
	return *o.TransInType
}

// GetTransInTypeOk returns a tuple with the TransInType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoyaltyDetail) GetTransInTypeOk() (*string, bool) {
	if o == nil || IsNil(o.TransInType) {
		return nil, false
	}
	return o.TransInType, true
}

// HasTransInType returns a boolean if a field has been set.
func (o *RoyaltyDetail) HasTransInType() bool {
	if o != nil && !IsNil(o.TransInType) {
		return true
	}

	return false
}

// SetTransInType gets a reference to the given string and assigns it to the TransInType field.
func (o *RoyaltyDetail) SetTransInType(v string) {
	o.TransInType = &v
}

// GetTransOut returns the TransOut field value if set, zero value otherwise.
func (o *RoyaltyDetail) GetTransOut() string {
	if o == nil || IsNil(o.TransOut) {
		var ret string
		return ret
	}
	return *o.TransOut
}

// GetTransOutOk returns a tuple with the TransOut field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoyaltyDetail) GetTransOutOk() (*string, bool) {
	if o == nil || IsNil(o.TransOut) {
		return nil, false
	}
	return o.TransOut, true
}

// HasTransOut returns a boolean if a field has been set.
func (o *RoyaltyDetail) HasTransOut() bool {
	if o != nil && !IsNil(o.TransOut) {
		return true
	}

	return false
}

// SetTransOut gets a reference to the given string and assigns it to the TransOut field.
func (o *RoyaltyDetail) SetTransOut(v string) {
	o.TransOut = &v
}

// GetTransOutOpenId returns the TransOutOpenId field value if set, zero value otherwise.
func (o *RoyaltyDetail) GetTransOutOpenId() string {
	if o == nil || IsNil(o.TransOutOpenId) {
		var ret string
		return ret
	}
	return *o.TransOutOpenId
}

// GetTransOutOpenIdOk returns a tuple with the TransOutOpenId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoyaltyDetail) GetTransOutOpenIdOk() (*string, bool) {
	if o == nil || IsNil(o.TransOutOpenId) {
		return nil, false
	}
	return o.TransOutOpenId, true
}

// HasTransOutOpenId returns a boolean if a field has been set.
func (o *RoyaltyDetail) HasTransOutOpenId() bool {
	if o != nil && !IsNil(o.TransOutOpenId) {
		return true
	}

	return false
}

// SetTransOutOpenId gets a reference to the given string and assigns it to the TransOutOpenId field.
func (o *RoyaltyDetail) SetTransOutOpenId(v string) {
	o.TransOutOpenId = &v
}

// GetTransOutType returns the TransOutType field value if set, zero value otherwise.
func (o *RoyaltyDetail) GetTransOutType() string {
	if o == nil || IsNil(o.TransOutType) {
		var ret string
		return ret
	}
	return *o.TransOutType
}

// GetTransOutTypeOk returns a tuple with the TransOutType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoyaltyDetail) GetTransOutTypeOk() (*string, bool) {
	if o == nil || IsNil(o.TransOutType) {
		return nil, false
	}
	return o.TransOutType, true
}

// HasTransOutType returns a boolean if a field has been set.
func (o *RoyaltyDetail) HasTransOutType() bool {
	if o != nil && !IsNil(o.TransOutType) {
		return true
	}

	return false
}

// SetTransOutType gets a reference to the given string and assigns it to the TransOutType field.
func (o *RoyaltyDetail) SetTransOutType(v string) {
	o.TransOutType = &v
}

func (o RoyaltyDetail) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RoyaltyDetail) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Amount) {
		toSerialize["amount"] = o.Amount
	}
	if !IsNil(o.DetailId) {
		toSerialize["detail_id"] = o.DetailId
	}
	if !IsNil(o.ErrorCode) {
		toSerialize["error_code"] = o.ErrorCode
	}
	if !IsNil(o.ErrorDesc) {
		toSerialize["error_desc"] = o.ErrorDesc
	}
	if !IsNil(o.ExecuteDt) {
		toSerialize["execute_dt"] = o.ExecuteDt
	}
	if !IsNil(o.OperationType) {
		toSerialize["operation_type"] = o.OperationType
	}
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	if !IsNil(o.TransIn) {
		toSerialize["trans_in"] = o.TransIn
	}
	if !IsNil(o.TransInOpenId) {
		toSerialize["trans_in_open_id"] = o.TransInOpenId
	}
	if !IsNil(o.TransInType) {
		toSerialize["trans_in_type"] = o.TransInType
	}
	if !IsNil(o.TransOut) {
		toSerialize["trans_out"] = o.TransOut
	}
	if !IsNil(o.TransOutOpenId) {
		toSerialize["trans_out_open_id"] = o.TransOutOpenId
	}
	if !IsNil(o.TransOutType) {
		toSerialize["trans_out_type"] = o.TransOutType
	}
	return toSerialize, nil
}

type NullableRoyaltyDetail struct {
	value *RoyaltyDetail
	isSet bool
}

func (v NullableRoyaltyDetail) Get() *RoyaltyDetail {
	return v.value
}

func (v *NullableRoyaltyDetail) Set(val *RoyaltyDetail) {
	v.value = val
	v.isSet = true
}

func (v NullableRoyaltyDetail) IsSet() bool {
	return v.isSet
}

func (v *NullableRoyaltyDetail) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoyaltyDetail(val *RoyaltyDetail) *NullableRoyaltyDetail {
	return &NullableRoyaltyDetail{value: val, isSet: true}
}

func (v NullableRoyaltyDetail) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoyaltyDetail) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


