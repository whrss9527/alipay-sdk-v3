/*
支付宝开放平台API

支付宝开放平台v3协议文档

API version: 2024-07-05
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the JinyouTestOne type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JinyouTestOne{}

// JinyouTestOne struct for JinyouTestOne
type JinyouTestOne struct {
	// 1
	O1N *string `json:"o_1_n,omitempty"`
	// o_2_y
	O2Openid *string `json:"o_2_openid,omitempty"`
	// o_2_y
	O2Y *string `json:"o_2_y,omitempty"`
	// o_3_y
	O3Openid *string `json:"o_3_openid,omitempty"`
	// o_3_y
	O3Y *int32 `json:"o_3_y,omitempty"`
}

// NewJinyouTestOne instantiates a new JinyouTestOne object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJinyouTestOne() *JinyouTestOne {
	this := JinyouTestOne{}
	return &this
}

// NewJinyouTestOneWithDefaults instantiates a new JinyouTestOne object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJinyouTestOneWithDefaults() *JinyouTestOne {
	this := JinyouTestOne{}
	return &this
}

// GetO1N returns the O1N field value if set, zero value otherwise.
func (o *JinyouTestOne) GetO1N() string {
	if o == nil || IsNil(o.O1N) {
		var ret string
		return ret
	}
	return *o.O1N
}

// GetO1NOk returns a tuple with the O1N field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JinyouTestOne) GetO1NOk() (*string, bool) {
	if o == nil || IsNil(o.O1N) {
		return nil, false
	}
	return o.O1N, true
}

// HasO1N returns a boolean if a field has been set.
func (o *JinyouTestOne) HasO1N() bool {
	if o != nil && !IsNil(o.O1N) {
		return true
	}

	return false
}

// SetO1N gets a reference to the given string and assigns it to the O1N field.
func (o *JinyouTestOne) SetO1N(v string) {
	o.O1N = &v
}

// GetO2Openid returns the O2Openid field value if set, zero value otherwise.
func (o *JinyouTestOne) GetO2Openid() string {
	if o == nil || IsNil(o.O2Openid) {
		var ret string
		return ret
	}
	return *o.O2Openid
}

// GetO2OpenidOk returns a tuple with the O2Openid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JinyouTestOne) GetO2OpenidOk() (*string, bool) {
	if o == nil || IsNil(o.O2Openid) {
		return nil, false
	}
	return o.O2Openid, true
}

// HasO2Openid returns a boolean if a field has been set.
func (o *JinyouTestOne) HasO2Openid() bool {
	if o != nil && !IsNil(o.O2Openid) {
		return true
	}

	return false
}

// SetO2Openid gets a reference to the given string and assigns it to the O2Openid field.
func (o *JinyouTestOne) SetO2Openid(v string) {
	o.O2Openid = &v
}

// GetO2Y returns the O2Y field value if set, zero value otherwise.
func (o *JinyouTestOne) GetO2Y() string {
	if o == nil || IsNil(o.O2Y) {
		var ret string
		return ret
	}
	return *o.O2Y
}

// GetO2YOk returns a tuple with the O2Y field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JinyouTestOne) GetO2YOk() (*string, bool) {
	if o == nil || IsNil(o.O2Y) {
		return nil, false
	}
	return o.O2Y, true
}

// HasO2Y returns a boolean if a field has been set.
func (o *JinyouTestOne) HasO2Y() bool {
	if o != nil && !IsNil(o.O2Y) {
		return true
	}

	return false
}

// SetO2Y gets a reference to the given string and assigns it to the O2Y field.
func (o *JinyouTestOne) SetO2Y(v string) {
	o.O2Y = &v
}

// GetO3Openid returns the O3Openid field value if set, zero value otherwise.
func (o *JinyouTestOne) GetO3Openid() string {
	if o == nil || IsNil(o.O3Openid) {
		var ret string
		return ret
	}
	return *o.O3Openid
}

// GetO3OpenidOk returns a tuple with the O3Openid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JinyouTestOne) GetO3OpenidOk() (*string, bool) {
	if o == nil || IsNil(o.O3Openid) {
		return nil, false
	}
	return o.O3Openid, true
}

// HasO3Openid returns a boolean if a field has been set.
func (o *JinyouTestOne) HasO3Openid() bool {
	if o != nil && !IsNil(o.O3Openid) {
		return true
	}

	return false
}

// SetO3Openid gets a reference to the given string and assigns it to the O3Openid field.
func (o *JinyouTestOne) SetO3Openid(v string) {
	o.O3Openid = &v
}

// GetO3Y returns the O3Y field value if set, zero value otherwise.
func (o *JinyouTestOne) GetO3Y() int32 {
	if o == nil || IsNil(o.O3Y) {
		var ret int32
		return ret
	}
	return *o.O3Y
}

// GetO3YOk returns a tuple with the O3Y field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JinyouTestOne) GetO3YOk() (*int32, bool) {
	if o == nil || IsNil(o.O3Y) {
		return nil, false
	}
	return o.O3Y, true
}

// HasO3Y returns a boolean if a field has been set.
func (o *JinyouTestOne) HasO3Y() bool {
	if o != nil && !IsNil(o.O3Y) {
		return true
	}

	return false
}

// SetO3Y gets a reference to the given int32 and assigns it to the O3Y field.
func (o *JinyouTestOne) SetO3Y(v int32) {
	o.O3Y = &v
}

func (o JinyouTestOne) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JinyouTestOne) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.O1N) {
		toSerialize["o_1_n"] = o.O1N
	}
	if !IsNil(o.O2Openid) {
		toSerialize["o_2_openid"] = o.O2Openid
	}
	if !IsNil(o.O2Y) {
		toSerialize["o_2_y"] = o.O2Y
	}
	if !IsNil(o.O3Openid) {
		toSerialize["o_3_openid"] = o.O3Openid
	}
	if !IsNil(o.O3Y) {
		toSerialize["o_3_y"] = o.O3Y
	}
	return toSerialize, nil
}

type NullableJinyouTestOne struct {
	value *JinyouTestOne
	isSet bool
}

func (v NullableJinyouTestOne) Get() *JinyouTestOne {
	return v.value
}

func (v *NullableJinyouTestOne) Set(val *JinyouTestOne) {
	v.value = val
	v.isSet = true
}

func (v NullableJinyouTestOne) IsSet() bool {
	return v.isSet
}

func (v *NullableJinyouTestOne) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJinyouTestOne(val *JinyouTestOne) *NullableJinyouTestOne {
	return &NullableJinyouTestOne{value: val, isSet: true}
}

func (v NullableJinyouTestOne) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJinyouTestOne) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


