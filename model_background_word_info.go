/*
支付宝开放平台API

支付宝开放平台v3协议文档

API version: 2024-07-05
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the BackgroundWordInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BackgroundWordInfo{}

// BackgroundWordInfo struct for BackgroundWordInfo
type BackgroundWordInfo struct {
	// 底纹词
	BackgroundWord *string `json:"background_word,omitempty"`
	// 审核失败原因
	FailReason *string `json:"fail_reason,omitempty"`
	// 底纹词状态
	Status *string `json:"status,omitempty"`
}

// NewBackgroundWordInfo instantiates a new BackgroundWordInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBackgroundWordInfo() *BackgroundWordInfo {
	this := BackgroundWordInfo{}
	return &this
}

// NewBackgroundWordInfoWithDefaults instantiates a new BackgroundWordInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBackgroundWordInfoWithDefaults() *BackgroundWordInfo {
	this := BackgroundWordInfo{}
	return &this
}

// GetBackgroundWord returns the BackgroundWord field value if set, zero value otherwise.
func (o *BackgroundWordInfo) GetBackgroundWord() string {
	if o == nil || IsNil(o.BackgroundWord) {
		var ret string
		return ret
	}
	return *o.BackgroundWord
}

// GetBackgroundWordOk returns a tuple with the BackgroundWord field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BackgroundWordInfo) GetBackgroundWordOk() (*string, bool) {
	if o == nil || IsNil(o.BackgroundWord) {
		return nil, false
	}
	return o.BackgroundWord, true
}

// HasBackgroundWord returns a boolean if a field has been set.
func (o *BackgroundWordInfo) HasBackgroundWord() bool {
	if o != nil && !IsNil(o.BackgroundWord) {
		return true
	}

	return false
}

// SetBackgroundWord gets a reference to the given string and assigns it to the BackgroundWord field.
func (o *BackgroundWordInfo) SetBackgroundWord(v string) {
	o.BackgroundWord = &v
}

// GetFailReason returns the FailReason field value if set, zero value otherwise.
func (o *BackgroundWordInfo) GetFailReason() string {
	if o == nil || IsNil(o.FailReason) {
		var ret string
		return ret
	}
	return *o.FailReason
}

// GetFailReasonOk returns a tuple with the FailReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BackgroundWordInfo) GetFailReasonOk() (*string, bool) {
	if o == nil || IsNil(o.FailReason) {
		return nil, false
	}
	return o.FailReason, true
}

// HasFailReason returns a boolean if a field has been set.
func (o *BackgroundWordInfo) HasFailReason() bool {
	if o != nil && !IsNil(o.FailReason) {
		return true
	}

	return false
}

// SetFailReason gets a reference to the given string and assigns it to the FailReason field.
func (o *BackgroundWordInfo) SetFailReason(v string) {
	o.FailReason = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *BackgroundWordInfo) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BackgroundWordInfo) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *BackgroundWordInfo) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *BackgroundWordInfo) SetStatus(v string) {
	o.Status = &v
}

func (o BackgroundWordInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BackgroundWordInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BackgroundWord) {
		toSerialize["background_word"] = o.BackgroundWord
	}
	if !IsNil(o.FailReason) {
		toSerialize["fail_reason"] = o.FailReason
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	return toSerialize, nil
}

type NullableBackgroundWordInfo struct {
	value *BackgroundWordInfo
	isSet bool
}

func (v NullableBackgroundWordInfo) Get() *BackgroundWordInfo {
	return v.value
}

func (v *NullableBackgroundWordInfo) Set(val *BackgroundWordInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableBackgroundWordInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableBackgroundWordInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBackgroundWordInfo(val *BackgroundWordInfo) *NullableBackgroundWordInfo {
	return &NullableBackgroundWordInfo{value: val, isSet: true}
}

func (v NullableBackgroundWordInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBackgroundWordInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


