/*
支付宝开放平台API

支付宝开放平台v3协议文档

API version: 2024-07-05
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the CommonVoucherUseRule type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CommonVoucherUseRule{}

// CommonVoucherUseRule struct for CommonVoucherUseRule
type CommonVoucherUseRule struct {
	DiscountVoucher *ActivityDiscountVoucher `json:"discount_voucher,omitempty"`
	ExchangeVoucher *ActivityExchangeVoucher `json:"exchange_voucher,omitempty"`
	FixVoucher *ActivityFixVoucher `json:"fix_voucher,omitempty"`
	SpecialVoucher *ActivitySpecialVoucher `json:"special_voucher,omitempty"`
}

// NewCommonVoucherUseRule instantiates a new CommonVoucherUseRule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommonVoucherUseRule() *CommonVoucherUseRule {
	this := CommonVoucherUseRule{}
	return &this
}

// NewCommonVoucherUseRuleWithDefaults instantiates a new CommonVoucherUseRule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommonVoucherUseRuleWithDefaults() *CommonVoucherUseRule {
	this := CommonVoucherUseRule{}
	return &this
}

// GetDiscountVoucher returns the DiscountVoucher field value if set, zero value otherwise.
func (o *CommonVoucherUseRule) GetDiscountVoucher() ActivityDiscountVoucher {
	if o == nil || IsNil(o.DiscountVoucher) {
		var ret ActivityDiscountVoucher
		return ret
	}
	return *o.DiscountVoucher
}

// GetDiscountVoucherOk returns a tuple with the DiscountVoucher field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommonVoucherUseRule) GetDiscountVoucherOk() (*ActivityDiscountVoucher, bool) {
	if o == nil || IsNil(o.DiscountVoucher) {
		return nil, false
	}
	return o.DiscountVoucher, true
}

// HasDiscountVoucher returns a boolean if a field has been set.
func (o *CommonVoucherUseRule) HasDiscountVoucher() bool {
	if o != nil && !IsNil(o.DiscountVoucher) {
		return true
	}

	return false
}

// SetDiscountVoucher gets a reference to the given ActivityDiscountVoucher and assigns it to the DiscountVoucher field.
func (o *CommonVoucherUseRule) SetDiscountVoucher(v ActivityDiscountVoucher) {
	o.DiscountVoucher = &v
}

// GetExchangeVoucher returns the ExchangeVoucher field value if set, zero value otherwise.
func (o *CommonVoucherUseRule) GetExchangeVoucher() ActivityExchangeVoucher {
	if o == nil || IsNil(o.ExchangeVoucher) {
		var ret ActivityExchangeVoucher
		return ret
	}
	return *o.ExchangeVoucher
}

// GetExchangeVoucherOk returns a tuple with the ExchangeVoucher field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommonVoucherUseRule) GetExchangeVoucherOk() (*ActivityExchangeVoucher, bool) {
	if o == nil || IsNil(o.ExchangeVoucher) {
		return nil, false
	}
	return o.ExchangeVoucher, true
}

// HasExchangeVoucher returns a boolean if a field has been set.
func (o *CommonVoucherUseRule) HasExchangeVoucher() bool {
	if o != nil && !IsNil(o.ExchangeVoucher) {
		return true
	}

	return false
}

// SetExchangeVoucher gets a reference to the given ActivityExchangeVoucher and assigns it to the ExchangeVoucher field.
func (o *CommonVoucherUseRule) SetExchangeVoucher(v ActivityExchangeVoucher) {
	o.ExchangeVoucher = &v
}

// GetFixVoucher returns the FixVoucher field value if set, zero value otherwise.
func (o *CommonVoucherUseRule) GetFixVoucher() ActivityFixVoucher {
	if o == nil || IsNil(o.FixVoucher) {
		var ret ActivityFixVoucher
		return ret
	}
	return *o.FixVoucher
}

// GetFixVoucherOk returns a tuple with the FixVoucher field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommonVoucherUseRule) GetFixVoucherOk() (*ActivityFixVoucher, bool) {
	if o == nil || IsNil(o.FixVoucher) {
		return nil, false
	}
	return o.FixVoucher, true
}

// HasFixVoucher returns a boolean if a field has been set.
func (o *CommonVoucherUseRule) HasFixVoucher() bool {
	if o != nil && !IsNil(o.FixVoucher) {
		return true
	}

	return false
}

// SetFixVoucher gets a reference to the given ActivityFixVoucher and assigns it to the FixVoucher field.
func (o *CommonVoucherUseRule) SetFixVoucher(v ActivityFixVoucher) {
	o.FixVoucher = &v
}

// GetSpecialVoucher returns the SpecialVoucher field value if set, zero value otherwise.
func (o *CommonVoucherUseRule) GetSpecialVoucher() ActivitySpecialVoucher {
	if o == nil || IsNil(o.SpecialVoucher) {
		var ret ActivitySpecialVoucher
		return ret
	}
	return *o.SpecialVoucher
}

// GetSpecialVoucherOk returns a tuple with the SpecialVoucher field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommonVoucherUseRule) GetSpecialVoucherOk() (*ActivitySpecialVoucher, bool) {
	if o == nil || IsNil(o.SpecialVoucher) {
		return nil, false
	}
	return o.SpecialVoucher, true
}

// HasSpecialVoucher returns a boolean if a field has been set.
func (o *CommonVoucherUseRule) HasSpecialVoucher() bool {
	if o != nil && !IsNil(o.SpecialVoucher) {
		return true
	}

	return false
}

// SetSpecialVoucher gets a reference to the given ActivitySpecialVoucher and assigns it to the SpecialVoucher field.
func (o *CommonVoucherUseRule) SetSpecialVoucher(v ActivitySpecialVoucher) {
	o.SpecialVoucher = &v
}

func (o CommonVoucherUseRule) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CommonVoucherUseRule) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DiscountVoucher) {
		toSerialize["discount_voucher"] = o.DiscountVoucher
	}
	if !IsNil(o.ExchangeVoucher) {
		toSerialize["exchange_voucher"] = o.ExchangeVoucher
	}
	if !IsNil(o.FixVoucher) {
		toSerialize["fix_voucher"] = o.FixVoucher
	}
	if !IsNil(o.SpecialVoucher) {
		toSerialize["special_voucher"] = o.SpecialVoucher
	}
	return toSerialize, nil
}

type NullableCommonVoucherUseRule struct {
	value *CommonVoucherUseRule
	isSet bool
}

func (v NullableCommonVoucherUseRule) Get() *CommonVoucherUseRule {
	return v.value
}

func (v *NullableCommonVoucherUseRule) Set(val *CommonVoucherUseRule) {
	v.value = val
	v.isSet = true
}

func (v NullableCommonVoucherUseRule) IsSet() bool {
	return v.isSet
}

func (v *NullableCommonVoucherUseRule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommonVoucherUseRule(val *CommonVoucherUseRule) *NullableCommonVoucherUseRule {
	return &NullableCommonVoucherUseRule{value: val, isSet: true}
}

func (v NullableCommonVoucherUseRule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommonVoucherUseRule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


