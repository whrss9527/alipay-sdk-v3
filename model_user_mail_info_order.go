/*
支付宝开放平台API

支付宝开放平台v3协议文档

API version: 2024-07-05
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the UserMailInfoOrder type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserMailInfoOrder{}

// UserMailInfoOrder struct for UserMailInfoOrder
type UserMailInfoOrder struct {
	// 联系所在城市
	City *string `json:"city,omitempty"`
	// 联系人国家
	Country *string `json:"country,omitempty"`
	// 联系人所在县/区
	CountyDistrict *string `json:"county_district,omitempty"`
	// 联系所在详细地址
	DetailAddress *string `json:"detail_address,omitempty"`
	// 电子邮箱
	Email *string `json:"email,omitempty"`
	// 商户ipRole(pid)
	IpRoleId *string `json:"ip_role_id,omitempty"`
	// 联系人名字
	Name *string `json:"name,omitempty"`
	// 联系人省份
	Province *string `json:"province,omitempty"`
	// 联系人所在街道
	Street *string `json:"street,omitempty"`
	// 联系人电话
	Telephone *string `json:"telephone,omitempty"`
}

// NewUserMailInfoOrder instantiates a new UserMailInfoOrder object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserMailInfoOrder() *UserMailInfoOrder {
	this := UserMailInfoOrder{}
	return &this
}

// NewUserMailInfoOrderWithDefaults instantiates a new UserMailInfoOrder object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserMailInfoOrderWithDefaults() *UserMailInfoOrder {
	this := UserMailInfoOrder{}
	return &this
}

// GetCity returns the City field value if set, zero value otherwise.
func (o *UserMailInfoOrder) GetCity() string {
	if o == nil || IsNil(o.City) {
		var ret string
		return ret
	}
	return *o.City
}

// GetCityOk returns a tuple with the City field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserMailInfoOrder) GetCityOk() (*string, bool) {
	if o == nil || IsNil(o.City) {
		return nil, false
	}
	return o.City, true
}

// HasCity returns a boolean if a field has been set.
func (o *UserMailInfoOrder) HasCity() bool {
	if o != nil && !IsNil(o.City) {
		return true
	}

	return false
}

// SetCity gets a reference to the given string and assigns it to the City field.
func (o *UserMailInfoOrder) SetCity(v string) {
	o.City = &v
}

// GetCountry returns the Country field value if set, zero value otherwise.
func (o *UserMailInfoOrder) GetCountry() string {
	if o == nil || IsNil(o.Country) {
		var ret string
		return ret
	}
	return *o.Country
}

// GetCountryOk returns a tuple with the Country field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserMailInfoOrder) GetCountryOk() (*string, bool) {
	if o == nil || IsNil(o.Country) {
		return nil, false
	}
	return o.Country, true
}

// HasCountry returns a boolean if a field has been set.
func (o *UserMailInfoOrder) HasCountry() bool {
	if o != nil && !IsNil(o.Country) {
		return true
	}

	return false
}

// SetCountry gets a reference to the given string and assigns it to the Country field.
func (o *UserMailInfoOrder) SetCountry(v string) {
	o.Country = &v
}

// GetCountyDistrict returns the CountyDistrict field value if set, zero value otherwise.
func (o *UserMailInfoOrder) GetCountyDistrict() string {
	if o == nil || IsNil(o.CountyDistrict) {
		var ret string
		return ret
	}
	return *o.CountyDistrict
}

// GetCountyDistrictOk returns a tuple with the CountyDistrict field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserMailInfoOrder) GetCountyDistrictOk() (*string, bool) {
	if o == nil || IsNil(o.CountyDistrict) {
		return nil, false
	}
	return o.CountyDistrict, true
}

// HasCountyDistrict returns a boolean if a field has been set.
func (o *UserMailInfoOrder) HasCountyDistrict() bool {
	if o != nil && !IsNil(o.CountyDistrict) {
		return true
	}

	return false
}

// SetCountyDistrict gets a reference to the given string and assigns it to the CountyDistrict field.
func (o *UserMailInfoOrder) SetCountyDistrict(v string) {
	o.CountyDistrict = &v
}

// GetDetailAddress returns the DetailAddress field value if set, zero value otherwise.
func (o *UserMailInfoOrder) GetDetailAddress() string {
	if o == nil || IsNil(o.DetailAddress) {
		var ret string
		return ret
	}
	return *o.DetailAddress
}

// GetDetailAddressOk returns a tuple with the DetailAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserMailInfoOrder) GetDetailAddressOk() (*string, bool) {
	if o == nil || IsNil(o.DetailAddress) {
		return nil, false
	}
	return o.DetailAddress, true
}

// HasDetailAddress returns a boolean if a field has been set.
func (o *UserMailInfoOrder) HasDetailAddress() bool {
	if o != nil && !IsNil(o.DetailAddress) {
		return true
	}

	return false
}

// SetDetailAddress gets a reference to the given string and assigns it to the DetailAddress field.
func (o *UserMailInfoOrder) SetDetailAddress(v string) {
	o.DetailAddress = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *UserMailInfoOrder) GetEmail() string {
	if o == nil || IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserMailInfoOrder) GetEmailOk() (*string, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *UserMailInfoOrder) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *UserMailInfoOrder) SetEmail(v string) {
	o.Email = &v
}

// GetIpRoleId returns the IpRoleId field value if set, zero value otherwise.
func (o *UserMailInfoOrder) GetIpRoleId() string {
	if o == nil || IsNil(o.IpRoleId) {
		var ret string
		return ret
	}
	return *o.IpRoleId
}

// GetIpRoleIdOk returns a tuple with the IpRoleId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserMailInfoOrder) GetIpRoleIdOk() (*string, bool) {
	if o == nil || IsNil(o.IpRoleId) {
		return nil, false
	}
	return o.IpRoleId, true
}

// HasIpRoleId returns a boolean if a field has been set.
func (o *UserMailInfoOrder) HasIpRoleId() bool {
	if o != nil && !IsNil(o.IpRoleId) {
		return true
	}

	return false
}

// SetIpRoleId gets a reference to the given string and assigns it to the IpRoleId field.
func (o *UserMailInfoOrder) SetIpRoleId(v string) {
	o.IpRoleId = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *UserMailInfoOrder) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserMailInfoOrder) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *UserMailInfoOrder) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *UserMailInfoOrder) SetName(v string) {
	o.Name = &v
}

// GetProvince returns the Province field value if set, zero value otherwise.
func (o *UserMailInfoOrder) GetProvince() string {
	if o == nil || IsNil(o.Province) {
		var ret string
		return ret
	}
	return *o.Province
}

// GetProvinceOk returns a tuple with the Province field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserMailInfoOrder) GetProvinceOk() (*string, bool) {
	if o == nil || IsNil(o.Province) {
		return nil, false
	}
	return o.Province, true
}

// HasProvince returns a boolean if a field has been set.
func (o *UserMailInfoOrder) HasProvince() bool {
	if o != nil && !IsNil(o.Province) {
		return true
	}

	return false
}

// SetProvince gets a reference to the given string and assigns it to the Province field.
func (o *UserMailInfoOrder) SetProvince(v string) {
	o.Province = &v
}

// GetStreet returns the Street field value if set, zero value otherwise.
func (o *UserMailInfoOrder) GetStreet() string {
	if o == nil || IsNil(o.Street) {
		var ret string
		return ret
	}
	return *o.Street
}

// GetStreetOk returns a tuple with the Street field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserMailInfoOrder) GetStreetOk() (*string, bool) {
	if o == nil || IsNil(o.Street) {
		return nil, false
	}
	return o.Street, true
}

// HasStreet returns a boolean if a field has been set.
func (o *UserMailInfoOrder) HasStreet() bool {
	if o != nil && !IsNil(o.Street) {
		return true
	}

	return false
}

// SetStreet gets a reference to the given string and assigns it to the Street field.
func (o *UserMailInfoOrder) SetStreet(v string) {
	o.Street = &v
}

// GetTelephone returns the Telephone field value if set, zero value otherwise.
func (o *UserMailInfoOrder) GetTelephone() string {
	if o == nil || IsNil(o.Telephone) {
		var ret string
		return ret
	}
	return *o.Telephone
}

// GetTelephoneOk returns a tuple with the Telephone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserMailInfoOrder) GetTelephoneOk() (*string, bool) {
	if o == nil || IsNil(o.Telephone) {
		return nil, false
	}
	return o.Telephone, true
}

// HasTelephone returns a boolean if a field has been set.
func (o *UserMailInfoOrder) HasTelephone() bool {
	if o != nil && !IsNil(o.Telephone) {
		return true
	}

	return false
}

// SetTelephone gets a reference to the given string and assigns it to the Telephone field.
func (o *UserMailInfoOrder) SetTelephone(v string) {
	o.Telephone = &v
}

func (o UserMailInfoOrder) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserMailInfoOrder) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.City) {
		toSerialize["city"] = o.City
	}
	if !IsNil(o.Country) {
		toSerialize["country"] = o.Country
	}
	if !IsNil(o.CountyDistrict) {
		toSerialize["county_district"] = o.CountyDistrict
	}
	if !IsNil(o.DetailAddress) {
		toSerialize["detail_address"] = o.DetailAddress
	}
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	if !IsNil(o.IpRoleId) {
		toSerialize["ip_role_id"] = o.IpRoleId
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Province) {
		toSerialize["province"] = o.Province
	}
	if !IsNil(o.Street) {
		toSerialize["street"] = o.Street
	}
	if !IsNil(o.Telephone) {
		toSerialize["telephone"] = o.Telephone
	}
	return toSerialize, nil
}

type NullableUserMailInfoOrder struct {
	value *UserMailInfoOrder
	isSet bool
}

func (v NullableUserMailInfoOrder) Get() *UserMailInfoOrder {
	return v.value
}

func (v *NullableUserMailInfoOrder) Set(val *UserMailInfoOrder) {
	v.value = val
	v.isSet = true
}

func (v NullableUserMailInfoOrder) IsSet() bool {
	return v.isSet
}

func (v *NullableUserMailInfoOrder) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserMailInfoOrder(val *UserMailInfoOrder) *NullableUserMailInfoOrder {
	return &NullableUserMailInfoOrder{value: val, isSet: true}
}

func (v NullableUserMailInfoOrder) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserMailInfoOrder) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


