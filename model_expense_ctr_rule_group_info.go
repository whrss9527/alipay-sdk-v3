/*
支付宝开放平台API

支付宝开放平台v3协议文档

API version: 2024-07-05
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alipay

import (
	"encoding/json"
)

// checks if the ExpenseCtrRuleGroupInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExpenseCtrRuleGroupInfo{}

// ExpenseCtrRuleGroupInfo struct for ExpenseCtrRuleGroupInfo
type ExpenseCtrRuleGroupInfo struct {
	// 费控条件列表
	ExpenseCtrlRuleInfoList []ExpenseCtrRuleInfo `json:"expense_ctrl_rule_info_list,omitempty"`
	// 费用类型 特殊说明：仅支持费用类型DEFAULT
	ExpenseType *string `json:"expense_type,omitempty"`
	// 费控规则ID
	GroupId *string `json:"group_id,omitempty"`
	// 费控规则名称 约束： 1）敏感词校验 2）不能重复
	GroupName *string `json:"group_name,omitempty"`
}

// NewExpenseCtrRuleGroupInfo instantiates a new ExpenseCtrRuleGroupInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExpenseCtrRuleGroupInfo() *ExpenseCtrRuleGroupInfo {
	this := ExpenseCtrRuleGroupInfo{}
	return &this
}

// NewExpenseCtrRuleGroupInfoWithDefaults instantiates a new ExpenseCtrRuleGroupInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExpenseCtrRuleGroupInfoWithDefaults() *ExpenseCtrRuleGroupInfo {
	this := ExpenseCtrRuleGroupInfo{}
	return &this
}

// GetExpenseCtrlRuleInfoList returns the ExpenseCtrlRuleInfoList field value if set, zero value otherwise.
func (o *ExpenseCtrRuleGroupInfo) GetExpenseCtrlRuleInfoList() []ExpenseCtrRuleInfo {
	if o == nil || IsNil(o.ExpenseCtrlRuleInfoList) {
		var ret []ExpenseCtrRuleInfo
		return ret
	}
	return o.ExpenseCtrlRuleInfoList
}

// GetExpenseCtrlRuleInfoListOk returns a tuple with the ExpenseCtrlRuleInfoList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExpenseCtrRuleGroupInfo) GetExpenseCtrlRuleInfoListOk() ([]ExpenseCtrRuleInfo, bool) {
	if o == nil || IsNil(o.ExpenseCtrlRuleInfoList) {
		return nil, false
	}
	return o.ExpenseCtrlRuleInfoList, true
}

// HasExpenseCtrlRuleInfoList returns a boolean if a field has been set.
func (o *ExpenseCtrRuleGroupInfo) HasExpenseCtrlRuleInfoList() bool {
	if o != nil && !IsNil(o.ExpenseCtrlRuleInfoList) {
		return true
	}

	return false
}

// SetExpenseCtrlRuleInfoList gets a reference to the given []ExpenseCtrRuleInfo and assigns it to the ExpenseCtrlRuleInfoList field.
func (o *ExpenseCtrRuleGroupInfo) SetExpenseCtrlRuleInfoList(v []ExpenseCtrRuleInfo) {
	o.ExpenseCtrlRuleInfoList = v
}

// GetExpenseType returns the ExpenseType field value if set, zero value otherwise.
func (o *ExpenseCtrRuleGroupInfo) GetExpenseType() string {
	if o == nil || IsNil(o.ExpenseType) {
		var ret string
		return ret
	}
	return *o.ExpenseType
}

// GetExpenseTypeOk returns a tuple with the ExpenseType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExpenseCtrRuleGroupInfo) GetExpenseTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ExpenseType) {
		return nil, false
	}
	return o.ExpenseType, true
}

// HasExpenseType returns a boolean if a field has been set.
func (o *ExpenseCtrRuleGroupInfo) HasExpenseType() bool {
	if o != nil && !IsNil(o.ExpenseType) {
		return true
	}

	return false
}

// SetExpenseType gets a reference to the given string and assigns it to the ExpenseType field.
func (o *ExpenseCtrRuleGroupInfo) SetExpenseType(v string) {
	o.ExpenseType = &v
}

// GetGroupId returns the GroupId field value if set, zero value otherwise.
func (o *ExpenseCtrRuleGroupInfo) GetGroupId() string {
	if o == nil || IsNil(o.GroupId) {
		var ret string
		return ret
	}
	return *o.GroupId
}

// GetGroupIdOk returns a tuple with the GroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExpenseCtrRuleGroupInfo) GetGroupIdOk() (*string, bool) {
	if o == nil || IsNil(o.GroupId) {
		return nil, false
	}
	return o.GroupId, true
}

// HasGroupId returns a boolean if a field has been set.
func (o *ExpenseCtrRuleGroupInfo) HasGroupId() bool {
	if o != nil && !IsNil(o.GroupId) {
		return true
	}

	return false
}

// SetGroupId gets a reference to the given string and assigns it to the GroupId field.
func (o *ExpenseCtrRuleGroupInfo) SetGroupId(v string) {
	o.GroupId = &v
}

// GetGroupName returns the GroupName field value if set, zero value otherwise.
func (o *ExpenseCtrRuleGroupInfo) GetGroupName() string {
	if o == nil || IsNil(o.GroupName) {
		var ret string
		return ret
	}
	return *o.GroupName
}

// GetGroupNameOk returns a tuple with the GroupName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExpenseCtrRuleGroupInfo) GetGroupNameOk() (*string, bool) {
	if o == nil || IsNil(o.GroupName) {
		return nil, false
	}
	return o.GroupName, true
}

// HasGroupName returns a boolean if a field has been set.
func (o *ExpenseCtrRuleGroupInfo) HasGroupName() bool {
	if o != nil && !IsNil(o.GroupName) {
		return true
	}

	return false
}

// SetGroupName gets a reference to the given string and assigns it to the GroupName field.
func (o *ExpenseCtrRuleGroupInfo) SetGroupName(v string) {
	o.GroupName = &v
}

func (o ExpenseCtrRuleGroupInfo) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExpenseCtrRuleGroupInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ExpenseCtrlRuleInfoList) {
		toSerialize["expense_ctrl_rule_info_list"] = o.ExpenseCtrlRuleInfoList
	}
	if !IsNil(o.ExpenseType) {
		toSerialize["expense_type"] = o.ExpenseType
	}
	if !IsNil(o.GroupId) {
		toSerialize["group_id"] = o.GroupId
	}
	if !IsNil(o.GroupName) {
		toSerialize["group_name"] = o.GroupName
	}
	return toSerialize, nil
}

type NullableExpenseCtrRuleGroupInfo struct {
	value *ExpenseCtrRuleGroupInfo
	isSet bool
}

func (v NullableExpenseCtrRuleGroupInfo) Get() *ExpenseCtrRuleGroupInfo {
	return v.value
}

func (v *NullableExpenseCtrRuleGroupInfo) Set(val *ExpenseCtrRuleGroupInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableExpenseCtrRuleGroupInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableExpenseCtrRuleGroupInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExpenseCtrRuleGroupInfo(val *ExpenseCtrRuleGroupInfo) *NullableExpenseCtrRuleGroupInfo {
	return &NullableExpenseCtrRuleGroupInfo{value: val, isSet: true}
}

func (v NullableExpenseCtrRuleGroupInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExpenseCtrRuleGroupInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
