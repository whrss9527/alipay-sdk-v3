/*
支付宝开放平台API

支付宝开放平台v3协议文档

API version: 2024-07-05
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the RoyaltyInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RoyaltyInfo{}

// RoyaltyInfo struct for RoyaltyInfo
type RoyaltyInfo struct {
	// 分账明细的信息，可以描述多条分账指令，json数组。
	RoyaltyDetailInfos []RoyaltyDetailInfos `json:"royalty_detail_infos,omitempty"`
	// 分账类型  卖家的分账类型，目前只支持传入ROYALTY（普通分账类型）。
	RoyaltyType *string `json:"royalty_type,omitempty"`
}

// NewRoyaltyInfo instantiates a new RoyaltyInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRoyaltyInfo() *RoyaltyInfo {
	this := RoyaltyInfo{}
	return &this
}

// NewRoyaltyInfoWithDefaults instantiates a new RoyaltyInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRoyaltyInfoWithDefaults() *RoyaltyInfo {
	this := RoyaltyInfo{}
	return &this
}

// GetRoyaltyDetailInfos returns the RoyaltyDetailInfos field value if set, zero value otherwise.
func (o *RoyaltyInfo) GetRoyaltyDetailInfos() []RoyaltyDetailInfos {
	if o == nil || IsNil(o.RoyaltyDetailInfos) {
		var ret []RoyaltyDetailInfos
		return ret
	}
	return o.RoyaltyDetailInfos
}

// GetRoyaltyDetailInfosOk returns a tuple with the RoyaltyDetailInfos field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoyaltyInfo) GetRoyaltyDetailInfosOk() ([]RoyaltyDetailInfos, bool) {
	if o == nil || IsNil(o.RoyaltyDetailInfos) {
		return nil, false
	}
	return o.RoyaltyDetailInfos, true
}

// HasRoyaltyDetailInfos returns a boolean if a field has been set.
func (o *RoyaltyInfo) HasRoyaltyDetailInfos() bool {
	if o != nil && !IsNil(o.RoyaltyDetailInfos) {
		return true
	}

	return false
}

// SetRoyaltyDetailInfos gets a reference to the given []RoyaltyDetailInfos and assigns it to the RoyaltyDetailInfos field.
func (o *RoyaltyInfo) SetRoyaltyDetailInfos(v []RoyaltyDetailInfos) {
	o.RoyaltyDetailInfos = v
}

// GetRoyaltyType returns the RoyaltyType field value if set, zero value otherwise.
func (o *RoyaltyInfo) GetRoyaltyType() string {
	if o == nil || IsNil(o.RoyaltyType) {
		var ret string
		return ret
	}
	return *o.RoyaltyType
}

// GetRoyaltyTypeOk returns a tuple with the RoyaltyType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoyaltyInfo) GetRoyaltyTypeOk() (*string, bool) {
	if o == nil || IsNil(o.RoyaltyType) {
		return nil, false
	}
	return o.RoyaltyType, true
}

// HasRoyaltyType returns a boolean if a field has been set.
func (o *RoyaltyInfo) HasRoyaltyType() bool {
	if o != nil && !IsNil(o.RoyaltyType) {
		return true
	}

	return false
}

// SetRoyaltyType gets a reference to the given string and assigns it to the RoyaltyType field.
func (o *RoyaltyInfo) SetRoyaltyType(v string) {
	o.RoyaltyType = &v
}

func (o RoyaltyInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RoyaltyInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RoyaltyDetailInfos) {
		toSerialize["royalty_detail_infos"] = o.RoyaltyDetailInfos
	}
	if !IsNil(o.RoyaltyType) {
		toSerialize["royalty_type"] = o.RoyaltyType
	}
	return toSerialize, nil
}

type NullableRoyaltyInfo struct {
	value *RoyaltyInfo
	isSet bool
}

func (v NullableRoyaltyInfo) Get() *RoyaltyInfo {
	return v.value
}

func (v *NullableRoyaltyInfo) Set(val *RoyaltyInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableRoyaltyInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableRoyaltyInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoyaltyInfo(val *RoyaltyInfo) *NullableRoyaltyInfo {
	return &NullableRoyaltyInfo{value: val, isSet: true}
}

func (v NullableRoyaltyInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoyaltyInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


