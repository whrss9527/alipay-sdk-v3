/*
支付宝开放平台API

支付宝开放平台v3协议文档

API version: 2024-07-05
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the JinyouTestTwo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JinyouTestTwo{}

// JinyouTestTwo struct for JinyouTestTwo
type JinyouTestTwo struct {
	// 1
	T1Openid *string `json:"t_1_openid,omitempty"`
	// 1
	T1Y *string `json:"t_1_y,omitempty"`
	T2F *JinyouTestOne `json:"t_2_f,omitempty"`
	// 1
	T3N *string `json:"t_3_n,omitempty"`
}

// NewJinyouTestTwo instantiates a new JinyouTestTwo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJinyouTestTwo() *JinyouTestTwo {
	this := JinyouTestTwo{}
	return &this
}

// NewJinyouTestTwoWithDefaults instantiates a new JinyouTestTwo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJinyouTestTwoWithDefaults() *JinyouTestTwo {
	this := JinyouTestTwo{}
	return &this
}

// GetT1Openid returns the T1Openid field value if set, zero value otherwise.
func (o *JinyouTestTwo) GetT1Openid() string {
	if o == nil || IsNil(o.T1Openid) {
		var ret string
		return ret
	}
	return *o.T1Openid
}

// GetT1OpenidOk returns a tuple with the T1Openid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JinyouTestTwo) GetT1OpenidOk() (*string, bool) {
	if o == nil || IsNil(o.T1Openid) {
		return nil, false
	}
	return o.T1Openid, true
}

// HasT1Openid returns a boolean if a field has been set.
func (o *JinyouTestTwo) HasT1Openid() bool {
	if o != nil && !IsNil(o.T1Openid) {
		return true
	}

	return false
}

// SetT1Openid gets a reference to the given string and assigns it to the T1Openid field.
func (o *JinyouTestTwo) SetT1Openid(v string) {
	o.T1Openid = &v
}

// GetT1Y returns the T1Y field value if set, zero value otherwise.
func (o *JinyouTestTwo) GetT1Y() string {
	if o == nil || IsNil(o.T1Y) {
		var ret string
		return ret
	}
	return *o.T1Y
}

// GetT1YOk returns a tuple with the T1Y field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JinyouTestTwo) GetT1YOk() (*string, bool) {
	if o == nil || IsNil(o.T1Y) {
		return nil, false
	}
	return o.T1Y, true
}

// HasT1Y returns a boolean if a field has been set.
func (o *JinyouTestTwo) HasT1Y() bool {
	if o != nil && !IsNil(o.T1Y) {
		return true
	}

	return false
}

// SetT1Y gets a reference to the given string and assigns it to the T1Y field.
func (o *JinyouTestTwo) SetT1Y(v string) {
	o.T1Y = &v
}

// GetT2F returns the T2F field value if set, zero value otherwise.
func (o *JinyouTestTwo) GetT2F() JinyouTestOne {
	if o == nil || IsNil(o.T2F) {
		var ret JinyouTestOne
		return ret
	}
	return *o.T2F
}

// GetT2FOk returns a tuple with the T2F field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JinyouTestTwo) GetT2FOk() (*JinyouTestOne, bool) {
	if o == nil || IsNil(o.T2F) {
		return nil, false
	}
	return o.T2F, true
}

// HasT2F returns a boolean if a field has been set.
func (o *JinyouTestTwo) HasT2F() bool {
	if o != nil && !IsNil(o.T2F) {
		return true
	}

	return false
}

// SetT2F gets a reference to the given JinyouTestOne and assigns it to the T2F field.
func (o *JinyouTestTwo) SetT2F(v JinyouTestOne) {
	o.T2F = &v
}

// GetT3N returns the T3N field value if set, zero value otherwise.
func (o *JinyouTestTwo) GetT3N() string {
	if o == nil || IsNil(o.T3N) {
		var ret string
		return ret
	}
	return *o.T3N
}

// GetT3NOk returns a tuple with the T3N field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JinyouTestTwo) GetT3NOk() (*string, bool) {
	if o == nil || IsNil(o.T3N) {
		return nil, false
	}
	return o.T3N, true
}

// HasT3N returns a boolean if a field has been set.
func (o *JinyouTestTwo) HasT3N() bool {
	if o != nil && !IsNil(o.T3N) {
		return true
	}

	return false
}

// SetT3N gets a reference to the given string and assigns it to the T3N field.
func (o *JinyouTestTwo) SetT3N(v string) {
	o.T3N = &v
}

func (o JinyouTestTwo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JinyouTestTwo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.T1Openid) {
		toSerialize["t_1_openid"] = o.T1Openid
	}
	if !IsNil(o.T1Y) {
		toSerialize["t_1_y"] = o.T1Y
	}
	if !IsNil(o.T2F) {
		toSerialize["t_2_f"] = o.T2F
	}
	if !IsNil(o.T3N) {
		toSerialize["t_3_n"] = o.T3N
	}
	return toSerialize, nil
}

type NullableJinyouTestTwo struct {
	value *JinyouTestTwo
	isSet bool
}

func (v NullableJinyouTestTwo) Get() *JinyouTestTwo {
	return v.value
}

func (v *NullableJinyouTestTwo) Set(val *JinyouTestTwo) {
	v.value = val
	v.isSet = true
}

func (v NullableJinyouTestTwo) IsSet() bool {
	return v.isSet
}

func (v *NullableJinyouTestTwo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJinyouTestTwo(val *JinyouTestTwo) *NullableJinyouTestTwo {
	return &NullableJinyouTestTwo{value: val, isSet: true}
}

func (v NullableJinyouTestTwo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJinyouTestTwo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


