/*
支付宝开放平台API

支付宝开放平台v3协议文档

API version: 2024-07-05
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the QueryExtension type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &QueryExtension{}

// QueryExtension struct for QueryExtension
type QueryExtension struct {
	// 扩展区列表
	Areas []ExtensionArea `json:"areas,omitempty"`
	// 扩展区套id
	ExtensionKey *string `json:"extension_key,omitempty"`
	// 标签规则列表
	LabelRules []QueryLabelRule `json:"label_rules,omitempty"`
	// 扩展区状态，\"ON\"代表上线，\"OFF\"代表下线，只有上线的扩展区才能被用户看到
	Status *string `json:"status,omitempty"`
}

// NewQueryExtension instantiates a new QueryExtension object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQueryExtension() *QueryExtension {
	this := QueryExtension{}
	return &this
}

// NewQueryExtensionWithDefaults instantiates a new QueryExtension object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQueryExtensionWithDefaults() *QueryExtension {
	this := QueryExtension{}
	return &this
}

// GetAreas returns the Areas field value if set, zero value otherwise.
func (o *QueryExtension) GetAreas() []ExtensionArea {
	if o == nil || IsNil(o.Areas) {
		var ret []ExtensionArea
		return ret
	}
	return o.Areas
}

// GetAreasOk returns a tuple with the Areas field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QueryExtension) GetAreasOk() ([]ExtensionArea, bool) {
	if o == nil || IsNil(o.Areas) {
		return nil, false
	}
	return o.Areas, true
}

// HasAreas returns a boolean if a field has been set.
func (o *QueryExtension) HasAreas() bool {
	if o != nil && !IsNil(o.Areas) {
		return true
	}

	return false
}

// SetAreas gets a reference to the given []ExtensionArea and assigns it to the Areas field.
func (o *QueryExtension) SetAreas(v []ExtensionArea) {
	o.Areas = v
}

// GetExtensionKey returns the ExtensionKey field value if set, zero value otherwise.
func (o *QueryExtension) GetExtensionKey() string {
	if o == nil || IsNil(o.ExtensionKey) {
		var ret string
		return ret
	}
	return *o.ExtensionKey
}

// GetExtensionKeyOk returns a tuple with the ExtensionKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QueryExtension) GetExtensionKeyOk() (*string, bool) {
	if o == nil || IsNil(o.ExtensionKey) {
		return nil, false
	}
	return o.ExtensionKey, true
}

// HasExtensionKey returns a boolean if a field has been set.
func (o *QueryExtension) HasExtensionKey() bool {
	if o != nil && !IsNil(o.ExtensionKey) {
		return true
	}

	return false
}

// SetExtensionKey gets a reference to the given string and assigns it to the ExtensionKey field.
func (o *QueryExtension) SetExtensionKey(v string) {
	o.ExtensionKey = &v
}

// GetLabelRules returns the LabelRules field value if set, zero value otherwise.
func (o *QueryExtension) GetLabelRules() []QueryLabelRule {
	if o == nil || IsNil(o.LabelRules) {
		var ret []QueryLabelRule
		return ret
	}
	return o.LabelRules
}

// GetLabelRulesOk returns a tuple with the LabelRules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QueryExtension) GetLabelRulesOk() ([]QueryLabelRule, bool) {
	if o == nil || IsNil(o.LabelRules) {
		return nil, false
	}
	return o.LabelRules, true
}

// HasLabelRules returns a boolean if a field has been set.
func (o *QueryExtension) HasLabelRules() bool {
	if o != nil && !IsNil(o.LabelRules) {
		return true
	}

	return false
}

// SetLabelRules gets a reference to the given []QueryLabelRule and assigns it to the LabelRules field.
func (o *QueryExtension) SetLabelRules(v []QueryLabelRule) {
	o.LabelRules = v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *QueryExtension) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QueryExtension) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *QueryExtension) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *QueryExtension) SetStatus(v string) {
	o.Status = &v
}

func (o QueryExtension) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o QueryExtension) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Areas) {
		toSerialize["areas"] = o.Areas
	}
	if !IsNil(o.ExtensionKey) {
		toSerialize["extension_key"] = o.ExtensionKey
	}
	if !IsNil(o.LabelRules) {
		toSerialize["label_rules"] = o.LabelRules
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	return toSerialize, nil
}

type NullableQueryExtension struct {
	value *QueryExtension
	isSet bool
}

func (v NullableQueryExtension) Get() *QueryExtension {
	return v.value
}

func (v *NullableQueryExtension) Set(val *QueryExtension) {
	v.value = val
	v.isSet = true
}

func (v NullableQueryExtension) IsSet() bool {
	return v.isSet
}

func (v *NullableQueryExtension) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQueryExtension(val *QueryExtension) *NullableQueryExtension {
	return &NullableQueryExtension{value: val, isSet: true}
}

func (v NullableQueryExtension) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQueryExtension) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


