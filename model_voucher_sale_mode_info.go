/*
支付宝开放平台API

支付宝开放平台v3协议文档

API version: 2024-07-05
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the VoucherSaleModeInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VoucherSaleModeInfo{}

// VoucherSaleModeInfo struct for VoucherSaleModeInfo
type VoucherSaleModeInfo struct {
	// 资金托管方式
	FundCustodyMode *string `json:"fund_custody_mode,omitempty"`
	// 是否支持优惠券过期后，自动退款给用户。 不填默认否，枚举值： true：是  false：否。自动退款功能需要服务商在优惠券过期时，主动调用alipay.marketing.activity.order.refund接口进行退款。  如果配置优惠券时选择了过期自动退款，但是实际券过期后，服务商没有进行退款，那么用户投诉后，需要服务商进行解决。
	OverdueRefundable *bool `json:"overdue_refundable,omitempty"`
	// 在支持过期自动退款后，支付宝发起自动退款前 是否需要向商户确认退款。 不填默认否，枚举值： true：是 false：否。  如果选择了 true:是 ，则需要商户配合接入  过期自动退款前是否需要向商户确认SPI(spi.alipay.marketing.activity.order.refundconfirm)  以及   退款确认结果API(alipay.marketing.activity.order.refundconfirmcommit)
	OverdueRefundableNeedConfirm *bool `json:"overdue_refundable_need_confirm,omitempty"`
	// 收款账号。 目前的结算规则是，每核销一笔优惠券，支付宝会打款到该收款账户。
	PayeePid *string `json:"payee_pid,omitempty"`
	// 购买的优惠券是否允许退款。 不填默认否，枚举值： true：是 false：否
	Refundable *bool `json:"refundable,omitempty"`
	// 在支持随时退后，支付宝发起退款前用于判断是否需要向商户确认退款。 不填默认否，枚举值： true：是 false：否。 如果选择了 true:是  ，则需要商户配合接入退款前是否需要向商户确认SPI(spi.alipay.marketing.activity.order.refundconfirm)
	RefundableNeedConfirm *bool `json:"refundable_need_confirm,omitempty"`
	// 用户购买优惠券需要支付的金额
	SaleAmount *string `json:"sale_amount,omitempty"`
	SettleInfo *BizfundSettleInfo `json:"settle_info,omitempty"`
}

// NewVoucherSaleModeInfo instantiates a new VoucherSaleModeInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVoucherSaleModeInfo() *VoucherSaleModeInfo {
	this := VoucherSaleModeInfo{}
	return &this
}

// NewVoucherSaleModeInfoWithDefaults instantiates a new VoucherSaleModeInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVoucherSaleModeInfoWithDefaults() *VoucherSaleModeInfo {
	this := VoucherSaleModeInfo{}
	return &this
}

// GetFundCustodyMode returns the FundCustodyMode field value if set, zero value otherwise.
func (o *VoucherSaleModeInfo) GetFundCustodyMode() string {
	if o == nil || IsNil(o.FundCustodyMode) {
		var ret string
		return ret
	}
	return *o.FundCustodyMode
}

// GetFundCustodyModeOk returns a tuple with the FundCustodyMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VoucherSaleModeInfo) GetFundCustodyModeOk() (*string, bool) {
	if o == nil || IsNil(o.FundCustodyMode) {
		return nil, false
	}
	return o.FundCustodyMode, true
}

// HasFundCustodyMode returns a boolean if a field has been set.
func (o *VoucherSaleModeInfo) HasFundCustodyMode() bool {
	if o != nil && !IsNil(o.FundCustodyMode) {
		return true
	}

	return false
}

// SetFundCustodyMode gets a reference to the given string and assigns it to the FundCustodyMode field.
func (o *VoucherSaleModeInfo) SetFundCustodyMode(v string) {
	o.FundCustodyMode = &v
}

// GetOverdueRefundable returns the OverdueRefundable field value if set, zero value otherwise.
func (o *VoucherSaleModeInfo) GetOverdueRefundable() bool {
	if o == nil || IsNil(o.OverdueRefundable) {
		var ret bool
		return ret
	}
	return *o.OverdueRefundable
}

// GetOverdueRefundableOk returns a tuple with the OverdueRefundable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VoucherSaleModeInfo) GetOverdueRefundableOk() (*bool, bool) {
	if o == nil || IsNil(o.OverdueRefundable) {
		return nil, false
	}
	return o.OverdueRefundable, true
}

// HasOverdueRefundable returns a boolean if a field has been set.
func (o *VoucherSaleModeInfo) HasOverdueRefundable() bool {
	if o != nil && !IsNil(o.OverdueRefundable) {
		return true
	}

	return false
}

// SetOverdueRefundable gets a reference to the given bool and assigns it to the OverdueRefundable field.
func (o *VoucherSaleModeInfo) SetOverdueRefundable(v bool) {
	o.OverdueRefundable = &v
}

// GetOverdueRefundableNeedConfirm returns the OverdueRefundableNeedConfirm field value if set, zero value otherwise.
func (o *VoucherSaleModeInfo) GetOverdueRefundableNeedConfirm() bool {
	if o == nil || IsNil(o.OverdueRefundableNeedConfirm) {
		var ret bool
		return ret
	}
	return *o.OverdueRefundableNeedConfirm
}

// GetOverdueRefundableNeedConfirmOk returns a tuple with the OverdueRefundableNeedConfirm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VoucherSaleModeInfo) GetOverdueRefundableNeedConfirmOk() (*bool, bool) {
	if o == nil || IsNil(o.OverdueRefundableNeedConfirm) {
		return nil, false
	}
	return o.OverdueRefundableNeedConfirm, true
}

// HasOverdueRefundableNeedConfirm returns a boolean if a field has been set.
func (o *VoucherSaleModeInfo) HasOverdueRefundableNeedConfirm() bool {
	if o != nil && !IsNil(o.OverdueRefundableNeedConfirm) {
		return true
	}

	return false
}

// SetOverdueRefundableNeedConfirm gets a reference to the given bool and assigns it to the OverdueRefundableNeedConfirm field.
func (o *VoucherSaleModeInfo) SetOverdueRefundableNeedConfirm(v bool) {
	o.OverdueRefundableNeedConfirm = &v
}

// GetPayeePid returns the PayeePid field value if set, zero value otherwise.
func (o *VoucherSaleModeInfo) GetPayeePid() string {
	if o == nil || IsNil(o.PayeePid) {
		var ret string
		return ret
	}
	return *o.PayeePid
}

// GetPayeePidOk returns a tuple with the PayeePid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VoucherSaleModeInfo) GetPayeePidOk() (*string, bool) {
	if o == nil || IsNil(o.PayeePid) {
		return nil, false
	}
	return o.PayeePid, true
}

// HasPayeePid returns a boolean if a field has been set.
func (o *VoucherSaleModeInfo) HasPayeePid() bool {
	if o != nil && !IsNil(o.PayeePid) {
		return true
	}

	return false
}

// SetPayeePid gets a reference to the given string and assigns it to the PayeePid field.
func (o *VoucherSaleModeInfo) SetPayeePid(v string) {
	o.PayeePid = &v
}

// GetRefundable returns the Refundable field value if set, zero value otherwise.
func (o *VoucherSaleModeInfo) GetRefundable() bool {
	if o == nil || IsNil(o.Refundable) {
		var ret bool
		return ret
	}
	return *o.Refundable
}

// GetRefundableOk returns a tuple with the Refundable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VoucherSaleModeInfo) GetRefundableOk() (*bool, bool) {
	if o == nil || IsNil(o.Refundable) {
		return nil, false
	}
	return o.Refundable, true
}

// HasRefundable returns a boolean if a field has been set.
func (o *VoucherSaleModeInfo) HasRefundable() bool {
	if o != nil && !IsNil(o.Refundable) {
		return true
	}

	return false
}

// SetRefundable gets a reference to the given bool and assigns it to the Refundable field.
func (o *VoucherSaleModeInfo) SetRefundable(v bool) {
	o.Refundable = &v
}

// GetRefundableNeedConfirm returns the RefundableNeedConfirm field value if set, zero value otherwise.
func (o *VoucherSaleModeInfo) GetRefundableNeedConfirm() bool {
	if o == nil || IsNil(o.RefundableNeedConfirm) {
		var ret bool
		return ret
	}
	return *o.RefundableNeedConfirm
}

// GetRefundableNeedConfirmOk returns a tuple with the RefundableNeedConfirm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VoucherSaleModeInfo) GetRefundableNeedConfirmOk() (*bool, bool) {
	if o == nil || IsNil(o.RefundableNeedConfirm) {
		return nil, false
	}
	return o.RefundableNeedConfirm, true
}

// HasRefundableNeedConfirm returns a boolean if a field has been set.
func (o *VoucherSaleModeInfo) HasRefundableNeedConfirm() bool {
	if o != nil && !IsNil(o.RefundableNeedConfirm) {
		return true
	}

	return false
}

// SetRefundableNeedConfirm gets a reference to the given bool and assigns it to the RefundableNeedConfirm field.
func (o *VoucherSaleModeInfo) SetRefundableNeedConfirm(v bool) {
	o.RefundableNeedConfirm = &v
}

// GetSaleAmount returns the SaleAmount field value if set, zero value otherwise.
func (o *VoucherSaleModeInfo) GetSaleAmount() string {
	if o == nil || IsNil(o.SaleAmount) {
		var ret string
		return ret
	}
	return *o.SaleAmount
}

// GetSaleAmountOk returns a tuple with the SaleAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VoucherSaleModeInfo) GetSaleAmountOk() (*string, bool) {
	if o == nil || IsNil(o.SaleAmount) {
		return nil, false
	}
	return o.SaleAmount, true
}

// HasSaleAmount returns a boolean if a field has been set.
func (o *VoucherSaleModeInfo) HasSaleAmount() bool {
	if o != nil && !IsNil(o.SaleAmount) {
		return true
	}

	return false
}

// SetSaleAmount gets a reference to the given string and assigns it to the SaleAmount field.
func (o *VoucherSaleModeInfo) SetSaleAmount(v string) {
	o.SaleAmount = &v
}

// GetSettleInfo returns the SettleInfo field value if set, zero value otherwise.
func (o *VoucherSaleModeInfo) GetSettleInfo() BizfundSettleInfo {
	if o == nil || IsNil(o.SettleInfo) {
		var ret BizfundSettleInfo
		return ret
	}
	return *o.SettleInfo
}

// GetSettleInfoOk returns a tuple with the SettleInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VoucherSaleModeInfo) GetSettleInfoOk() (*BizfundSettleInfo, bool) {
	if o == nil || IsNil(o.SettleInfo) {
		return nil, false
	}
	return o.SettleInfo, true
}

// HasSettleInfo returns a boolean if a field has been set.
func (o *VoucherSaleModeInfo) HasSettleInfo() bool {
	if o != nil && !IsNil(o.SettleInfo) {
		return true
	}

	return false
}

// SetSettleInfo gets a reference to the given BizfundSettleInfo and assigns it to the SettleInfo field.
func (o *VoucherSaleModeInfo) SetSettleInfo(v BizfundSettleInfo) {
	o.SettleInfo = &v
}

func (o VoucherSaleModeInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VoucherSaleModeInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FundCustodyMode) {
		toSerialize["fund_custody_mode"] = o.FundCustodyMode
	}
	if !IsNil(o.OverdueRefundable) {
		toSerialize["overdue_refundable"] = o.OverdueRefundable
	}
	if !IsNil(o.OverdueRefundableNeedConfirm) {
		toSerialize["overdue_refundable_need_confirm"] = o.OverdueRefundableNeedConfirm
	}
	if !IsNil(o.PayeePid) {
		toSerialize["payee_pid"] = o.PayeePid
	}
	if !IsNil(o.Refundable) {
		toSerialize["refundable"] = o.Refundable
	}
	if !IsNil(o.RefundableNeedConfirm) {
		toSerialize["refundable_need_confirm"] = o.RefundableNeedConfirm
	}
	if !IsNil(o.SaleAmount) {
		toSerialize["sale_amount"] = o.SaleAmount
	}
	if !IsNil(o.SettleInfo) {
		toSerialize["settle_info"] = o.SettleInfo
	}
	return toSerialize, nil
}

type NullableVoucherSaleModeInfo struct {
	value *VoucherSaleModeInfo
	isSet bool
}

func (v NullableVoucherSaleModeInfo) Get() *VoucherSaleModeInfo {
	return v.value
}

func (v *NullableVoucherSaleModeInfo) Set(val *VoucherSaleModeInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableVoucherSaleModeInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableVoucherSaleModeInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVoucherSaleModeInfo(val *VoucherSaleModeInfo) *NullableVoucherSaleModeInfo {
	return &NullableVoucherSaleModeInfo{value: val, isSet: true}
}

func (v NullableVoucherSaleModeInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVoucherSaleModeInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


