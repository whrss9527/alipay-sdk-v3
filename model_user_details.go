/*
支付宝开放平台API

支付宝开放平台v3协议文档

API version: 2024-07-05
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the UserDetails type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserDetails{}

// UserDetails struct for UserDetails
type UserDetails struct {
	// 用户变更手机号，替换旧的手机号
	UserChangeMobile *string `json:"user_change_mobile,omitempty"`
	// 孩子家长的手机号
	UserMobile *string `json:"user_mobile,omitempty"`
	// 张三
	UserName *string `json:"user_name,omitempty"`
	// 孩子与家长的关系： 1、爸爸  2、妈妈  3、爷爷  4、奶奶  5、外公  6、外婆  7、家长
	UserRelation *string `json:"user_relation,omitempty"`
}

// NewUserDetails instantiates a new UserDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserDetails() *UserDetails {
	this := UserDetails{}
	return &this
}

// NewUserDetailsWithDefaults instantiates a new UserDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserDetailsWithDefaults() *UserDetails {
	this := UserDetails{}
	return &this
}

// GetUserChangeMobile returns the UserChangeMobile field value if set, zero value otherwise.
func (o *UserDetails) GetUserChangeMobile() string {
	if o == nil || IsNil(o.UserChangeMobile) {
		var ret string
		return ret
	}
	return *o.UserChangeMobile
}

// GetUserChangeMobileOk returns a tuple with the UserChangeMobile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserDetails) GetUserChangeMobileOk() (*string, bool) {
	if o == nil || IsNil(o.UserChangeMobile) {
		return nil, false
	}
	return o.UserChangeMobile, true
}

// HasUserChangeMobile returns a boolean if a field has been set.
func (o *UserDetails) HasUserChangeMobile() bool {
	if o != nil && !IsNil(o.UserChangeMobile) {
		return true
	}

	return false
}

// SetUserChangeMobile gets a reference to the given string and assigns it to the UserChangeMobile field.
func (o *UserDetails) SetUserChangeMobile(v string) {
	o.UserChangeMobile = &v
}

// GetUserMobile returns the UserMobile field value if set, zero value otherwise.
func (o *UserDetails) GetUserMobile() string {
	if o == nil || IsNil(o.UserMobile) {
		var ret string
		return ret
	}
	return *o.UserMobile
}

// GetUserMobileOk returns a tuple with the UserMobile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserDetails) GetUserMobileOk() (*string, bool) {
	if o == nil || IsNil(o.UserMobile) {
		return nil, false
	}
	return o.UserMobile, true
}

// HasUserMobile returns a boolean if a field has been set.
func (o *UserDetails) HasUserMobile() bool {
	if o != nil && !IsNil(o.UserMobile) {
		return true
	}

	return false
}

// SetUserMobile gets a reference to the given string and assigns it to the UserMobile field.
func (o *UserDetails) SetUserMobile(v string) {
	o.UserMobile = &v
}

// GetUserName returns the UserName field value if set, zero value otherwise.
func (o *UserDetails) GetUserName() string {
	if o == nil || IsNil(o.UserName) {
		var ret string
		return ret
	}
	return *o.UserName
}

// GetUserNameOk returns a tuple with the UserName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserDetails) GetUserNameOk() (*string, bool) {
	if o == nil || IsNil(o.UserName) {
		return nil, false
	}
	return o.UserName, true
}

// HasUserName returns a boolean if a field has been set.
func (o *UserDetails) HasUserName() bool {
	if o != nil && !IsNil(o.UserName) {
		return true
	}

	return false
}

// SetUserName gets a reference to the given string and assigns it to the UserName field.
func (o *UserDetails) SetUserName(v string) {
	o.UserName = &v
}

// GetUserRelation returns the UserRelation field value if set, zero value otherwise.
func (o *UserDetails) GetUserRelation() string {
	if o == nil || IsNil(o.UserRelation) {
		var ret string
		return ret
	}
	return *o.UserRelation
}

// GetUserRelationOk returns a tuple with the UserRelation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserDetails) GetUserRelationOk() (*string, bool) {
	if o == nil || IsNil(o.UserRelation) {
		return nil, false
	}
	return o.UserRelation, true
}

// HasUserRelation returns a boolean if a field has been set.
func (o *UserDetails) HasUserRelation() bool {
	if o != nil && !IsNil(o.UserRelation) {
		return true
	}

	return false
}

// SetUserRelation gets a reference to the given string and assigns it to the UserRelation field.
func (o *UserDetails) SetUserRelation(v string) {
	o.UserRelation = &v
}

func (o UserDetails) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserDetails) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.UserChangeMobile) {
		toSerialize["user_change_mobile"] = o.UserChangeMobile
	}
	if !IsNil(o.UserMobile) {
		toSerialize["user_mobile"] = o.UserMobile
	}
	if !IsNil(o.UserName) {
		toSerialize["user_name"] = o.UserName
	}
	if !IsNil(o.UserRelation) {
		toSerialize["user_relation"] = o.UserRelation
	}
	return toSerialize, nil
}

type NullableUserDetails struct {
	value *UserDetails
	isSet bool
}

func (v NullableUserDetails) Get() *UserDetails {
	return v.value
}

func (v *NullableUserDetails) Set(val *UserDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableUserDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableUserDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserDetails(val *UserDetails) *NullableUserDetails {
	return &NullableUserDetails{value: val, isSet: true}
}

func (v NullableUserDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


