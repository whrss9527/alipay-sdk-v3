/*
支付宝开放平台API

支付宝开放平台v3协议文档

API version: 2024-07-05
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strconv"
	"time"
)


// AntMerchantExpandItemAPIService AntMerchantExpandItemAPI service
type AntMerchantExpandItemAPIService service

type ApiAntMerchantExpandItemCreateRequest struct {
	ctx context.Context
	ApiService *AntMerchantExpandItemAPIService
	antMerchantExpandItemCreateModel *AntMerchantExpandItemCreateModel
}

func (r ApiAntMerchantExpandItemCreateRequest) AntMerchantExpandItemCreateModel(antMerchantExpandItemCreateModel AntMerchantExpandItemCreateModel) ApiAntMerchantExpandItemCreateRequest {
	r.antMerchantExpandItemCreateModel = &antMerchantExpandItemCreateModel
	return r
}

func (r ApiAntMerchantExpandItemCreateRequest) Execute() (*AntMerchantExpandItemCreateResponseModel, *http.Response, error) {
	return r.ApiService.AntMerchantExpandItemCreateExecute(r)
}

/*
AntMerchantExpandItemCreate 商品创建接口

用于服务商或商户创建商品

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAntMerchantExpandItemCreateRequest
*/
func (r *AntMerchantExpandItemAPIService) AntMerchantExpandItemCreate(ctx context.Context) ApiAntMerchantExpandItemCreateRequest {
	return ApiAntMerchantExpandItemCreateRequest{
		ApiService: r,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AntMerchantExpandItemCreateResponseModel
func (a *AntMerchantExpandItemAPIService) AntMerchantExpandItemCreateExecute(r ApiAntMerchantExpandItemCreateRequest) (*AntMerchantExpandItemCreateResponseModel, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AntMerchantExpandItemCreateResponseModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AntMerchantExpandItemAPIService.AntMerchantExpandItemCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/ant/merchant/expand/item/create"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}



	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.antMerchantExpandItemCreateModel

	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	// Add signing logic
	err = a.signRequest(req)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	// Add verification logic
	err = a.verifyResponse(localVarHTTPResponse, localVarBody)
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v AntMerchantExpandItemCreateDefaultResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}


type ApiAntMerchantExpandItemDeleteRequest struct {
	ctx context.Context
	ApiService *AntMerchantExpandItemAPIService
	itemId *string
	externalItemId *string
}

// 商品ID（item_id不为空则以item_id作为删除KEY,item_id为空则以external_item_id作为删除KEY,两者不能同时为空）
func (r ApiAntMerchantExpandItemDeleteRequest) ItemId(itemId string) ApiAntMerchantExpandItemDeleteRequest {
	r.itemId = &itemId
	return r
}

// 外部商品ID（item_id不为空则以item_id作为删除KEY,item_id为空则以external_item_id作为删除KEY,两者不能同时为空）
func (r ApiAntMerchantExpandItemDeleteRequest) ExternalItemId(externalItemId string) ApiAntMerchantExpandItemDeleteRequest {
	r.externalItemId = &externalItemId
	return r
}

func (r ApiAntMerchantExpandItemDeleteRequest) Execute() (*AntMerchantExpandItemDeleteResponseModel, *http.Response, error) {
	return r.ApiService.AntMerchantExpandItemDeleteExecute(r)
}

/*
AntMerchantExpandItemDelete 商品删除接口

用于服务商或商户删除商品

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAntMerchantExpandItemDeleteRequest
*/
func (r *AntMerchantExpandItemAPIService) AntMerchantExpandItemDelete(ctx context.Context) ApiAntMerchantExpandItemDeleteRequest {
	return ApiAntMerchantExpandItemDeleteRequest{
		ApiService: r,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AntMerchantExpandItemDeleteResponseModel
func (a *AntMerchantExpandItemAPIService) AntMerchantExpandItemDeleteExecute(r ApiAntMerchantExpandItemDeleteRequest) (*AntMerchantExpandItemDeleteResponseModel, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AntMerchantExpandItemDeleteResponseModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AntMerchantExpandItemAPIService.AntMerchantExpandItemDelete")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/ant/merchant/expand/item/delete"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}


	if r.itemId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "item_id", r.itemId, "form", "")
	}
	if r.externalItemId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "external_item_id", r.externalItemId, "form", "")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	// Add signing logic
	err = a.signRequest(req)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	// Add verification logic
	err = a.verifyResponse(localVarHTTPResponse, localVarBody)
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v AntMerchantExpandItemDeleteDefaultResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}


type ApiAntMerchantExpandItemModifyRequest struct {
	ctx context.Context
	ApiService *AntMerchantExpandItemAPIService
	antMerchantExpandItemModifyModel *AntMerchantExpandItemModifyModel
}

func (r ApiAntMerchantExpandItemModifyRequest) AntMerchantExpandItemModifyModel(antMerchantExpandItemModifyModel AntMerchantExpandItemModifyModel) ApiAntMerchantExpandItemModifyRequest {
	r.antMerchantExpandItemModifyModel = &antMerchantExpandItemModifyModel
	return r
}

func (r ApiAntMerchantExpandItemModifyRequest) Execute() (*AntMerchantExpandItemModifyResponseModel, *http.Response, error) {
	return r.ApiService.AntMerchantExpandItemModifyExecute(r)
}

/*
AntMerchantExpandItemModify 商品修改接口

用于服务商或商户修改商品

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAntMerchantExpandItemModifyRequest
*/
func (r *AntMerchantExpandItemAPIService) AntMerchantExpandItemModify(ctx context.Context) ApiAntMerchantExpandItemModifyRequest {
	return ApiAntMerchantExpandItemModifyRequest{
		ApiService: r,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AntMerchantExpandItemModifyResponseModel
func (a *AntMerchantExpandItemAPIService) AntMerchantExpandItemModifyExecute(r ApiAntMerchantExpandItemModifyRequest) (*AntMerchantExpandItemModifyResponseModel, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AntMerchantExpandItemModifyResponseModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AntMerchantExpandItemAPIService.AntMerchantExpandItemModify")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/ant/merchant/expand/item/modify"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}



	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.antMerchantExpandItemModifyModel

	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	// Add signing logic
	err = a.signRequest(req)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	// Add verification logic
	err = a.verifyResponse(localVarHTTPResponse, localVarBody)
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v AntMerchantExpandItemModifyDefaultResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}


type ApiAntMerchantExpandItemQueryRequest struct {
	ctx context.Context
	ApiService *AntMerchantExpandItemAPIService
	targetType *string
	targetId *string
	undefinedCategory *bool
	frontCategoryId *string
	status *string
}

// 商品归属主体类型:  5: 店铺  4: 主站MID  3: 参与者  2: 角色  1: 联系人
func (r ApiAntMerchantExpandItemQueryRequest) TargetType(targetType string) ApiAntMerchantExpandItemQueryRequest {
	r.targetType = &targetType
	return r
}

// 商品归属主体id
func (r ApiAntMerchantExpandItemQueryRequest) TargetId(targetId string) ApiAntMerchantExpandItemQueryRequest {
	r.targetId = &targetId
	return r
}

// 未分类类目: true 的时候 front_category_id 必须不填（null）
func (r ApiAntMerchantExpandItemQueryRequest) UndefinedCategory(undefinedCategory bool) ApiAntMerchantExpandItemQueryRequest {
	r.undefinedCategory = &undefinedCategory
	return r
}

// 商品前台类目id: null 表示所有分类
func (r ApiAntMerchantExpandItemQueryRequest) FrontCategoryId(frontCategoryId string) ApiAntMerchantExpandItemQueryRequest {
	r.frontCategoryId = &frontCategoryId
	return r
}

// 商品状态：EFFECT、INVALID、PAUSE；不填返回所有状态商品
func (r ApiAntMerchantExpandItemQueryRequest) Status(status string) ApiAntMerchantExpandItemQueryRequest {
	r.status = &status
	return r
}

func (r ApiAntMerchantExpandItemQueryRequest) Execute() (*AntMerchantExpandItemQueryResponseModel, *http.Response, error) {
	return r.ApiService.AntMerchantExpandItemQueryExecute(r)
}

/*
AntMerchantExpandItemQuery 商品查询接口

用于服务商或商户查询其商品信息

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAntMerchantExpandItemQueryRequest
*/
func (r *AntMerchantExpandItemAPIService) AntMerchantExpandItemQuery(ctx context.Context) ApiAntMerchantExpandItemQueryRequest {
	return ApiAntMerchantExpandItemQueryRequest{
		ApiService: r,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AntMerchantExpandItemQueryResponseModel
func (a *AntMerchantExpandItemAPIService) AntMerchantExpandItemQueryExecute(r ApiAntMerchantExpandItemQueryRequest) (*AntMerchantExpandItemQueryResponseModel, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AntMerchantExpandItemQueryResponseModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AntMerchantExpandItemAPIService.AntMerchantExpandItemQuery")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/ant/merchant/expand/item/query"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}


	if r.targetType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "target_type", r.targetType, "form", "")
	}
	if r.targetId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "target_id", r.targetId, "form", "")
	}
	if r.undefinedCategory != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "undefined_category", r.undefinedCategory, "form", "")
	}
	if r.frontCategoryId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "front_category_id", r.frontCategoryId, "form", "")
	}
	if r.status != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "status", r.status, "form", "")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	// Add signing logic
	err = a.signRequest(req)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	// Add verification logic
	err = a.verifyResponse(localVarHTTPResponse, localVarBody)
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v AntMerchantExpandItemQueryDefaultResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}


func (a *AntMerchantExpandItemAPIService) signRequest(req *http.Request) error {
	appID := a.client.cfg.AppID
	appCertSN := a.client.cfg.AppCertSN
	privateKey := a.client.cfg.PrivateKey

	nonce := generateUUID()
	timestamp := strconv.FormatInt(time.Now().UnixNano()/1e6, 10)

	authString := fmt.Sprintf("app_id=%s", appID)
	if appCertSN != "" {
		authString += fmt.Sprintf(",app_cert_sn=%s", appCertSN)
	}
	authString += fmt.Sprintf(",nonce=%s,timestamp=%s", nonce, timestamp)

	httpMethod := req.Method
	httpRequestUri := req.URL.Path
	if req.URL.RawQuery != "" {
		httpRequestUri += "?" + req.URL.RawQuery
	}

	var httpRequestBody string
	if req.Body != nil {
		bodyBytes, err := io.ReadAll(req.Body)
		if err != nil {
			return err
		}
		httpRequestBody = string(bodyBytes)
		req.Body = io.NopCloser(bytes.NewBuffer(bodyBytes))
	}

	content := authString + "\n" +
		httpMethod + "\n" +
		httpRequestUri + "\n" +
		httpRequestBody + "\n"

	if appAuthToken := req.Header.Get("alipay-app-auth-token"); appAuthToken != "" {
		content += appAuthToken + "\n"
	}

	signature, err := signWithRSA(content, privateKey)
	if err != nil {
		return err
	}

	req.Header.Set("Authorization", fmt.Sprintf("ALIPAY-SHA256withRSA %s,sign=%s", authString, signature))
	return nil
}

func (a *AntMerchantExpandItemAPIService) verifyResponse(resp *http.Response, body []byte) error {
	timestamp := resp.Header.Get("alipay-timestamp")
	nonce := resp.Header.Get("alipay-nonce")
	sign := resp.Header.Get("alipay-signature")

	content := timestamp + "\n" +
		nonce + "\n" +
		string(body) + "\n"

	publicKey := a.client.cfg.PublicKey

	return verifyWithRSA(content, sign, publicKey)
}


