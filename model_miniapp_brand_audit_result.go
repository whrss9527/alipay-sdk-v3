/*
支付宝开放平台API

支付宝开放平台v3协议文档

API version: 2024-07-05
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alipay

import (
	"encoding/json"
)

// checks if the MiniappBrandAuditResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MiniappBrandAuditResult{}

// MiniappBrandAuditResult struct for MiniappBrandAuditResult
type MiniappBrandAuditResult struct {
	// 小程序提交品牌认证时的品牌id
	BrandId *string `json:"brand_id,omitempty"`
	// 小程序提交品牌认证时的品牌名称
	BrandName *string `json:"brand_name,omitempty"`
	// 小程序提交品牌认证后的认证状态
	BrandStatus *string `json:"brand_status,omitempty"`
	// 小程序提交品牌认证是否认证成功
	HasBrand *string `json:"has_brand,omitempty"`
	// 失效原因
	InvalidReason *string `json:"invalid_reason,omitempty"`
	// 驳回原因
	RejectReason *string `json:"reject_reason,omitempty"`
}

// NewMiniappBrandAuditResult instantiates a new MiniappBrandAuditResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMiniappBrandAuditResult() *MiniappBrandAuditResult {
	this := MiniappBrandAuditResult{}
	return &this
}

// NewMiniappBrandAuditResultWithDefaults instantiates a new MiniappBrandAuditResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMiniappBrandAuditResultWithDefaults() *MiniappBrandAuditResult {
	this := MiniappBrandAuditResult{}
	return &this
}

// GetBrandId returns the BrandId field value if set, zero value otherwise.
func (o *MiniappBrandAuditResult) GetBrandId() string {
	if o == nil || IsNil(o.BrandId) {
		var ret string
		return ret
	}
	return *o.BrandId
}

// GetBrandIdOk returns a tuple with the BrandId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MiniappBrandAuditResult) GetBrandIdOk() (*string, bool) {
	if o == nil || IsNil(o.BrandId) {
		return nil, false
	}
	return o.BrandId, true
}

// HasBrandId returns a boolean if a field has been set.
func (o *MiniappBrandAuditResult) HasBrandId() bool {
	if o != nil && !IsNil(o.BrandId) {
		return true
	}

	return false
}

// SetBrandId gets a reference to the given string and assigns it to the BrandId field.
func (o *MiniappBrandAuditResult) SetBrandId(v string) {
	o.BrandId = &v
}

// GetBrandName returns the BrandName field value if set, zero value otherwise.
func (o *MiniappBrandAuditResult) GetBrandName() string {
	if o == nil || IsNil(o.BrandName) {
		var ret string
		return ret
	}
	return *o.BrandName
}

// GetBrandNameOk returns a tuple with the BrandName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MiniappBrandAuditResult) GetBrandNameOk() (*string, bool) {
	if o == nil || IsNil(o.BrandName) {
		return nil, false
	}
	return o.BrandName, true
}

// HasBrandName returns a boolean if a field has been set.
func (o *MiniappBrandAuditResult) HasBrandName() bool {
	if o != nil && !IsNil(o.BrandName) {
		return true
	}

	return false
}

// SetBrandName gets a reference to the given string and assigns it to the BrandName field.
func (o *MiniappBrandAuditResult) SetBrandName(v string) {
	o.BrandName = &v
}

// GetBrandStatus returns the BrandStatus field value if set, zero value otherwise.
func (o *MiniappBrandAuditResult) GetBrandStatus() string {
	if o == nil || IsNil(o.BrandStatus) {
		var ret string
		return ret
	}
	return *o.BrandStatus
}

// GetBrandStatusOk returns a tuple with the BrandStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MiniappBrandAuditResult) GetBrandStatusOk() (*string, bool) {
	if o == nil || IsNil(o.BrandStatus) {
		return nil, false
	}
	return o.BrandStatus, true
}

// HasBrandStatus returns a boolean if a field has been set.
func (o *MiniappBrandAuditResult) HasBrandStatus() bool {
	if o != nil && !IsNil(o.BrandStatus) {
		return true
	}

	return false
}

// SetBrandStatus gets a reference to the given string and assigns it to the BrandStatus field.
func (o *MiniappBrandAuditResult) SetBrandStatus(v string) {
	o.BrandStatus = &v
}

// GetHasBrand returns the HasBrand field value if set, zero value otherwise.
func (o *MiniappBrandAuditResult) GetHasBrand() string {
	if o == nil || IsNil(o.HasBrand) {
		var ret string
		return ret
	}
	return *o.HasBrand
}

// GetHasBrandOk returns a tuple with the HasBrand field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MiniappBrandAuditResult) GetHasBrandOk() (*string, bool) {
	if o == nil || IsNil(o.HasBrand) {
		return nil, false
	}
	return o.HasBrand, true
}

// HasHasBrand returns a boolean if a field has been set.
func (o *MiniappBrandAuditResult) HasHasBrand() bool {
	if o != nil && !IsNil(o.HasBrand) {
		return true
	}

	return false
}

// SetHasBrand gets a reference to the given string and assigns it to the HasBrand field.
func (o *MiniappBrandAuditResult) SetHasBrand(v string) {
	o.HasBrand = &v
}

// GetInvalidReason returns the InvalidReason field value if set, zero value otherwise.
func (o *MiniappBrandAuditResult) GetInvalidReason() string {
	if o == nil || IsNil(o.InvalidReason) {
		var ret string
		return ret
	}
	return *o.InvalidReason
}

// GetInvalidReasonOk returns a tuple with the InvalidReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MiniappBrandAuditResult) GetInvalidReasonOk() (*string, bool) {
	if o == nil || IsNil(o.InvalidReason) {
		return nil, false
	}
	return o.InvalidReason, true
}

// HasInvalidReason returns a boolean if a field has been set.
func (o *MiniappBrandAuditResult) HasInvalidReason() bool {
	if o != nil && !IsNil(o.InvalidReason) {
		return true
	}

	return false
}

// SetInvalidReason gets a reference to the given string and assigns it to the InvalidReason field.
func (o *MiniappBrandAuditResult) SetInvalidReason(v string) {
	o.InvalidReason = &v
}

// GetRejectReason returns the RejectReason field value if set, zero value otherwise.
func (o *MiniappBrandAuditResult) GetRejectReason() string {
	if o == nil || IsNil(o.RejectReason) {
		var ret string
		return ret
	}
	return *o.RejectReason
}

// GetRejectReasonOk returns a tuple with the RejectReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MiniappBrandAuditResult) GetRejectReasonOk() (*string, bool) {
	if o == nil || IsNil(o.RejectReason) {
		return nil, false
	}
	return o.RejectReason, true
}

// HasRejectReason returns a boolean if a field has been set.
func (o *MiniappBrandAuditResult) HasRejectReason() bool {
	if o != nil && !IsNil(o.RejectReason) {
		return true
	}

	return false
}

// SetRejectReason gets a reference to the given string and assigns it to the RejectReason field.
func (o *MiniappBrandAuditResult) SetRejectReason(v string) {
	o.RejectReason = &v
}

func (o MiniappBrandAuditResult) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MiniappBrandAuditResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BrandId) {
		toSerialize["brand_id"] = o.BrandId
	}
	if !IsNil(o.BrandName) {
		toSerialize["brand_name"] = o.BrandName
	}
	if !IsNil(o.BrandStatus) {
		toSerialize["brand_status"] = o.BrandStatus
	}
	if !IsNil(o.HasBrand) {
		toSerialize["has_brand"] = o.HasBrand
	}
	if !IsNil(o.InvalidReason) {
		toSerialize["invalid_reason"] = o.InvalidReason
	}
	if !IsNil(o.RejectReason) {
		toSerialize["reject_reason"] = o.RejectReason
	}
	return toSerialize, nil
}

type NullableMiniappBrandAuditResult struct {
	value *MiniappBrandAuditResult
	isSet bool
}

func (v NullableMiniappBrandAuditResult) Get() *MiniappBrandAuditResult {
	return v.value
}

func (v *NullableMiniappBrandAuditResult) Set(val *MiniappBrandAuditResult) {
	v.value = val
	v.isSet = true
}

func (v NullableMiniappBrandAuditResult) IsSet() bool {
	return v.isSet
}

func (v *NullableMiniappBrandAuditResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMiniappBrandAuditResult(val *MiniappBrandAuditResult) *NullableMiniappBrandAuditResult {
	return &NullableMiniappBrandAuditResult{value: val, isSet: true}
}

func (v NullableMiniappBrandAuditResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMiniappBrandAuditResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
